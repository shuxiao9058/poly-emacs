#+title: keybindings

#+begin_src emacs-lisp
  ;;; -*- lexical-binding: t -*-
#+end_src

#+begin_src emacs-lisp
(use-package which-key
  :ensure nil
  :defer 1
  :custom
  (which-key-idle-delay 0.5)
  (which-key-idle-secondary-delay 0.3)
  (which-key-sort-order #'which-key-prefix-then-key-order)
  (which-key-sort-upperjcase-first nil)
  (which-key-add-column-padding 1)
  (which-key-max-display-columns nil)
  (which-key-min-display-lines 4)
  (which-key-side-window-slot -10)
  (which-key-show-early-on-C-h t)
  (which-key-allow-evil-operators t)
  :config
  ;; general improvements to which-key readability
  ;; (set-face-attribute 'which-key-local-map-description-face nil :weight 'bold)
  (which-key-setup-side-window-bottom)
  (which-key-mode +1))

(require 'mouse)
(xterm-mouse-mode t)
(defun track-mouse (e))

;; Yank text to clipboard
(cond
 ;; OS X
 (IS-MAC ; Mac OS X
  (progn
    (setq save-to-clipboard-cmd "pbcopy")
    (setq paste-from-clipboard-cmd "pbpaste")
    )
  )
 ;; Linux
 (IS-LINUX ; linux
  (progn
    (setq save-to-clipboard-cmd "xsel -i -b")
    (setq paste-from-clipboard-cmd "xsel -o -b")
    )
  )
 )

(defun copy-to-clipboard ()
  "Copies selection to x-clipboard."
  (interactive)
  (if IS-GUI
      (progn
        (message "Yanked region to x-clipboard!")
        (call-interactively 'clipboard-kill-ring-save)
        )
    (if (region-active-p)
        (progn
          (shell-command-on-region (region-beginning) (region-end) save-to-clipboard-cmd)
          (message "Yanked region to clipboard!")
          (deactivate-mark))
      (message "No region active; can't yank to clipboard!")))
  )

(defun paste-from-clipboard ()
  "Pastes from x-clipboard."
  (interactive)
  (if IS-GUI
      (progn
        (clipboard-yank)
        (message "graphics active"))
    (insert (shell-command-to-string paste-from-clipboard-cmd))))

;; comment with new line
;; Fix M-j behaviour in block comments in js-mode
(setq-local comment-multi-line t)
(local-set-key [remap indent-new-comment-line] 'c-indent-new-comment-line)

(bind-key "s-c" #'copy-to-clipboard)
(bind-key "s-v" #'paste-from-clipboard)
(bind-key "s-SPC" #'set-mark-command)
;; (bind-key "<f11>" #'toggle-frame-maximized)
(bind-key "<f11>" #'poly/toggle-frame-maximized)
(bind-key (kbd "M-<f10>") #'poly/toggle-frame-maximized)
;; (bind-key "M-RET" #'toggle-frame-fullscreen)
(bind-key (kbd "C-c V") #'poly/open-in-vscode)
(bind-key (kbd "C-c T") #'poly/open-with-tower)
;; (bind-key (kbd "C-x C-b") #'ibuffer)
(bind-key (kbd "C-c q r") #'restart-emacs)
(bind-key "<f9>"  #'hide-mode-line-mode)
(bind-key (kbd "s-j")  #'rime-force-enable)
(bind-key [remap dabbrev-expand] #'hippie-expand)
;; Change C-x C-b behavior so it uses bs; shows only interesting buffers.  The
;; `a' key will toggle visibility of all.
;; (bind-key (kbd "C-x C-b") #'bs-show)
(bind-key (kbd "M-/") #'completion-at-point)
(bind-key (kbd "C-x C-b")  #'ibuffer)         ; or use a nicer switcher, see below
;; (bind-key (kbd "C-c f r" ) #'rename-visited-file)
(bind-key (kbd "C-c f r")  #'consult-recent-file)
(bind-key (kbd "C-c f f")  #'poly/find-file)
(bind-key (kbd "C-c C-<return>") #'tabnine-chat-menu)
(bind-key (kbd "C-c t e") #'eat-project)
(bind-key (kbd "C-c t E") #'eat)

(unbind-key "C-z")
(unbind-key "s-o")
;; (unbind-key "C-x C-q")
#+end_src


*** transform text before paste

 #+begin_src emacs-lisp :tangle no
(defun my-text-transform (start end)
  "Transform the text between START and END in some custom way."
  (let* ((text (buffer-substring start end))
	 (is-vterm-mode (eq major-mode 'vterm-mode))
	 (replace-list (list "\.HEIC\.jpg" "\.MOV\.jpg" "\.MP4\.jpg" ".DNG.jpg" "\.PNG" "\.JPG" "\.jpg"))
	 (matched)
	 (tmp-text)
	 (new-text (if is-vterm-mode
		       (progn
			 (dolist (suffix replace-list)
			 (unless matched
			   (when (s-ends-with? suffix text)
			     (setq matched t)
			     (setq tmp-text (concat "rm -rf " (s-replace suffix "\.*" text))))))
			 (if tmp-text tmp-text text))
		     text)))
    (delete-region start end)
    (if is-vterm-mode
	(vterm-insert new-text))
    (insert new-text)))

(defun yank-pop-custom-transform (arg)
  "Call `yank-pop' and perform a custom text transformation."
  (interactive "p")
  (let ((start (point)))
    (yank-pop arg)
    (let ((end (point)))
      (my-text-transform start end))))

(keymap-global-set "M-y" 'yank-pop-custom-transform)
 #+end_src

* Meow

This configuration sticks with Meow for modal editing.

*** Normal

#+TBLNAME: normal-keybindings
| key      | command                 |
|----------+-------------------------|
| 0        | meow-expand-0           |
| 9        | meow-expand-9           |
| 8        | meow-expand-8           |
| 7        | meow-expand-7           |
| 6        | meow-expand-6           |
| 5        | meow-expand-5           |
| 4        | meow-expand-4           |
| 3        | meow-expand-3           |
| 2        | meow-expand-2           |
| 1        | meow-expand-1           |
| -        | negative-argument       |
| ;        | meow-reverse            |
| ,        | meow-inner-of-thing     |
| .        | meow-bounds-of-thing    |
| [        | meow-beginning-of-thing |
| ]        | meow-end-of-thing       |
| a        | meow-append             |
| A        | meow-open-below         |
| b        | meow-back-word          |
| B        | meow-back-symbol        |
| c        | meow-change             |
| d        | meow-delete             |
| D        | meow-backward-delete    |
| e        | meow-next-word          |
| E        | meow-next-symbol        |
| f        | meow-find               |
| g        | meow-cancel-selection   |
| G        | meow-grab               |
| h        | meow-left               |
| H        | meow-left-expand        |
| i        | meow-insert             |
| I        | meow-open-above         |
| j        | meow-next               |
| J        | meow-next-expand        |
| k        | meow-prev               |
| K        | meow-prev-expand        |
| l        | meow-right              |
| L        | meow-right-expand       |
| m        | meow-join               |
| n        | meow-search             |
| o        | meow-block              |
| O        | meow-to-block           |
| p        | meow-yank               |
| q        | meow-quit               |
| Q        | goto-line               |
| r        | meow-replace            |
| R        | meow-swap-grab          |
| s        | meow-kill               |
| t        | meow-till               |
| u        | meow-undo               |
| U        | meow-undo-in-selection  |
| v        | meow-visit              |
| w        | meow-mark-word          |
| W        | meow-mark-symbol        |
| x        | meow-line               |
| X        | meow-goto-line          |
| y        | meow-save               |
| Y        | meow-sync-grab          |
| z        | meow-pop-selection      |
| '        | repeat                  |
| <escape> | ignore                  |

*** Motion

#+TBLNAME: motion-keybindings
| key | command   |
|-----+-----------|
| j   | meow-next |
| k   | meow-prev |
| <escape>    | ignore          |

*** Leader

#+TBLNAME: leader-keybindings
| key | command                  | description |
|-----+--------------------------+-------------|
|   j | H-j                      |             |
|   k | H-k                      |             |
|   1 | meow-digit-argument      |             |
|   2 | meow-digit-argument      |             |
|   3 | meow-digit-argument      |             |
|   4 | meow-digit-argument      |             |
|   5 | meow-digit-argument      |             |
|   6 | meow-digit-argument      |             |
|   7 | meow-digit-argument      |             |
|   8 | meow-digit-argument      |             |
|   9 | meow-digit-argument      |             |
|   0 | meow-digit-argument      |             |
|   / | meow-keypad-describe-key |             |
|   ? | meow-cheatsheet          |             |

** Define keys
#+header: :var normal-keybindings=normal-keybindings :var motion-keybindings=motion-keybindings :var leader-keybindings=leader-keybindings
#+begin_src emacs-lisp
(defun meow-setup ()
  (let ((parse-def (lambda (x)
                     (cons (string-trim (format "%s" (car x)) "[[:space:]]" "[[:space:]]")
                           (if (string-prefix-p "dispatch:" (cadr x))
                               (string-trim (substring (cadr x) 9))
                             (intern (cadr x)))))))
    (apply #'meow-normal-define-key (mapcar parse-def normal-keybindings))
    (apply #'meow-motion-overwrite-define-key (mapcar parse-def motion-keybindings))
    (apply #'meow-leader-define-key (mapcar parse-def leader-keybindings))))
#+end_src

#+begin_src emacs-lisp
(use-package meow
  :demand t
  :ensure t
  :init
  (meow-global-mode 1)
  :custom
  (meow-use-clipboard t)
  (meow-use-cursor-position-hack t)
  (meow-expand-hint-remove-delay 3.0)
  :config
  (dolist (mode '(inf-iex-mode
		  authinfo-mode
		  Custom-mode
		  cider-test-report-mode
		  comint-mode
		  protobuf-mode
		  cperl-mode
		  perl-mode
		  debuffer-mode
		  ielm-mode
		  inferior-python-mode
		  go-dot-mod-mode
		  go-mod-mode
		  mu4e-view-mode
		  text-mode
		  prog-mode
		  conf-mode
		  json-mode
		  fundamental-mode
		  diff-mode))
    (add-to-list 'meow-mode-state-list `(,mode . normal)))

  ;; motion mode list
  (dolist (mode '(xeft-mode
		  Info-mode
		  ghelp-page-mode
		  git-commit-mode
		  magit-log-edit-mode
		  ;; notmuch-hello-mode
		  ;; notmuch-search-mode
		  ;; notmuch-show-mode
		  ;; notmuch-tree-mode
		  notmuch-show-mode
		  notmuch-tree-mode
		  notmuch-hello-mode
		  notmuch-search-mode
		  ;; notmuch-message-mode
		  ))
    (add-to-list 'meow-mode-state-list `(,mode . motion)))


  (dolist (mode '(;; notmuch-show-mode
		  ;; notmuch-tree-mode
		  ;; notmuch-hello-mode
		  ;; notmuch-search-mode
		  ;; special-mode
		  eat-mode
		  vterm-mode
		  eww-mode
		  notmuch-message-mode))
    (add-to-list 'meow-mode-state-list `(,mode . insert)))

  ;; specific font so that line won't break
  (advice-add 'meow-cheatsheet :after (lambda ()
					(interactive)
					(setq buffer-face-mode-face '(:family "Menlo"))
					(buffer-face-mode +1)))
  (add-to-list 'meow-grab-fill-commands 'eval-expression)

  (setq meow-cursor-type-keypad 'box)
  (setq meow-cursor-type-insert '(bar . 2))

  (setq
   ;; meow-visit-sanitize-completion nil
   meow-keypad-leader-dispatch "C-c"
   meow-esc-delay 0.001
   meow-keypad-describe-delay 0.5
   meow-select-on-change t
   meow-cursor-type-normal 'box
   meow-cursor-type-insert '(bar . 4)
   meow-selection-command-fallback '((meow-replace . meow-page-up)
				     (meow-change . meow-change-char)
				     (meow-save . meow-save-empty)
				     (meow-kill . meow-C-k)
				     (meow-cancel . keyboard-quit)
				     (meow-pop . meow-pop-grab)
				     (meow-delete . meow-C-d)))

  (add-to-list 'meow-char-thing-table '(?\] . line))
  (add-to-list 'meow-char-thing-table '(?\[ . line))

  (dolist (hook '(git-commit-mode-hook
		  magit-log-edit-mode-hook))
    (add-hook hook (lambda()(meow--switch-state 'insert))))

  ;; disable <backspace> work as meow-keypad-undo
  ;; since some useful command may use <backspace> key
  ;; such as C-x BS
  (define-key meow-keypad-state-keymap (kbd "<backspace>")
	      'meow-keypad-self-insert)

  (define-key meow-keypad-state-keymap (kbd "DEL")
	      'meow-keypad-self-insert)

  (meow-leader-define-key
   ;; '( "e" . recentf-open)
   ;; '("e" . consult-recent-file)
   ;; '("r" . recentf-open)
   ;; '("." . find-file)
   ;; '("SPC" . execute-extended-command)
   '("." . poly/find-file)
   `("p" . ,project-prefix-map)
   '("b" . switch-to-buffer)
   ;; '("b" . poly/switch-to-buffer)
   '("s" . save-buffer)
   '("j" . sp-join-sexp)
   '("(" . sp-wrap-round)
   '("[" . sp-wrap-square)
   '("{" . sp-wrap-curly)
   '("o" . ace-window)
   '("a" . delete-other-windows)
   ;; '("-" . split-window-below)
   '("/" . swiper)
   ;; '("\\" . split-window-right)
   '("w" . ace-swap-window)
   '("k" . kill-buffer))

  ;; meow-setup is your custom function, see below
  (meow-setup)
  ;; If you want relative line number in NORMAL s tate(for display-line-numbers-mode)
  (meow-setup-line-number)
  ;; If you need setup indicator, see `meow-indicator' for customizing by hand.
  ;; (meow-setup-indicator)

  ;; custom indicator
  (when IS-GUI
    (setq meow-replace-state-name-list
	  '((normal . "[N]")
	    (motion . "[M]")
	    (keypad . "[K]")
	    (insert . "[I]")
	    (beacon . "[B]"))
	  ;; '((normal . "<N>")
	  ;;   (motion . "<M>")
	  ;;   (keypad . "<K>")
	  ;;   (insert . "<I>")
	  ;;   (beacon . "<B>"))
	  ;; '((normal . "🅽")
	  ;;   (beacon . "🅱")
	  ;;   (insert . "🅸")
	  ;;   (keypad . "🅺")
	  ;;   (motion . "🅼"))
	  ;; '((normal . "Ꮚ•ꈊ•Ꮚ")
	  ;;   (insert . "Ꮚ`ꈊ´Ꮚ")
	  ;;   (keypad . "Ꮚ'ꈊ'Ꮚ")
	  ;;   (motion . "Ꮚ-ꈊ-Ꮚ"))
	  ;; '((normal . "󰰓")
	  ;; (motion . "󰰐")
	  ;; (keypad . "󰰊")
	  ;; (insert . "󰰄")
	  ;; (beacon . "󰯯")
	  ;; (simple-motion . "󰰢"))
	  ;; '((normal . "🅝")
	  ;;   (beacon . "🅑")
	  ;;   (insert . "🅘")
	  ;;   (motion . "🅜")
	  ;;   (keypad . "🅚"))
	  ))

  ;; meow-thing-register THING INNER BOUNDS
  (meow-thing-register 'arrow '(pair ("<") (">")) '(pair ("<") (">")))
  (add-to-list 'meow-char-thing-table '(?a . arrow)))

(use-package meow-tree-sitter
  :vc (:url "https://github.com/skissue/meow-tree-sitter"
	    :rev :newest
	    :branch "main")
  :after meow
  :config
  (meow-tree-sitter-register-defaults))
#+end_src

* toggle map

#+begin_src emacs-lisp
(define-prefix-command 'toggle-map)
(global-set-key (kbd "\C-c t") 'toggle-map)
(global-set-key (kbd "\C-x p w") 'poly/kill-path)
(bind-key "t" #'my-toggle-transparency 'toggle-map)
(bind-key "i" #'imenu-list 'toggle-map)
(bind-key "m" #'smerge-mode 'toggle-map)
(bind-key "u" #'uniline-mode 'toggle-map)
#+end_src
