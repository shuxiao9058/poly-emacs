#+title: Programming

Configuration for programming and languages support.

#+begin_src emacs-lisp
  ;;; -*- lexical-binding: t -*-
#+end_src

* Format

#+begin_src emacs-lisp

(use-package format-all
  ;; :straight t
  :straight (:host github :repo "shuxiao9058/emacs-format-all-the-code")
  :ensure t
  :hook ((
	  fish-mode
	  sh-mode
	  ;; prog-mode
	  lua-mode
	  go-mode
	  python-mode
	  java-mode
	  cc-mode
	  c-mode
	  c++-mode
	  clang-mode
	  elisp-mode
	  emacs-lisp-mode
	  markdown-mode
	  yaml-mode
	  nix-mode
	  protobuf-mode
	  nginx-mode
	  cperl-mode
	  clojure-mode
	  ;;  objc-mode
	  ;;  swift-mode
	  ;;  typescript-mode
	  ;;  web-mode
	  ) . format-all-mode)
  :commands (format-all-mode
	     format-all-buffer)
  ;; :custom
  :init
  (defconst format-all--system-type
    (cl-case system-type
      (windows-nt 'windows)
      (cygwin     'windows)
      (darwin     'macos)
      (gnu/linux  'linux)
      (berkeley-unix
       (save-match-data
	 (let ((case-fold-search t))
	   (cond ((string-match "freebsd" system-configuration) 'freebsd)
		 ((string-match "openbsd" system-configuration) 'openbsd)
		 ((string-match "netbsd"  system-configuration) 'netbsd))))))
    "Current operating system according to the format-all package.")

  (defun format-all--resolve-system (choices)
    "Get first choice matching `format-all--system-type' from CHOICES."
    (cl-dolist (choice choices)
      (cond ((atom choice)
	     (cl-return choice))
	    ((eql format-all--system-type (car choice))
	     (cl-return (cadr choice))))))
  :config
  (define-format-all-formatter cpp-lua-format
    (:executable "lua-format")
    (:install (macos ""))
    (:languages "Lua")
    (:features)
    (:format (format-all--buffer-easy executable "-i" "-c" (expand-file-name "~/.config/lua-format/config.yaml") "--")))

  (define-format-all-formatter my-clang-format
    (:executable "clang-format")
    (:install
     (macos "brew install clang-format")
     (windows "scoop install llvm"))
    (:languages "C" "C++" "Java" "Objective-C" "Protocol Buffer")
    (:features)
    (:format
     (format-all--buffer-easy
      executable
      (concat "-assume-filename="
	      (or (buffer-file-name)
		  (cdr (assoc language
			      '(("C"               . ".c")
				("C++"             . ".cpp")
				("Java"            . ".java")
				("Objective-C"     . ".m")
				("Objective-C" . ".x")
				("Objective-C" . ".xm")
				("Objective-C" . ".m")
				("Objective-C" . ".mm")
				("Protocol Buffer" . ".proto")))))))))

  (define-format-all-formatter goimports-gofmt
    (:executable "/bin/sh")
    (:install
     (macos "brew install go")
     (windows "scoop install go")
     "go get golang.org/x/tools/cmd/goimports")
    (:languages "Go")
    (:features)
    (:format (format-all--buffer-easy executable "-c" "goimports | gofmt -s")))


  (define-format-all-formatter goimports
    (:executable "goimports")
    (:install (macos ""))
    (:languages "Go")
    (:features)
    (:format (format-all--buffer-easy executable)))

  (define-format-all-formatter gofumpt
    (:executable "gofumpt")
    ;; (:executable "/bin/sh")
    (:install (macos ""))
    (:languages "Go")
    (:features)
    (:format (format-all--buffer-easy executable)))

  (define-format-all-formatter my-shfmt
    (:executable "shfmt")
    (:install
     (macos "brew install shfmt")
     (windows "scoop install shfmt"))
    (:languages "Shell")
    (:features)
    (:format
     (format-all--buffer-easy executable "-i" "4" "-ci"
			      (if (buffer-file-name)
				  (list "-filename" (buffer-file-name))
				(list "-ln"
				      (cl-case (and (eql major-mode 'sh-mode)
						    (boundp 'sh-shell)
						    (symbol-value 'sh-shell))
					(bash "bash")
					(mksh "mksh")
					(t "posix")))))))


  ;; (define-format-all-formatter nginxfmt
  ;; 	(:executable "nginxfmt")
  ;;   (:install (macos "pip install nginxfmt"))
  ;;   ;; (:install
  ;;   ;;  (macos "brew install shfmt")
  ;;   ;;  (windows "scoop install shfmt"))
  ;;   (:languages "_Nginx")
  ;;   ;; (:modes nginx-mode)
  ;;   (:features)
  ;;   (:format
  ;;    (format-all--buffer-easy executable "-i" "4" "-")))

  ;; (define-format-all-formatter crossplane
  ;; 	(:executable "/usr/local/bin/nginx_format.sh")
  ;;   (:install (macos "pip install crossplane"))
  ;;   (:languages "Nginx")
  ;;   (:features)
  ;;   ;; (:modes nginx-mode)
  ;;   (:format (format-all--buffer-easy executable)))

  ;; lsp-format-buffer

  (eval-after-load 'format-all
    (dolist (hook '(lua-mode-hook
		    ;; go-mode-hook
		    python-mode-hook
		    java-mode-hook
		    markdown-mode-hook
		    ;; cc-mode-hook
		    ;; c-mode-hook
		    ;; c++-mode-hook
		    ;; clang-mode-hook
		    ;; objc-mode-hook
		    nginx-mode-hook
		    emacs-lisp-mode-hook
		    markdown-mode-hook
		    fish-mode-hook
		    protobuf-mode-hook))
      (add-hook hook 'format-all-ensure-formatter)))

  (setq-default format-all-formatters
		'(
		  ("Go" gofumpt)
		  ;; ("Go" goimports)
		  ("Lua" cpp-lua-format)
		  ("Java" my-clang-format)
		  ("Markdown" prettier)
		  ("C" my-clang-format)
		  ("C++" my-clang-format)
		  ;; ("Objective-C" my-clang-format)
		  ("Protocol Buffer" my-clang-format)
		  ("SQL" pgformatter)
		  ;; ("CSS" prettier)
		  ;; ("HTML" prettier)
		  ;; ("Dockerfile" dockfmt)
		  ("Shell" my-shfmt)
		  ;; ("Markdown" prettier)
		  ("Nix" nixpkgs-fmt)
		  ;; ("Emacs Lisp" emacs-lisp)
		  ;; ("YAML" prettier)
		  ;; ("Nginx" nginx-fmt)
		  )))
#+end_src

* Flycheck

#+begin_src emacs-lisp
  (straight-use-package 'flycheck)
  (straight-use-package 'flycheck-pos-tip)

  (with-eval-after-load 'flycheck
    (flycheck-pos-tip-mode))
#+end_src

* LSP

** lsp-mode

Use lsp-mode as LSP client.

#+begin_src emacs-lisp
  (straight-use-package 'lsp-mode)

  (setq lsp-keymap-prefix "C-c l"
        lsp-enable-symbol-highlighting nil
        lsp-enable-dap-auto-configure nil
        lsp-lens-enable nil
        lsp-headerline-breadcrumb-enable nil)

  (autoload 'lsp "lsp-mode" nil t)
#+end_src

*** Key binding

#+begin_src emacs-lisp
  (define-key toggle-map "L" 'lsp)
#+end_src

** COMMENT eglot

Use eglot as LSP client.

#+begin_src emacs-lisp
  (straight-use-package 'eglot)

  (autoload 'eglot "eglot" nil t)
#+end_src

*** Key Binding

#+begin_src emacs-lisp
  (define-key toggle-map "L" 'eglot)
#+end_src

* Clojure

** clojure-mode

Use clojure-mode for basic syntax support.

#+begin_src emacs-lisp
  (straight-use-package 'clojure-mode)

  (setq clojure-toplevel-inside-comment-form t)

  (with-eval-after-load "clojure-mode"
    (define-clojure-indent
      (re-frame/reg-event-fx :defn)
      (re-frame/reg-event-db :defn)
      (re-frame/reg-sub :defn)
      (re-frame/reg-fx :defn)
      (t/async :defn)
      (defclass '(1 :defn))))
#+end_src

** Fix clojure syntax highlighting

#+begin_src emacs-lisp
  (with-eval-after-load "clojure-mode"
    (setq clojure-font-lock-keywords
          (eval-when-compile
            `(;; Function definition (anything that starts with def and is not
              ;; listed above)
              (,(concat "(\\(?:" clojure--sym-regexp "/\\)?"
                        "\\(def[^ \r\n\t]*\\)"
                        ;; Function declarations
                        "\\>"
                        ;; Any whitespace
                        "[ \r\n\t]*"
                        ;; Possibly type or metadata
                        "\\(?:#?^\\(?:{[^}]*}\\|\\sw+\\)[ \r\n\t]*\\)*"
                        (concat "\\(" clojure--sym-regexp "\\)?"))
               (1 font-lock-keyword-face)
               (2 font-lock-function-name-face nil t))
              ;; (fn name? args ...)
              (,(concat "(\\(?:clojure.core/\\)?\\(fn\\)[ \t]+"
                        ;; Possibly type
                        "\\(?:#?^\\sw+[ \t]*\\)?"
                        ;; Possibly name
                        "\\(\\sw+\\)?" )
               (1 font-lock-keyword-face)
               (2 font-lock-function-name-face nil t))
              ;; Global constants - nil, true, false
              (,(concat
                 "\\<"
                 (regexp-opt
                  '("true" "false" "nil") t)
                 "\\>")
               0 font-lock-constant-face)
              ;; Special forms
              (,(concat
                 "("
                 (regexp-opt
                  '("def" "do" "if" "let" "let*" "var" "fn" "fn*" "loop" "loop*"
                    "recur" "throw" "try" "catch" "finally"
                    "set!" "new" "."
                    "monitor-enter" "monitor-exit" "quote") t)
                 "\\>")
               1 font-lock-keyword-face)
              ;; Built-in binding and flow of control forms
              (,(concat
                 "(\\(?:clojure.core/\\)?"
                 (regexp-opt
                  '("letfn" "case" "cond" "cond->" "cond->>" "condp"
                    "for" "when" "when-not" "when-let" "when-first" "when-some"
                    "if-let" "if-not" "if-some"
                    ".." "->" "->>" "as->" "doto" "and" "or"
                    "dosync" "doseq" "dotimes" "dorun" "doall"
                    "ns" "in-ns"
                    "with-open" "with-local-vars" "binding"
                    "with-redefs" "with-redefs-fn"
                    "declare") t)
                 "\\>")
               1 font-lock-keyword-face)
              ;; Character literals - \1, \a, \newline, \u0000
              ("\\\\\\([[:punct:]]\\|[a-z0-9]+\\>\\)" 0 'clojure-character-face)

              (,(format "\\(:\\{1,2\\}\\)\\([^%s]+\\)" clojure--sym-forbidden-rest-chars)
               (1 'clojure-keyword-face)
               (2 'clojure-keyword-face))

              ;; #_ and (comment ...) macros.
              (clojure--search-comment-macro 1 font-lock-comment-face t)
              ;; Highlight `code` marks, just like `elisp'.
              (,(rx "`" (group-n 1 (optional "#'")
                                 (+ (or (syntax symbol) (syntax word)))) "`")
               (1 'font-lock-constant-face prepend))
              ;; Highlight [[var]] comments
              (,(rx "[[" (group-n 1 (optional "#'")
                                  (+ (or (syntax symbol) (syntax word)))) "]]")
               (1 'font-lock-constant-face prepend))
              ;; Highlight escaped characters in strings.
              (clojure-font-lock-escaped-chars 0 'bold prepend)
              ;; Highlight grouping constructs in regular expressions
              (clojure-font-lock-regexp-groups
               (1 'font-lock-regexp-grouping-construct prepend))))))
#+end_src

** Cider for REPL connection

#+begin_src emacs-lisp
  (straight-use-package 'cider)

  (autoload 'cider-jack-in "cider" nil t)

  (setq cider-offer-to-open-cljs-app-in-browser nil)

  (with-eval-after-load "cider"
    (define-key cider-mode-map (kbd "C-c C-f") nil))
#+end_src

** Linting with flycheck-clj-kondo

#+begin_src emacs-lisp
  (straight-use-package 'flycheck-clj-kondo)

  (add-hook 'clojure-mode-hook 'flycheck-mode)
#+end_src

** Format code with zprint

#+begin_src emacs-lisp
  (straight-use-package '(zprint :type git
                                 :host github
                                 :repo "DogLooksGood/zprint.el"))

  (autoload 'zprint "zprint" nil t)

  (with-eval-after-load "clojure-mode"
    (define-key clojure-mode-map (kbd "C-c C-f") 'zprint))
#+end_src

* Rust
** rust-mode
#+begin_src emacs-lisp
  (straight-use-package 'rust-mode)
#+end_src

** Use LSP

#+begin_src emacs-lisp
  (with-eval-after-load "lsp-mode"
    (add-hook 'rust-mode-hook 'lsp))
#+end_src

* HTML
#+begin_src emacs-lisp
  (setq-default css-indent-offset 2
                js-indent-level 2)
#+end_src

** Emmet
#+begin_src emacs-lisp
  (straight-use-package 'emmet-mode)

  (autoload 'emmet-expand-line "emmet-mode" nil t)

  (with-eval-after-load "mhtml-mode"
    (define-key mhtml-mode-map (kbd "M-RET") 'emmet-expand-line))

#+end_src
