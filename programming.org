#+title: Programming

Configuration for programming and languages support.

#+begin_src emacs-lisp
  ;;; -*- lexical-binding: t -*-
#+end_src

* Format

#+begin_src emacs-lisp
(use-package format-all
  :straight t
  ;; :straight (:host github :repo "lassik/emacs-format-all-the-code")
  :ensure t
  :hook ((
	  fish-mode
	  sh-mode
	  ;; prog-mode
	  lua-mode
	  lua-ts-mode
	  ;; go-mode
	  python-mode
	  python-ts-mode
	  java-mode
	  cc-mode
	  c-mode
	  c++-mode
	  clang-mode
	  elisp-mode
	  emacs-lisp-mode
	  ;; markdown-mode
	  yaml-mode
	  nix-mode
	  protobuf-mode
	  nginx-mode
	  cperl-mode
	  clojure-mode
	  ;;  objc-mode
	  ;;  swift-mode
	  ;;  typescript-mode
	  ;;  web-mode
	  ) . format-all-mode)
  :commands (format-all-mode
	     format-all-buffer)
  :init
  (defconst format-all--system-type
    (cl-case system-type
      (windows-nt 'windows)
      (cygwin     'windows)
      (darwin     'macos)
      (gnu/linux  'linux)
      (berkeley-unix
       (save-match-data
	 (let ((case-fold-search t))
	   (cond ((string-match "freebsd" system-configuration) 'freebsd)
		 ((string-match "openbsd" system-configuration) 'openbsd)
		 ((string-match "netbsd"  system-configuration) 'netbsd))))))
    "Current operating system according to the format-all package.")

  (defun format-all--resolve-system (choices)
    "Get first choice matching `format-all--system-type' from CHOICES."
    (cl-dolist (choice choices)
      (cond ((atom choice)
	     (cl-return choice))
	    ((eql format-all--system-type (car choice))
	     (cl-return (cadr choice))))))
  :config
  (define-format-all-formatter cpp-lua-format
			       (:executable "lua-format")
			       (:install (macos ""))
			       (:languages "Lua")
			       (:features)
			       (:format (format-all--buffer-easy executable "-i" "-c" (expand-file-name "~/.config/lua-format/config.yaml") "--")))

  (define-format-all-formatter my-clang-format
			       (:executable "clang-format")
			       (:install
				(macos "brew install clang-format")
				(windows "scoop install llvm"))
			       (:languages "C" "C++" "Java" "Objective-C" "Protocol Buffer")
			       (:features)
			       (:format
				(format-all--buffer-easy
				 executable
				 (concat "-assume-filename="
					 (or (buffer-file-name)
					     (cdr (assoc language
							 '(("C"               . ".c")
							   ("C++"             . ".cpp")
							   ("Java"            . ".java")
							   ("Objective-C"     . ".m")
							   ("Objective-C" . ".x")
							   ("Objective-C" . ".xm")
							   ("Objective-C" . ".m")
							   ("Objective-C" . ".mm")
							   ("Protocol Buffer" . ".proto")))))))))

  (define-format-all-formatter goimports-gofmt
			       (:executable "/bin/sh")
			       (:install
				(macos "brew install go")
				(windows "scoop install go")
				"go get golang.org/x/tools/cmd/goimports")
			       (:languages "Go")
			       (:features)
			       (:format (format-all--buffer-easy executable "-c" "goimports | gofmt -s")))


  (define-format-all-formatter goimports
			       (:executable "goimports")
			       (:install (macos ""))
			       (:languages "Go")
			       (:features)
			       (:format (format-all--buffer-easy executable)))

  (define-format-all-formatter gofumpt
			       (:executable "gofumpt")
			       ;; (:executable "/bin/sh")
			       (:install (macos ""))
			       (:languages "Go")
			       (:features)
			       (:format (format-all--buffer-easy executable)))

  (define-format-all-formatter py-autopep8
			       (:executable "autopep8")
			       (:install (macos ""))
			       (:languages "Python")
			       (:features)
			       (:format (format-all--buffer-easy executable "-")))

  (define-format-all-formatter py-black
			       (:executable "black")
			       (:install (macos ""))
			       (:languages "Python")
			       (:features)
			       (:format (format-all--buffer-easy executable "-")))

  (define-format-all-formatter my-shfmt
			       (:executable "shfmt")
			       (:install
				(macos "brew install shfmt")
				(windows "scoop install shfmt"))
			       (:languages "Shell")
			       (:features)
			       (:format
				(format-all--buffer-easy executable "-i" "4" "-ci"
							 (if (buffer-file-name)
							     (list "-filename" (buffer-file-name))
							   (list "-ln"
								 (cl-case (and (eql major-mode 'sh-mode)
									       (boundp 'sh-shell)
									       (symbol-value 'sh-shell))
								   (bash "bash")
								   (mksh "mksh")
								   (t "posix")))))))

  (define-format-all-formatter my-beautysh
			       (:executable "beautysh")
			       (:install
				(macos "pip install beautysh"))
			       (:languages "Shell")
			       (:features)
			       (:format (format-all--buffer-easy executable "-")))


  (define-format-all-formatter nginxfmt
			       (:executable "nginxfmt")
			       (:install (macos "pip install nginxfmt"))
			       ;; (:install
			       ;;  (macos "brew install shfmt")
			       ;;  (windows "scoop install shfmt"))
			       (:languages "_Nginx")
			       ;; (:modes nginx-mode)
			       (:features)
			       (:format
				(format-all--buffer-easy executable "-i" "4" "-")))

  (define-format-all-formatter crossplane
			       (:executable "/usr/local/bin/nginx_format.sh")
			       (:install (macos "pip install crossplane"))
			       (:languages "Nginx")
			       (:features)
			       ;; (:modes nginx-mode)
			       (:format (format-all--buffer-easy executable)))

  ;; lsp-format-buffer
  (eval-after-load 'format-all
    (dolist (hook '(lua-mode-hook
		    ;; go-mode-hook
		    python-mode-hook
		    python-ts-mode-hook
		    java-mode-hook
		    markdown-mode-hook
		    ;; cc-mode-hook
		    ;; c-mode-hook
		    ;; c++-mode-hook
		    ;; clang-mode-hook
		    ;; objc-mode-hook
		    nginx-mode-hook
		    emacs-lisp-mode-hook
		    markdown-mode-hook
		    fish-mode-hook
		    protobuf-mode-hook))
      (add-hook hook 'format-all-ensure-formatter)))

  (setq-default format-all-formatters
		'(
		  ("Go" gofumpt)
		  ;; ("Go" goimports)
		  ("Lua" cpp-lua-format)
		  ("Java" my-clang-format)
		  ("Markdown" prettier)
		  ("C" my-clang-format)
		  ("C++" my-clang-format)
		  ;; ("Objective-C" my-clang-format)
		  ("Protocol Buffer" my-clang-format)
		  ("SQL" pgformatter)
		  ;; ("CSS" prettier)
		  ;; ("HTML" prettier)
		  ;; ("Dockerfile" dockfmt)
		  ;; ("Shell" my-shfmt)
		  ;; ("Python" py-autopep8)
		  ("Python" py-black)
		  ("Shell" my-beautysh)
		  ;; ("Markdown" prettier)
		  ;; ("Nix" nixpkgs-fmt)
		  ;; ("Emacs Lisp" emacs-lisp)
		  ;; ("YAML" prettier)
		  ("Nginx" nginx-fmt)
		  )))
#+end_src

* Flycheck

#+begin_src emacs-lisp
(use-package flycheck
  :straight t
  :ensure t
  :init (global-flycheck-mode)
  :custom
  (flycheck-check-syntax-automatically
   '(save idle-change mode-enabled))
  (flycheck-checker-error-threshold nil))

(use-package flycheck-color-mode-line
  :straight t
  :hook (flycheck-mode-hook . flycheck-color-mode-line-mode))

;; https://github.com/hlissner/doom-emacs/issues/2194
;; underline cant be a different color than the foreground on terminal
;; set foreground color to red on terminals to compensate
;; This doesnt take into account emacs running with frames both in the
;; terminal and GUI but im not worried about that situation.
;; https://stackoverflow.com/a/5801740
;; TODO: fix multi line errors not showing anything in terminal
;; this was changed as a result of https://github.com/flycheck/flycheck/issues/1730
(add-hook 'flycheck-mode-hook
          (defun fix-flycheck-error-face ()
            (unless window-system
              (set-face-attribute 'flycheck-error nil :foreground "red")
              (set-face-attribute 'flycheck-warning nil :foreground "yellow")
              (set-face-attribute 'flycheck-info nil :foreground "yellow"))))

(setq tooltip-frame-parameters
        '((name . "tooltip")
          (internal-border-width . 6)
          (border-width . 0)
          (no-special-glyphs . t)))

(setq tooltip-delay 0.5)
(setq tooltip-short-delay 0.5)
#+end_src

* flymake

#+begin_src emacs-lisp
(use-package flymake
  :straight (:type built-in))
#+end_src

* LSP

** eglot

Use eglot as LSP client.

#+begin_src emacs-lisp
(defun project-name (project)
  "A human-readable name for the project.
	Nominally unique, but not enforced."
  (file-name-nondirectory (directory-file-name (project-root project))))


;; https://github.com/DEbling/dotfiles/blob/9dc0e347267dd68111baf8e7ab7d33c2e39ed404/.emacs.d/elisp/lang-java.el
;; (defconst jdt-jar-path "~/.emacs.d/.local/jar/org.eclipse.equinox.launcher.jar")
;; (defconst jdt-jar-path "/opt/jdt-language-server/plugins/org.eclipse.equinox.launcher_1.6.0.v20200915-1508.jar")
(defconst jdt-jar-path (expand-file-name "jdt-language-server/plugins/org.eclipse.equinox.launcher_1.6.400.v20210924-0641.jar" "~/workspace"))
(defconst jdt-extra-jvm-args '("-noverify"
			       "-javaagent:/Users/jiya/workspace/dotemacs.d/.local/jar/lombok.jar"
			       ;; "-javaagent:[~/.emacs.d/.local/jar/lombok.jar][classes=META-INF/]"
			       "-Xbootclasspath/a:~/.config/emacs/.local/jar/lombok.jar"
			       "--add-modules=ALL-SYSTEM"
			       "--add-opens"
			       "java.base/java.util=ALL-UNNAMED"
			       "--add-opens"
			       "java.base/java.lang=ALL-UNNAMED"
			       ;; "-configuration"
			       ;; "/opt/jdt-language-server/config_mac"
			       ))

(defun my-eclipse-jdt-contact (interactive)
  "Contact with the jdt server.
If INTERACTIVE, prompt user for details."
  (let* ((cp (getenv "CLASSPATH"))
	 (contact (unwind-protect (progn
				    (setenv "CLASSPATH" jdt-jar-path)
				    (eglot--eclipse-jdt-contact interactive))
		    (setenv "CLASSPATH" cp)))
	 (jdt-class (car contact))
	 (args (cddr contact)))
    (append (list jdt-class "/usr/bin/java")
	    jdt-extra-jvm-args args)))

(defun dart-lsp-contact (interactive)
  (list (executable-find "dart")
	(concat (file-name-directory (nix-executable-find nil "dart"))
		"snapshots/analysis_server.dart.snapshot")
	"--lsp"
	"--client-id=emacs.eglot"))

(use-package eglot
  :straight (:type built-in)
  :hook ((go-mode
	  go-ts-mode
	  protobuf-ts-mode
	  lua-mode
	  lua-ts-mode
	  beancount-mode
	  python-mode
	  python-ts-mode
	  clojure-mode
	  clojurescript-mode
	  js-mode typescript-mode
	  c-mode c++-mode objc-mode swift-mode
	  java-mode ) . eglot-ensure)
  :custom
  (eglot-autoshutdown t)
  (eglot-sync-connect 1)
  (eglot-connect-timeout 40)
  (eglot-send-changes-idle-time 0.5)
  (eglot-confirm-server-initiated-edits nil)
  ;; (eglot-events-buffer-size 500000)
  (eglot-events-buffer-size 0)
  ;; disable symbol highlighting and documentation on hover
  (eglot-ignored-server-capabilites
   '(:documentHighlightProvider
     :signatureHelpProvider
     :hoverProvider))
  ;; NOTE We disable eglot-auto-display-help-buffer because :select t in
  ;; its popup rule causes eglot to steal focus too often.
  (eglot-auto-display-help-buffer nil)
  :functions eglot--eclipse-jdt-contact
  :config
  (setq eglot-stay-out-of '(imenu eldoc))  ;; eglot reinits backends
  (setq eldoc-echo-area-use-multiline-p nil)
  ;; emmylua
  (let ((emmylua-jar-path (expand-file-name "bin/EmmyLua-LS-all.jar" poly-local-dir)))
    (add-to-list 'eglot-server-programs
		 `((lua-mode lua-ts-mode)  . ("/Library/Java/JavaVirtualMachines/openjdk8-zulu/Contents/Home/bin/java" "-cp" ,emmylua-jar-path
					      "com.tang.vscode.MainKt" "-XX:+UseG1GC" "-XX:+UseStringDeduplication"))))

  ;; (let* ((lua-language-server-dir "/opt/local/lib/lua-language-server")
  ;; 	 (lua-language-server-main (expand-file-name "bin/main.lua" lua-language-server-dir))
  ;; 	 (lua-language-server-exec (expand-file-name "bin/lua-language-server" lua-language-server-dir)))
  ;;   (add-to-list 'eglot-server-programs
  ;; 		 `(lua-mode  . (,lua-language-server-exec "-E" "-e" "LANG=en" ,lua-language-server-main))))

  (add-to-list 'eglot-server-programs
	       '(java-mode .  my-eclipse-jdt-contact))

  (add-to-list 'eglot-server-programs
	       `(beancount-mode .  ("beancount-language-server")))

  (add-to-list 'eglot-server-programs
	       '(dart-mode . dart-lsp-contact))

  (when (executable-find "ccls")
    (add-to-list 'eglot-server-programs '((c-mode c++-mode objc-mode) "ccls"
					  "-init={\"compilationDatabaseDirectory\":\"build\"}")))

  (when (executable-find "pyright-langserver")
    (add-to-list 'eglot-server-programs '((python-ts-mode) "pyright-langserver"
					  "--stdio" "--watch")))

  (when (executable-find "protobuf-language-server")
    (add-to-list 'eglot-server-programs '((protobuf-mode protobuf-ts-mode) "protobuf-language-server"
					   )))

  (add-to-list 'eglot-server-programs
	       `((swift-mode) ,(string-trim (shell-command-to-string "xcrun --find sourcekit-lsp"))))

  (when (executable-find "gopls")
    (add-to-list 'eglot-server-programs '((go-mode go-ts-mode) . ("gopls" ;; "-debug" "127.0.0.1:3000" "-logfile=/tmp/gopls-emacs.log"
								  ))))

  (add-hook 'eglot-managed-mode-hook
	    (lambda()
	      (progn
		(flymake-mode -1)
		;; (lsp/non-greedy-eglot)
		;; (lsp/extra-capf)
		(poly/set-lsp-capf)
		)
	      ;; (make-local-variable 'completion-at-point-functions)
	      ;; (setq-local completion-at-point-functions
	      ;;		  '(cape-line cape-symbol cape-ispell cape-dabbrev cape-tex cape-file tags-completion-at-point-function))
	      ))

  (setq eglot-workspace-configuration
	`((:gopls . ((staticcheck . nil)
		     (matcher . "CaseSensitive")
		     (gofumpt . t)
		     (usePlaceholders . t)
		     (completeUnimported . t)
		     ;; (experimentalWorkspaceModule . t)
		     (completionBudget . "150ms")
		     (diagnosticsDelay  .  "800ms")
		     ;; (directoryFilters . ["-vendor"])
		     (annotations . ((bounds . t) (escape . t) (inline . t) (nil . t)))
		     (codelenses . ((vendor . t)))
		     ;; (buildFlags . ["-mod=vendor"])
		     (allowImplicitNetworkAccess . t)
		     (allowModfileModifications . t)
		     (analyses . ,(mapcar (lambda (a) (cons a :json-false))
					  '(unusedparams unusedwrite composites ST1003  ST1021 ST1016 SA5011 ST1020 ST1005 SA9003 SA4006 ST1022 S1023 SA4011 SA4010 ST1018)))))))
  :bind (:map eglot-mode-map
	      ("C-c C-r" . poly/eglot-rename)
	      ("C-c o" . eglot-code-action-organize-imports)
	      ("C-c h" . eldoc)
	      ("<f6>" . xref-find-definitions)
	      ("C-c C-a" . eglot-code-actions)
	      ("C-c C-f" . eglot-format-buffer)))

(defun poly/go-workspace-organize-imports()
  "Run organize-imports action in workspace with changed go files."
  (interactive)
  (save-excursion
    (when-let ((filename (buffer-file-name))
	       (directory-name (file-name-directory filename))
	       (files (magit-changed-files "HEAD")))
      (dolist (go-file files)
	(when (s-suffix? ".go" go-file)
	  (let* ((full-filename (expand-file-name go-file directory-name))
		 (buffer (find-file-noselect full-filename))
		 (results))
	    (when buffer
	      (with-current-buffer buffer
		(when (fboundp 'eglot-code-action-organize-imports)
		  (setq results (call-interactively 'eglot-code-action-organize-imports (point-min)))
		  (when results
		    (let ((el (seq-elt results 0))
			  (edit)
			  (idx 0))
		      (when (< idx (length results))
			(setq edit (plist-get el :edit))
			(if edit
			    (eglot--apply-workspace-edit edit)
			  (message (format "nothing need to import: %s" go-file)))
			(setq el (seq-elt results idx))
			(setq idx (1+ idx))))))
		(message (format "organize imports & save buffer: %s" go-file))
		(save-buffer))
	      )))))))


(defun lsp/non-greedy-eglot ()
  "Making Eglot capf non-greedy."
  (progn
    (fset 'non-greedy-eglot
	  (cape-capf-buster
	   (cape-capf-properties #'eglot-completion-at-point :exclusive 'no)))
    (setq completion-at-point-functions
	  (list #'non-greedy-eglot))))

(defun lsp/extra-capf ()
  "Adding extra capf during LSP startup."
  (let ((tmp-symbol (intern (concat "capf/" (symbol-name major-mode)))))
    (unless (null (symbol-function tmp-symbol))
      (funcall (symbol-function tmp-symbol)))))
#+end_src

*** eglot-rename with symbol in place

#+begin_src emacs-lisp
(defun poly/eglot-rename (newname)
  "Rename the current symbol to NEWNAME."
  (interactive
   (list (read-from-minibuffer
          (format "Rename `%s' to: " (or (thing-at-point 'symbol t)
                                         "unknown symbol"))
          (or (thing-at-point 'symbol t) "") nil nil nil
          (symbol-name (symbol-at-point)))))
  (unless (eglot--server-capable :renameProvider)
    (eglot--error "Server can't rename!"))
  (eglot--apply-workspace-edit
   (jsonrpc-request (eglot--current-server-or-lose)
                    :textDocument/rename `(,@(eglot--TextDocumentPositionParams)
                                           :newName ,newname))
   current-prefix-arg))
#+end_src

*** patch xref

fix xref issue =(wrong-type-argument listp 0)=

#+begin_src emacs-lisp
(with-eval-after-load 'xref
  ;; try fix Debugger entered--Lisp error: (wrong-type-argument listp 0)
  (defun xref--push-backward (m)
    "Push marker M onto the backward history stack."
    (when (numberp (car xref--history)) ;; wrong marker, the car of xref-history is a number
      ;; reset xref--history to (cons nil nil)
      (setq xref--history (cons nil nil)))
    (unless (equal m (caar xref--history))
      (push m (car xref--history)))))
#+end_src

** yas parameter complete in place required

#+begin_src emacs-lisp
(use-package yasnippet-snippets
  :straight t
  :ensure t
  :config
  (add-to-list 'yas-snippet-dirs
	       (expand-file-name "snippets" poly-cache-dir) t))

(use-package yasnippet
  :straight t
  :ensure t
  :diminish yas-global-mode
  :commands yas-global-mode
  :hook (after-init . yas-global-mode)
  ;; :hook ((typescript-mode . yas-minor-mode)
  ;;        (sh-mode . yas-minor-mode)
  ;;        (c-mode . yas-minor-mode)
  ;;        (c++-mode . yas-minor-mode)
  ;;        (go-mode . yas-minor-mode)
  ;;        (json-mode . yas-minor-mode)
  ;;        (yaml-mode . yas-minor-mode)
  ;;        (web-mode . yas-minor-mode)
  ;;        (js2-mode . yas-minor-mode)
  ;; 	 (lua-mode . yas-minor-mode))
  :after (yasnippet-snippets)
  :config
  ;; (message "config yasnippet")
  (yas-reload-all))

(use-package java-snippets
  :straight t
  :defer t
  :after yasnippet)

(use-package javadoc-lookup
  :straight t)
#+end_src

* treesitter

#+begin_src emacs-lisp
(when (and (fboundp 'treesit-available-p) (treesit-available-p))
  (require 'treesit))

(use-package treesit
  :straight (:type built-in)
  :commands treesit-font-lock-rules treesit-font-lock-recompute-features
  :init
  (setq treesit-language-source-alist
        '((bash . ("https://github.com/tree-sitter/tree-sitter-bash"))
          (c . ("https://github.com/tree-sitter/tree-sitter-c"))
          (cmake . ("https://github.com/uyha/tree-sitter-cmake"))
          (cpp . ("https://github.com/tree-sitter/tree-sitter-cpp"))
          (css . ("https://github.com/tree-sitter/tree-sitter-css"))
          (c-sharp . ("https://github.com/tree-sitter/tree-sitter-c-sharp"))
          (go . ("https://github.com/tree-sitter/tree-sitter-go"))
          (html . ("https://github.com/tree-sitter/tree-sitter-html"))
          (java . ("https://github.com/tree-sitter/tree-sitter-java"))
          (javascript . ("https://github.com/tree-sitter/tree-sitter-javascript"))
          (json . ("https://github.com/tree-sitter/tree-sitter-json"))
          (lua . ("https://github.com/Azganoth/tree-sitter-lua"))
          (make . ("https://github.com/alemuller/tree-sitter-make"))
          (ocaml . ("https://github.com/tree-sitter/tree-sitter-ocaml" nil "ocaml/src"))
          (python . ("https://github.com/tree-sitter/tree-sitter-python"))
          (php . ("https://github.com/tree-sitter/tree-sitter-php"))
          (typescript . ("https://github.com/tree-sitter/tree-sitter-typescript" nil "typescript/src"))
          (ruby . ("https://github.com/tree-sitter/tree-sitter-ruby"))
          (rust . ("https://github.com/tree-sitter/tree-sitter-rust"))
          (sql . ("https://github.com/m-novikov/tree-sitter-sql"))
          (toml . ("https://github.com/tree-sitter/tree-sitter-toml"))
          (yaml . ("https://github.com/ikatyang/tree-sitter-yaml"))
	  (protobuf . ("https://github.com/mitchellh/tree-sitter-proto"))
          (zig . ("https://github.com/GrayJack/tree-sitter-zig"))))
  (setq major-mode-remap-alist
	'((c-mode . c-ts-mode)
	  (c++-mode . c++-ts-mode)
	  (c-or-c++-mode . c-or-c++-ts-mode)
	  (python-mode . python-ts-mode)
	  (csharp-mode . csharp-ts-mode)
	  (cmake-mode . cmake-ts-mode)
	  (dockerfile-mode . dockerfile-ts-mode)
	  (go-mode . go-ts-mode)
	  ;; (lua-mode . lua-ts-mode)
	  (json-mode . json-ts-mode)
	  (java-mode . java-ts-mode)
	  (rust-mode . rust-ts-mode)
	  (ruby-mode . ruby-ts-mode)
	  (typescript-mode . typescript-ts-mode)
	  (conf-toml-mode . toml-ts-mode)
	  (yaml-mode . yaml-ts-mode)
	  ;; (protobuf-mode . protobuf-ts-mode)
	  ))
  :config
  (add-to-list 'treesit-extra-load-path (expand-file-name "tree-sitter" user-emacs-directory))
  (defun poly/treesit-install-all-languages ()
    "Install all languages specified in `treesit-language-source-alist'."
    (interactive)
    (let ((languages (mapcar 'car treesit-language-source-alist)))
      (dolist (lang languages)
        (treesit-install-language-grammar lang)
        (message "`%s' parser was installed." lang)
        (sit-for 0.75))))
  (advice-add
   'treesit--install-language-grammar-1
   :around
   (lambda (old-function out-dir &rest arguments)
     (apply old-function (car treesit-extra-load-path) arguments)))
  :hook
  (c-ts-mode .
	     (lambda()
	       (setq-local treesit-font-lock-level 4)
	       (setq-local
		treesit-font-lock-settings
		(append
		 treesit-font-lock-settings
		 (treesit-font-lock-rules
		  :language 'c
		  :feature 'func
		  '((call_expression
		     function:
		     (identifier) @font-lock-property-face
		     arguments: (_))))))))
  (java-ts-mode .
		(lambda()
		  (setq-local
		   treesit-font-lock-settings
		   (append
		    treesit-font-lock-settings
		    (treesit-font-lock-rules
		     :language 'java
		     :feature 'expression
		     :override t
		     '((method_invocation
			name: (identifier) @font-lock-property-face)))))))
  (go-ts-mode
   .
   (lambda()
     (setq-local treesit-font-lock-level 4)
     (treesit-font-lock-recompute-features '(property bracket delimiter operator variable function attribute import import func))))
  (python-ts-mode
   .
   (lambda()
     (setq-local treesit-font-lock-level 4)
     (treesit-font-lock-recompute-features '(property bracket delimiter operator variable function attribute import))))
  ;; :custom
  ;; (treesit--font-lock-verbose t)
  )


(add-hook 'prog-mode-hook #'general-ts-mode-setup)
(add-hook 'c-ts-mode-hook #'c-ts-setup)
(add-hook 'css-ts-mode-hook 'ts-css-setup)

(defun eglot-format-buffer-on-save ()
  (add-hook 'before-save-hook #'eglot-format-buffer -10 t))
(add-hook 'go-ts-mode-hook #'eglot-format-buffer-on-save)

(defun general-ts-mode-setup ()
  (treesit-font-lock-recompute-features
   nil
   '(property bracket delimiter operator variable function)))

(defun c-ts-setup ()
  (setq-local electric-quote-comment nil)
  (setq-local electric-quote-string nil)
  (indent-tabs-mode)
  (bug-reference-prog-mode)
  (setq-local fill-paragraph-function #'ts-c-fill-paragraph)
  (treesit-font-lock-recompute-features '(emacs-devel)))

(defun ts-c-fill-paragraph (&optional arg)
  (interactive)
  (let ((node (treesit-node-at (point))))
    (when (equal (treesit-node-type node) "comment")
      (fill-region
       (treesit-node-start node) (treesit-node-end node)))
    t))

(defun ts-css-setup ()
  (treesit-font-lock-recompute-features nil '(variable function)))
#+end_src

* Languages
** cc-mode
#+begin_src emacs-lisp
(use-package cc-mode
  :straight t
  :ensure t
  :mode (
	 ("\\.c\\'" . c-mode)
         ("\\.h\\'" . c-mode)
	 ("\\.cxx\\'" . c++-mode)
         ("\\.cpp\\'" . c++-mode)
         ("\\.hpp\\'" . c++-mode)
	 ("\\.x\\'" . objc-mode)
	 ("\\.xm\\'" . objc-mode)
	 ("\\.m\\'" . objc-mode)
	 ("\\.mm\\'" . objc-mode)

	 ;; ("\\.c" . c-mode)
         ;; ("\\.h" . c-mode)
         ;; ("\\.cpp" . c++-mode)
         ;; ("\\.hpp" . c++-mode)
	 ;; ("\\.h\\(h\\|xx\\|pp\\)\\'" . c++-mode)
         ;; ("\\.tpp\\'" . c++-mode)
	 )
  :custom
  (c-offsets-alist '((inline-open           . 0)
                     (brace-list-open       . 0)
                     (inextern-lang         . 0)
                     (statement-case-open   . 4)
                     (access-label          . -)
                     (case-label            . 0)
                     (member-init-intro     . +)
                     (topmost-intro         . 0)
                     (inlambda              . 0) ;; better indentation for lambda
                     (innamespace           . 0) ;; no indentation after namespace
                     (arglist-cont-nonempty . +)))
  ;; :config
  ;; (with-eval-after-load 'lsp-mode
  ;;   (setq lsp-clients-clangd-args
  ;;         '("-j=2"
  ;;           "--background-index"
  ;;           "--clang-tidy"
  ;;           "--completion-style=bundled"
  ;;           "--pch-storage=memory"
  ;;           "--suggest-missing-includes")))
  )

(use-package modern-cpp-font-lock
  :straight t
  :ensure t
  :hook (c++-mode . modern-c++-font-lock-mode))


(use-package cmake-mode
  :straight t
  :ensure t
  ;; :defines (company-backends)
  :mode (("CMakeLists\\.txt\\'" . cmake-mode)
         ("\\.cmake\\'" . cmake-mode))
  ;; :config
  ;; (with-eval-after-load 'company-mode
  ;;   (add-to-list 'company-backends 'company-cmake))
  )

;; (use-package clang-format
;;   :straight t
;;   :defer t
;;   ;; :load-path "site-lisp"
;;   :commands (clang-format-buffer)
;;   ;; :config
;;   ;; (setq clang-format-style-option "file")
;;   ;; ;; (bind-key "C-c <down>" 'clang-format-buffer c-mode-base-map)
;;   ;; :bind (:map c-mode-base-map
;;   ;;             ("C-c <down>" . clang-format-buffer)
;;   ;;             )
;;   )

(use-package cpp-auto-include
  :straight   (cpp-auto-include
               :host github
               :repo "emacsorphanage/cpp-auto-include")
  :commands (cpp-auto-include)
  )
#+end_src
** Go Language
#+begin_src emacs-lisp
  (defun poly/install-go-tool (pkg)
    "Install or update go PKG/tools."
    (interactive)
    (unless (executable-find "go")
      (user-error "Unable to find `go' in `exec-path'!"))
    (message "Installing go tool...")
    (set-process-sentinel
     (start-process "go-tool" "*Go Tool*" "go" "install" "-v" "-x" (concat pkg "@latest"))
     (lambda (proc _)
       (let ((status (process-exit-status proc)))
	 (if (= 0 status)
	     (message "Installed %s" pkg)
	   (message "Failed to install %s: %d" pkg status))))))

  (use-package go-mode
    :disabled t
    :straight t
    :ensure t
    :commands (godoc gofmt gofmt-before-save)
    :after (eglot)
    :config
    ;; Optional: install eglot-format-buffer as a save hook.
    ;; The depth of -10 places this before eglot's willSave notification,
    ;; so that that notification reports the actual contents that will be saved.
    (defun eglot-format-buffer-on-save ()
      (add-hook 'before-save-hook #'eglot-format-buffer -10 t))
    (add-hook 'go-mode-hook #'eglot-format-buffer-on-save))

  (use-package gorepl-mode
    :straight t
    :after go-mode
    :commands gorepl-run-load-current-file)

  ;; Install: See https://github.com/golangci/golangci-lint#install
  ;; (use-package flycheck-golangci-lint
  ;;   :straight t
  ;;   :after (flycheck go-mode)
  ;;   ;; :hook (go-mode . flycheck-golangci-lint-setup)
  ;;   :hook (go-mode . (lambda ()
  ;; 		     "Enable golangci-lint."
  ;; 		     (setq flycheck-disabled-checkers '(go-gofmt
  ;; 							go-golint
  ;; 							go-vet
  ;; 							go-build
  ;; 							go-test
  ;; 							go-staticcheck
  ;; 							go-errcheck))
  ;; 		     (flycheck-golangci-lint-setup)))
  ;;   :defines flycheck-disabled-checkers
  ;;   :custom
  ;;   ;; (flycheck-golangci-lint-enable-all t)
  ;;   ;; (flycheck-golangci-lint-fast t)
  ;;   (flycheck-golangci-lint-config
  ;;    (expand-file-name "golangci.yml" "~/.config/golangci-lint"))
  ;;   ;; (flycheck-golangci-lint-tests t)
  ;;   :config
  ;;   (eval-after-load 'flycheck
  ;;     '(add-hook 'flycheck-mode-hook #'flycheck-golangci-lint-setup))
  ;;   )

  (use-package go-eldoc
    :straight t
    :after go-mode
    :ensure t
    :disabled
    :commands go-eldoc-setup
    :init
    (add-hook 'go-mode-hook #'go-eldoc-setup))

  (use-package go-rename
    :straight t
    :after go-mode
    :disabled
    :ensure t
    :commands go-rename)

  (use-package go-guru
    :straight t
    :after go-mode
    :disabled
    :ensure t
    :commands go-guru-hl-identifier-mode
    :init
    (add-hook 'go-mode-hook #'go-guru-hl-identifier-mode))

  ;; (use-package go-mod-mode
  ;;     :straight (:host github :repo "zkry/go-mod-mode")
  ;;     :ensure t
  ;;     :mode (("go\\.mod\\'" . go-mod-mode)))

  (use-package go-tag
    :straight t
    :bind (:map go-mode-map
		("C-c t a" . go-tag-add)
		("C-c t r" . go-tag-remove))
    :init (setq go-tag-args (list "-transform" "camelcase"))
    :config
    (unless (executable-find "gomodifytags")
      (poly/install-go-tool "github.com/fatih/gomodifytags")))

  (use-package go-fill-struct
    :straight t
    :after go-mode
    :config
    ;; fillstruct - fills a struct literal with default values
    (unless (executable-find "fillstruct")
      (poly/install-go-tool "github.com/davidrjenni/reftools/cmd/fillstruct")))

  (use-package go-dlv
    :straight t
    :after go-mode
    :config
    ;; Delve is a debugger for the Go programming language.
    (unless (executable-find "dlv")
      (poly/install-go-tool "github.com/go-delve/delve/cmd/dlv")))

  (use-package go-errcheck
    :straight t
    :after go-mode
    :bind (:map go-mode-map
		("C-c C-e" . go-errcheck))
    :config
    ;; errcheck is a program for checking for unchecked errors in Go code.
    (unless (executable-find "errcheck")
      (poly/install-go-tool "github.com/kisielk/errcheck")))

  (use-package go-gen-test
    :straight t
    :bind (:map go-mode-map
		("C-c t g" . go-gen-test-dwim)))

  (use-package go-impl
    :straight t
    :commands (go-impl)
    :after go-mode
    :config
    (unless (executable-find "impl")
      (poly/install-go-tool "github.com/josharian/impl")))

  (use-package gotest
    :straight t
    :custom
    (go-test-verbose t)
    :bind (:map go-mode-map
		("C-c t f" . go-test-current-file)
		("C-c t t" . go-test-current-test)
		("C-c t j" . go-test-current-project)
		("C-c t b" . go-test-current-benchmark)
		("C-c t c" . go-test-current-coverage)
		("C-c t x" . go-run)))

  (use-package go-playground
    :straight t
    :diminish
    :commands (go-playground-mode)
    :config
    (unless (executable-find "goplay")
      (poly/install-go-tool "github.com/haya14busa/goplay/cmd/goplay")))
#+end_src
* lisp

#+begin_src emacs-lisp
(use-package lisp-mode
  :straight nil
  :after paredit
  :ensure nil
  :defer t
  :config
  (defun init-lisp-mode ()
    (setq lisp-body-indent 2)
    (show-paren-mode t)
    (setq show-paren-delay 0)
    (make-variable-buffer-local 'show-paren-style)
    (setq show-paren-style 'parenthesis) ; or parenthesis/expression
    (enable-paredit-mode)
    (setq abbrev-mode t)
    (setq lisp-indent-function 'common-lisp-indent-function))
  :hook
  (lisp-mode . init-lisp-mode)
  (emacs-lisp-mode . init-lisp-mode))
#+end_src

* Lua

#+begin_src emacs-lisp
(use-package lua-mode
  :straight t
  :ensure t
  :defer t
  :custom
  (lua-indent-level tab-width)
  (lua-indent-string-contents t)
  ;; :hook (cua-mode . lua-mode)
  :interpreter (("lua" . lua-mode)
		("nse" . lua-mode)
		)
  :mode (("\\.lua$" . lua-mode) ("\\.nse$" . lua-mode))
  :config
  (autoload 'lua-mode "lua-mode" "Lua editing mode." t))
#+end_src

* Tramp

#+begin_src emacs-lisp
(use-package tramp
  :straight (:type built-in)
  :ensure t
  :custom
  (tramp-default-method "ssh")
  (remote-file-name-inhibit-cache t)
  :config
  (customize-set-variable
   'tramp-ssh-controlmaster-options
   (concat
    " -o ControlPath=~/.ssh/ControlMaster/master-%%r@%%h:%%p "
    " -o ControlMaster=auto -o ControlPersist=yes")
   )
  (add-to-list 'tramp-default-user-alist '("ssh" "10\.181\.24\.12" "jy09901"))
  (setq tramp-verbose 6)
  (setq tramp-default-user "jy09901"
	tramp-default-host "10\.181\.24\.12"))

(use-package password-cache
  :straight (:type built-in)
  :ensure nil
  :custom
  ;; Never expire passwords
  (password-cache-expiry nil))

(use-package tramp-sh
  :straight (:type built-in)
  :ensure nil
  :custom
  ;; Use out-of-band method for big files
  (tramp-copy-size-limit (* 0.5 1024 1024))
  :config
  ;; Use the PATH from the remote
  (add-to-list 'tramp-remote-path 'tramp-own-remote-path))

(use-package tramp-gvfs
  :straight (:type built-in)
  :ensure nil
  :if (not IS-MAC)
  ;; :after tramp-ftp
  :config
  ;; ;; Prefer gvfs for FTP
  ;; (add-to-list 'tramp-gvfs-methods "ftp")
  (add-to-list 'tramp-gvfs-methods "dav")
  (add-to-list 'tramp-gvfs-methods "davs"))
#+end_src

* Clojure

** clojure-mode

Use clojure-mode for basic syntax support.

#+begin_src emacs-lisp
(use-package clojure-mode
  :straight t
  :commands (clojurescript-mode)
  ;; :config
  ;; (add-hook 'clojure-mode-hook 'paredit-mode)
  )

(use-package clojure-mode-extra-font-locking
  :straight t
  :ensure t
  :after clojure-mode)

;; (use-package flycheck-clojure
;;     :straight t
;;     :ensure t
;;     :commands clojure-mode
;;     ;; :config
;;     ;; (flycheck-clojure-setup)
;;     )
#+end_src

** Cider for REPL connection

#+begin_src emacs-lisp
(use-package cider
    :straight t
    :ensure t
    :commands cider-mode
    :custom
    (cider-print-fn 'zprint)
    :hook (cider-repl-mode . paredit-mode)
    :config
    (setq nrepl-popup-stacktraces nil)
    ;; (remove-hook 'cider-mode-hook 'cider-turn-on-eldoc-mode)
    ;; (add-hook 'cider-mode-hook 'cider-turn-on-eldoc-mode)
    ;; (add-hook 'cider-repl-mode-hook 'paredit-mode)
    )
#+end_src

** Linting with flycheck-clj-kondo

#+begin_src emacs-lisp
(use-package flycheck-clj-kondo
  :straight t
  :ensure t
  :commands clojure-mode
  :hook (clojure-mode . flycheck-mode)
  ;; :config
  ;; (flycheck-clojure-setup)
  )
#+end_src


* WEB
** vue
#+begin_src emacs-lisp
(use-package vue-mode
  :straight t
  :commands (vue-mode)
  :mode "\\.vue"
  ;; :config
  ;; (set-face-background 'mmm-default-submode-face nil)
  )
#+end_src
** web-mode
#+begin_src emacs-lisp
;; 设置缩进级别空格数
(defvar-local my/web-mode-offset 2)

(defun my/current-buffer-suffix()
  "Return suffix of current buffer."
  (nth 0 (cdr (split-string (buffer-name) "\\."))))

(use-package web-mode
  :straight t
  :hook
  (web-mode . (lambda()
		(if (string= (my/current-buffer-suffix) "vue")
		    (setq web-mode-style-padding 0
			  web-mode-script-padding 0))

		;; 设置缩进级别
		(setq web-mode-markup-indent-offset my/web-mode-offset)
		(setq web-mode-css-indent-offset my/web-mode-offset)
		(setq web-mode-code-indent-offset my/web-mode-offset)
		(setq web-mode-attr-indent-offset my/web-mode-offset)))
  :mode (("\\.js\\'" . web-mode)
	 ("\\.jsx\\'" . web-mode)
	 ("\\.vue\\'" . web-mode)
	 ("\\.jinja\\'" . web-mode)
	 ("\\.ts\\'" . web-mode)
	 ("\\.tsx\\'" . web-mode)
	 ("\\.html$" . web-mode))
  :custom
  (web-mode-markup-indent-offset 2)
  (web-mode-css-indent-offset 2)
  (web-mode-code-indent-offset 2)
  (web-mode-block-padding 2)
  (web-mode-comment-style 2)
  (web-mode-enable-css-colorization t)
  (web-mode-enable-auto-pairing t)
  (web-mode-enable-comment-keywords t)
  (web-mode-enable-current-element-highlight t)
  ;; (js2-basic-offset my/web-mode-offset)
  ;; (js-indent-level my/web-mode-offset)
  ;; (company-tooltip-align-annotations t)
  ;; (sgml-basic-offset my/web-mode-offset)
  )
#+end_src

** tidy
#+begin_src emacs-lisp
(defun my/setup-tide-mode ()
  "Setup tide mode used in \\<keymap\\>>."
  (interactive)
  (tide-setup)
  (flycheck-mode +1)
  (setq flycheck-check-syntax-automatically '(save mode-enabled))
  (eldoc-mode +1)
  (tide-hl-identifier-mode +1)
  ;; company is an optional dependency. You have to
  ;; install it separately via package-install
  ;; `M-x package-install [ret] company`
  ;; (company-mode +1)
  )

(defun poly/tide-before-save ()
  "Auto format for tide."
  (interactive)
  (unless (string-suffix-p ".tsx" (buffer-file-name))
    ;; (when (bound-and-true-p eglot-mode)
    ;;   (print "eglot-mode format")
    ;;   (eglot-format-buffer))
    (tide-format-before-save)
    )
  ;; (if (bound-and-true-p eglot-mode)
  ;;     (eglot-format-buffer))
  )

;; (defun poly/tide-after-save ()
;;   "Auto format for tide."
;;   (interactive)
;;   ;; (if (string-suffix-p ".tsx" (buffer-file-name))
;;   ;;     (me/pretty-quick))
;;   )

(use-package tide
  :straight t
  :commands tide-setup
  :hook
  (before-save . poly/tide-before-save)
  (typescript-mode . tide-hl-identifier-mode)
  (typescript-mode . my/setup-tide-mode)
  :after web-mode
  :custom
  (typescript-indent-level 2)
  (tide-format-options '(:indentSize 2 :tabSize 2)))
#+end_src

** typescript
#+begin_src emacs-lisp
(use-package typescript-mode
  :straight t
  :init
  (define-derived-mode typescript-tsx-mode typescript-mode "tsx")
  :custom
  (typescript-indent-level 2)
  :hook
  ((typescript-mode . subword-mode)
   ;; (typescript-mode . lsp)
   (typescript-mode . (lambda ()
			(require 'tide)
			(tide-setup))))
  :mode
  ("\\.tsx?\\'" . typescript-tsx-mode))
#+end_src

** prettier-js
#+begin_src emacs-lisp :tangle no
(use-package prettier-js
  :straight t
  :commands (prettier-js-mode prettier)
  :custom
  (prettier-target-mode "js-mode")
  (prettier-js-args
   '("--trailing-comma" "all" "--single-quote" "--semi" "--arrow-parens" "always"))
  :hook ((js-mode . prettier-js-mode)
	 (typescript-mode . prettier-js-mode)
	 (web-mode . prettier-js-mode)))
#+end_src

** js-mode
#+begin_src emacs-lisp
(use-package js
  :straight (:type built-in)
  :mode ("\\.js$" . js-mode)
  :hook
  (;; (js-mode . lsp)
   (js-mode . (lambda ()
		(require 'tide)
		(tide-setup)))))
#+end_src

** tagedit

#+begin_src emacs-lisp
(use-package tagedit
  :straight t
  :ensure t
  :commands tagedit-mode
  :config
  (tagedit-add-paredit-like-keybindings)
  ;; (add-hook 'web-mode-hook 'tagedit-mode)
  :hook
  (((sgml-mode html-mode) . tagedit-mode)))
#+end_src

** HTML
#+begin_src emacs-lisp
#+end_src

** Emmet
#+begin_src emacs-lisp
#+end_src

** protobuf

#+begin_src emacs-lisp
(use-package protobuf-mode
  :straight t
  :defer 1
  :config
  (defconst my-protobuf-style
    '((c-basic-offset . 2)
      (indent-tabs-mode . nil)))
  (add-hook 'protobuf-mode-hook (lambda () (c-add-style "my-style" my-protobuf-style t))))
#+end_src

** python

#+begin_src emacs-lisp
(setq python-python-command "/opt/local/bin/python")
(setq py-force-py-shell-name-p t)
#+end_src
