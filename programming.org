#+title: Programming

Configuration for programming and languages support.

#+begin_src emacs-lisp
  ;;; -*- lexical-binding: t -*-
#+end_src

* auto-mode-alist

#+begin_src emacs-lisp
(setq-default js-indent-level 2)
(add-to-list 'auto-mode-alist '("\\.ts\\'" . typescript-ts-mode))
(add-to-list 'auto-mode-alist '("\\.js\\'" . js-ts-mode))
(add-to-list 'auto-mode-alist '("\\.tsx\\'" . tsx-ts-mode))
(add-to-list 'auto-mode-alist '("\\.html\\'" . html-ts-mode))
#+end_src

* Format

#+begin_src emacs-lisp :tangle no
(use-package apheleia
  :delight "\U000f0276"
  :straight (:host github :repo "radian-software/apheleia" :branch "main")
  :disabled
  :defer t
  :hook (((go-ts-mode protobuf-ts-mode ;; emacs-lisp-mode
		      protobuf-mode
		      java-ts-mode
		      markdown-mode) . apheleia-mode))
  :commands (apheleia-mode apheleia-global-mode apheleia-format-buffer)
  :config
  (push '(mix-filename-format . ("mix" "format" "--stdin-filename" filepath "-"))
	apheleia-formatters)
  ;; (push '(jsbeautify-css . (npx "js-beautify" "--type=css" "--quiet" "-"))
  ;; 	apheleia-formatters)
  ;; (push '(jsbeautify-html . (npx "js-beautify" "--type=html" "--quiet" "-"))
  ;; 	apheleia-formatters)
  ;; (push '(jsbeautify-js . (npx "js-beautify" "--type=js" "--quiet" "-"))
  ;; 	apheleia-formatters)
  (push '(erb-formatter . ("erb-format" "--stdin"))
	apheleia-formatters)
  (push '(rufo . ("rufo" "--simple-exit"))
	apheleia-formatters)
  (push '(google-java-format2 . ("java" "-jar" "/usr/local/bin/google-java-format-1.17.0-all-deps.jar" "-"))
	apheleia-formatters)
  (setf (alist-get 'ruby-mode apheleia-mode-alist)
	'(rufo))

  (dolist (alist '((markdown-mode . prettier-markdown)
		   (gfm-mode . prettier-markdown)
		   (dockerfile-ts-mode . shfmt)
		   (protobuf-ts-mode . clang-format)
		   (protobuf-mode . clang-format)
		   (emacs-lisp-mode . lisp-indent)
		   (go-ts-mode . gofumpt)
		   (java-ts-mode . google-java-format2)
		   (java-mode . google-java-format2)
		   (sql-mode . sql-format)))
    (add-to-list 'apheleia-mode-alist alist)))
#+end_src

#+begin_src emacs-lisp
(use-package format-all
  :straight t
  :ensure t
  :hook ((
	  fish-mode
	  sh-mode
	  ;; prog-mode
	  lua-mode
	  ;; go-mode
	  ;; go-ts-mode
	  ;; go-mod-ts-mode
	  python-mode
	  python-ts-mode
	  java-mode
	  java-ts-mode
	  cc-mode
	  c-mode
	  c++-mode
	  clang-mode
	  elisp-mode
	  emacs-lisp-mode
	  ;; markdown-mode
	  yaml-mode
	  nix-mode
	  protobuf-mode
	  nginx-mode
	  cperl-mode
	  clojure-mode
	  web-mode
	  web-mode-prog-mode
	  ;;  objc-mode
	  ;;  swift-mode
	  ;;  typescript-mode
	  ;;  web-mode
	  ) . format-all-mode)
  :commands (format-all-mode
	     format-all-buffer)
  :init
  (defconst format-all--system-type
    (cl-case system-type
      (windows-nt 'windows)
      (cygwin     'windows)
      (darwin     'macos)
      (gnu/linux  'linux)
      (berkeley-unix
       (save-match-data
	 (let ((case-fold-search t))
	   (cond ((string-match "freebsd" system-configuration) 'freebsd)
		 ((string-match "openbsd" system-configuration) 'openbsd)
		 ((string-match "netbsd"  system-configuration) 'netbsd))))))
    "Current operating system according to the format-all package.")

  (defun format-all--resolve-system (choices)
    "Get first choice matching `format-all--system-type' from CHOICES."
    (cl-dolist (choice choices)
      (cond ((atom choice)
	     (cl-return choice))
	    ((eql format-all--system-type (car choice))
	     (cl-return (cadr choice))))))
  :config
  (define-format-all-formatter cpp-lua-format
    (:executable)
    (:install (macos ""))
    (:languages "Lua")
    (:features)
    (:format (format-all--buffer-easy (expand-file-name "bin/darwin/lua-format" (poly/vscode-extension-install-path "koihik.vscode-lua-format"))
				      "-i" "-c" (expand-file-name "~/.config/lua-format/config.yaml") "--")))

  (define-format-all-formatter my-stylua
    (:executable "stylua")
    (:install "cargo install stylua")
    (:languages "Lua")
    (:features)
    (:format (format-all--buffer-easy executable
				      "--config-path"
				      (expand-file-name "~/.config/stylua/stylua.toml") "-")))

  (defvar-local dot-clang-format nil)
  (define-format-all-formatter my-clang-format
    (:executable "clang-format")
    (:install
     (macos "brew install clang-format")
     (windows "scoop install llvm"))
    (:languages "C" "C++" "Java" "Objective-C" "Protocol Buffer")
    (:features)
    (:format
     (format-all--buffer-easy
      executable
      (when dot-clang-format
	(concat "--style=file:" dot-clang-format))
      (concat "--assume-filename="
	      (or (buffer-file-name)
		  (cdr (assoc language
			      '(("C"               . ".c")
				("C++"             . ".cpp")
				("Java"            . ".java")
				("Objective-C"     . ".m")
				("Objective-C" . ".x")
				("Objective-C" . ".xm")
				("Objective-C" . ".m")
				("Objective-C" . ".mm")
				("Protocol Buffer" . ".proto")))))))))


  (define-format-all-formatter buf-format
    (:executable "buf")
    (:install
     (macos ""))
    (:languages "Protocol Buffer")
    (:features)
    (:format
     (format-all--buffer-easy
      executable
      "format"
      (when (buffer-file-name)
	(buffer-file-name)))))

  (define-format-all-formatter goimports-gofmt
    (:executable "/bin/sh")
    (:install
     (macos "brew install go")
     (windows "scoop install go")
     "go get golang.org/x/tools/cmd/goimports")
    (:languages "Go")
    (:features)
    (:format (format-all--buffer-easy executable "-c" "goimports | gofmt -s")))


  (define-format-all-formatter goimports
    (:executable "goimports")
    (:install (macos ""))
    (:languages "Go")
    (:features)
    (:format (format-all--buffer-easy executable)))

  (define-format-all-formatter gofumpt
    (:executable "gofumpt")
    ;; (:executable "/bin/sh")
    (:install (macos ""))
    (:languages "Go")
    (:features)
    (:format (format-all--buffer-easy executable)))

  (define-format-all-formatter py-autopep8
    (:executable "autopep8")
    (:install (macos ""))
    (:languages "Python")
    (:features)
    (:format (format-all--buffer-easy executable "-")))

  (define-format-all-formatter py-black
    (:executable "black")
    (:install (macos ""))
    (:languages "Python")
    (:features)
    (:format (format-all--buffer-easy executable "-")))

  (define-format-all-formatter my-shfmt
    (:executable "shfmt")
    (:install
     (macos "brew install shfmt")
     (windows "scoop install shfmt"))
    (:languages "Shell")
    (:features)
    (:format
     (format-all--buffer-easy executable "-i" "4" "-ci"
			      (if (buffer-file-name)
				  (list "-filename" (buffer-file-name))
				(list "-ln"
				      (cl-case (and (eql major-mode 'sh-mode)
						    (boundp 'sh-shell)
						    (symbol-value 'sh-shell))
					(bash "bash")
					(mksh "mksh")
					(t "posix")))))))

  (define-format-all-formatter my-beautysh
    (:executable "beautysh")
    (:install
     (macos "pip install beautysh"))
    (:languages "Shell")
    (:features)
    (:format (format-all--buffer-easy executable "-")))


  (define-format-all-formatter nginxfmt
    (:executable "nginxfmt")
    (:install (macos "pip install nginxfmt"))
    ;; (:install
    ;;  (macos "brew install shfmt")
    ;;  (windows "scoop install shfmt"))
    (:languages "_Nginx")
    ;; (:modes nginx-mode)
    (:features)
    (:format
     (format-all--buffer-easy executable "-i" "4" "-")))

  (define-format-all-formatter google-java-format
    (:executable "google-java-format")
    (:install (macos ""))
    (:languages "Java")
    (:features)
    (:format (format-all--buffer-easy executable "-")))

  (define-format-all-formatter crossplane
    (:executable "/usr/local/bin/nginx_format.sh")
    (:install (macos "pip install crossplane"))
    (:languages "Nginx")
    (:features)
    (:format (format-all--buffer-easy executable)))

  ;; lsp-format-buffer
  (eval-after-load 'format-all
    (dolist (hook '(;; lua-mode-hook
		    go-mode-hook
		    go-ts-mode-hook
		    go-mod-ts-mode-hook
		    python-mode-hook
		    python-ts-mode-hook
		    java-mode-hook
		    markdown-mode-hook
		    ;; cc-mode-hook
		    ;; c-mode-hook
		    ;; c++-mode-hook
		    ;; clang-mode-hook
		    ;; objc-mode-hook
		    web-mode-hook
		    web-mode-prog-mode
		    nginx-mode-hook
		    emacs-lisp-mode-hook
		    markdown-mode-hook
		    fish-mode-hook
		    protobuf-mode-hook))
      (add-hook hook 'format-all-ensure-formatter)))

  (setq-default format-all-formatters
		'(
		  ;; ("Go" gofumpt)
		  ;; ("Go" goimports)
		  ;; ("Lua" my-stylua)
		  ("Lua" cpp-lua-format)
		  ("Java" google-java-format)
		  ("Markdown" prettier)
		  ("C" my-clang-format)
		  ("C++" my-clang-format)
		  ;; ("Objective-C" my-clang-format)
		  ("Protocol Buffer" my-clang-format)
		  ;; ("Protocol Buffer" buf-format)
		  ("SQL" pgformatter)
		  ;; ("CSS" prettier)
		  ("HTML" prettier)
		  ;; ("Dockerfile" dockfmt)
		  ;; ("Shell" my-shfmt)
		  ;; ("Python" py-autopep8)
		  ("Python" py-black)
		  ("Shell" my-beautysh)
		  ;; ("Markdown" prettier)
		  ;; ("Nix" nixpkgs-fmt)
		  ;; ("Emacs Lisp" emacs-lisp)
		  ;; ("YAML" prettier)
		  ("Nginx" nginx-fmt)
		  )))
#+end_src

* Flycheck

#+begin_src emacs-lisp
(use-package flycheck
  :straight t
  :ensure t
  :init (global-flycheck-mode)
  :custom
  (flycheck-check-syntax-automatically
   '(save idle-change mode-enabled))
  (flycheck-checker-error-threshold nil)
:config
(flycheck-add-mode 'typescript-tslint 'typescript-tsx-mode)
(flycheck-add-mode 'typescript-tslint 'typescript-ts-mode)
(flycheck-add-mode 'typescript-tslint 'tsx-ts-mode)

;; (remove-hook 'post-command-hook 'flycheck-display-error-at-point-soon)
;; (remove-hook 'focus-in-hook 'flycheck-display-error-at-point-soon)
;; (advice-add #'flycheck-display-error-at-point-soon :override #'ignore)
)

(use-package flycheck-color-mode-line
  :straight t
  :hook (flycheck-mode-hook . flycheck-color-mode-line-mode))

;; (use-package flycheck-pos-tip
;;   :straight t
;;   :hook
;;   (flycheck-mode . flycheck-pos-tip-mode)
;;   :after flycheck)

;; https://github.com/hlissner/doom-emacs/issues/2194
;; underline cant be a different color than the foreground on terminal
;; set foreground color to red on terminals to compensate
;; This doesnt take into account emacs running with frames both in the
;; terminal and GUI but im not worried about that situation.
;; https://stackoverflow.com/a/5801740
;; TODO: fix multi line errors not showing anything in terminal
;; this was changed as a result of https://github.com/flycheck/flycheck/issues/1730
(add-hook 'flycheck-mode-hook
          (defun fix-flycheck-error-face ()
            (unless window-system
              (set-face-attribute 'flycheck-error nil :foreground "red")
              (set-face-attribute 'flycheck-warning nil :foreground "yellow")
              (set-face-attribute 'flycheck-info nil :foreground "yellow"))))

(setq tooltip-frame-parameters
        '((name . "tooltip")
          (internal-border-width . 6)
          (border-width . 0)
          (no-special-glyphs . t)))

(setq tooltip-delay 0.5)
(setq tooltip-short-delay 0.5)
#+end_src

* flymake

#+begin_src emacs-lisp
(use-package flymake
  :straight (:type built-in))
#+end_src


* ispell

#+begin_src emacs-lisp :tangle no
(use-package ispell
  :disabled
  :straight (:type built-in)
  :config
  (setq ispell-really-aspell t
	ispell-silently-savep t
	ispell-quietly t)
  ;; http://blog.binchen.org/posts/what-s-the-best-spell-check-set-up-in-emacs.html
  (cond
   ;; if hunspell NOT installed, fallback to aspell
   ((executable-find "hunspell")
    ;; In addition to "brew install hunspell" download dicts to
    ;; ~/Library/Spelling/
    ;; https://cgit.freedesktop.org/libreoffice/dictionaries/plain/en/en_GB.aff
    ;; https://cgit.freedesktop.org/libreoffice/dictionaries/plain/en/en_GB.dic
    (setq ispell-program-name "hunspell")
    (setq ispell-local-dictionary "en_US")
    (setq ispell-local-dictionary-alist
          '(("en_GB" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "en_US") nil utf-8))))
   ((executable-find "aspell")
    (setq ispell-program-name "aspell")
    (setq ispell-extra-args '("--sug-mode=ultra" "--lang=en_US")))
   (t
    (error "No speller installed"))))
#+end_src

* LSP

** eglot

Use eglot as LSP client.

#+begin_src emacs-lisp
(defun project-name (project)
  "A human-readable name for the project.
	Nominally unique, but not enforced."
  (file-name-nondirectory (directory-file-name (project-root project))))

;; https://github.com/DEbling/dotfiles/blob/9dc0e347267dd68111baf8e7ab7d33c2e39ed404/.emacs.d/elisp/lang-java.el
;; (defconst jdt-jar-path "~/.emacs.d/.local/jar/org.eclipse.equinox.launcher.jar")
;; (defconst jdt-jar-path "/opt/jdt-language-server/plugins/org.eclipse.equinox.launcher_1.6.0.v20200915-1508.jar")
(defconst jdt-jar-path (expand-file-name "jdt-language-server/plugins/org.eclipse.equinox.launcher_1.6.400.v20210924-0641.jar" "~/workspace"))
(defconst jdt-extra-jvm-args '("-noverify"
			       "-javaagent:/Users/jiya/workspace/dotemacs.d/.local/jar/lombok.jar"
			       ;; "-javaagent:[~/.emacs.d/.local/jar/lombok.jar][classes=META-INF/]"
			       "-Xbootclasspath/a:~/.config/emacs/.local/jar/lombok.jar"
			       "--add-modules=ALL-SYSTEM"
			       "--add-opens"
			       "java.base/java.util=ALL-UNNAMED"
			       "--add-opens"
			       "java.base/java.lang=ALL-UNNAMED"
			       ;; "-configuration"
			       ;; "/opt/jdt-language-server/config_mac"
			       ))

(defun my-eclipse-jdt-contact (interactive)
  "Contact with the jdt server.
If INTERACTIVE, prompt user for details."
  (let* ((cp (getenv "CLASSPATH"))
	 (contact (unwind-protect (progn
				    (setenv "CLASSPATH" jdt-jar-path)
				    (eglot--eclipse-jdt-contact interactive))
		    (setenv "CLASSPATH" cp)))
	 (jdt-class (car contact))
	 (args (cddr contact)))
    (append (list jdt-class "/usr/bin/java")
	    jdt-extra-jvm-args args)))

(defun dart-lsp-contact (interactive)
  (list (executable-find "dart")
	(concat (file-name-directory (nix-executable-find nil "dart"))
		"snapshots/analysis_server.dart.snapshot")
	"--lsp"
	"--client-id=emacs.eglot"))

(use-package eglot
  :straight (:type built-in)
  :unless poly-use-lsp-mode
  :hook ((go-mode
	  go-ts-mode
	  protobuf-ts-mode
	  js-json-mode
	  json-mode
	  json-ts-mode
	  css-ts-mode
	  css-mode
	  lua-mode
	  lua-ts-mode
	  typescript-mode
	  typescript-ts-mode
	  tsx-ts-mode
	  html-ts-mode
	  html-mode
	  beancount-mode
	  python-mode
	  python-ts-mode
	  clojure-mode
	  clojurescript-mode
	  js-mode typescript-mode
	  c-mode c++-mode objc-mode swift-mode
	  java-mode ) . eglot-ensure)
  :custom
  (eglot-autoshutdown t)
  (eglot-sync-connect 1)
  (eglot-connect-timeout 40)
  (eglot-send-changes-idle-time 0.5)
  (eglot-confirm-server-initiated-edits nil)
  (eglot-events-buffer-size 500000)
  ;; (eglot-events-buffer-size 0)
  ;; disable symbol highlighting and documentation on hover
  ;; (eglot-ignored-server-capabilites
  ;;  '(:documentHighlightProvider
  ;;    :signatureHelpProvider
  ;;    :hoverProvider))
  ;; NOTE We disable eglot-auto-display-help-buffer because :select t in
  ;; its popup rule causes eglot to steal focus too often.
  (eglot-auto-display-help-buffer nil)
  :functions eglot--eclipse-jdt-contact
  :config
  (setq eglot-stay-out-of '(imenu eldoc))  ;; eglot reinits backends
  (setq eldoc-echo-area-use-multiline-p nil)
  ;; https://github.com/abougouffa/minemacs/blob/693efa0788fbe60e2f836d27aa12c7c055a2c387/elisp/%2Beglot.el#L27
  (defun +eglot-register (modes &rest servers)
    "Register MODES with LSP SERVERS.
Examples:
  (+eglot-register 'vhdl-mode \"vhdl_ls\")
  (+eglot-register 'lua-mode \"lua-language-server\" \"lua-lsp\")
  (+eglot-register '(c-mode c++-mode) '(\"clangd\" \"--clang-tidy\" \"-j=12\") \"ccls\")"
    (declare (indent 0))
    (let* ((alternatives-p (length> servers 1))
           (first-server (car servers))
           (first-server (if (listp first-server) (car first-server) first-server)))
      (with-eval-after-load 'eglot
	(when (executable-find first-server)
          (add-to-list
           'eglot-server-programs
           (cons modes (if alternatives-p
                           (eglot-alternatives (ensure-list servers))
			 (ensure-list (car servers)))))))))
  ;; emmylua
  ;; (let ((emmylua-jar-path (f-join (poly/vscode-extension-install-path "tangzx.emmylua") "server/EmmyLua-LS-all.jar")))
  ;;    (add-to-list 'eglot-server-programs
  ;; 		 `((lua-mode lua-ts-mode)  . ("/Library/Java/JavaVirtualMachines/openjdk8-zulu/Contents/Home/bin/java" "-cp" ,emmylua-jar-path
  ;; 					      "com.tang.vscode.MainKt" "-XX:+UseG1GC" "-XX:+UseStringDeduplication"))))

  ;; (let* ((lua-language-server-dir (poly/vscode-extension-install-path "sumneko.lua"))
  ;; 	 (lua-language-server-main (expand-file-name "server/main.lua" lua-language-server-dir))
  ;; 	 (lua-language-server-exec (expand-file-name "server/bin/lua-language-server" lua-language-server-dir)))
  ;;   (+eglot-register 'lua-mode `(,lua-language-server-exec "-E" "-e" "LANG=en" ,lua-language-server-main)))

  (let* ((lua-language-server-dir "/opt/local/lib/lua-language-server")
	 (lua-language-server-main (expand-file-name "main.lua" lua-language-server-dir))
	 (lua-language-server-exec (expand-file-name "bin/lua-language-server" lua-language-server-dir)))
    (+eglot-register 'lua-mode `(,lua-language-server-exec "-E" "-e" "LANG=en" ,lua-language-server-main "--logpath=/tmp/lua-language-server/log/" "--metapath=/tmp/lua-language-server/meta/" "--develop=false")))

  (let ((json-language-main (expand-file-name "json-language-features/server/dist/node/jsonServerMain.js" poly-vscode-app-extension-path)))
    (+eglot-register '(js-json-mode json-ts-mode json-mode) `("/opt/local/bin/node" ,json-language-main "--stdio")))

  ;; (let ((ts-language-main (expand-file-name "node_modules/typescript/lib/tsserver.js" poly-vscode-app-extension-path)))
  ;;   (+eglot-register '(js-mode js-ts-mode tsx-ts-mode typescript-ts-mode typescript-mode) `("/opt/local/bin/node" ,ts-language-main "--stdio")))

  (let ((css-language-main (expand-file-name "css-language-features/server/dist/node/cssServerMain.js" poly-vscode-app-extension-path)))
    (+eglot-register '(css-ts-mode css-mode) `("/opt/local/bin/node" ,css-language-main "--stdio")))

  (let ((html-language-main (expand-file-name "html-language-features/server/dist/node/htmlServerMain.js" poly-vscode-app-extension-path)))
    (+eglot-register '(html-ts-mode html-mode) `("/opt/local/bin/node" ,html-language-main "--stdio")))

  (+eglot-register '(go-mode go-ts-mode) `("gopls"))
  (+eglot-register '(js-mode js-ts-mode tsx-ts-mode typescript-ts-mode typescript-mode) '("typescript-language-server" "--stdio"))

  (add-to-list 'eglot-server-programs
	       '(java-mode .  my-eclipse-jdt-contact))

  (add-to-list 'eglot-server-programs
	       `(beancount-mode .  ("beancount-language-server")))

  (add-to-list 'eglot-server-programs
	       '(dart-mode . dart-lsp-contact))

  (when (executable-find "ccls")
    (add-to-list 'eglot-server-programs '((c-mode c++-mode objc-mode) "ccls"
					  "-init={\"compilationDatabaseDirectory\":\"build\"}")))

  (when (executable-find "pyright-langserver")
    (add-to-list 'eglot-server-programs '((python-ts-mode) "pyright-langserver"
					  "--stdio" "--watch")))

  (when (executable-find "protobuf-language-server")
    (add-to-list 'eglot-server-programs '((protobuf-mode protobuf-ts-mode) "protobuf-language-server"
					  )))

  (add-to-list 'eglot-server-programs
	       `((swift-mode) ,(string-trim (shell-command-to-string "xcrun --find sourcekit-lsp"))))

  (add-hook 'eglot-managed-mode-hook
	    (lambda()
	      (progn
		;; (flymake-mode -1)
		(poly/set-lsp-capf)
		)))

  (setq eglot-workspace-configuration
	`((:gopls . ((staticcheck . :json-false)
		     (matcher . "CaseSensitive")
		     (gofumpt . t)
		     (usePlaceholders . t)
		     (completeUnimported . t)
		     (deepCompletion . t)
		     (completionBudget . "150ms")
		     (diagnosticsDelay  .  "800ms")
		     (vulncheck . "Imports")
		     (semanticTokens . t)
		     ;; (directoryFilters . ["-vendor"])
		     (annotations . ((bounds . t) (escape . t) (inline . t) (nil . t)))
		     (codelenses . ((gc_details . :json-false)
				    (generate . t)
				    (regenerate_cgo . t)
				    (tidy . t)
				    (upgrade_dependency . t)
				    (vendor . t)))
		     ;; (buildFlags . ["-mod=vendor"])
		     (allowImplicitNetworkAccess . t)
		     (allowModfileModifications . t)
		     (experimentalPostfixCompletions . t)
		     (analyses . ,(mapcar (lambda (a) (cons a :json-false))
					  '(unusedparams unusedwrite composites ST1003  ST1021 ST1016 SA5011 ST1020 ST1005 SA9003 SA4006 ST1022 S1023 SA4011 SA4010 ST1018)))))
	  (:Lua . ((format . ((defaultConfig . ((indent_style . "space") (indent_size . "2")))))
		   (completion . ((callSnippet . "Both")))
		   (hint . ((arrayIndex . "Auto") (enable . t)))))
	  ))
  :bind (:map eglot-mode-map
	      ("C-c C-r" . poly/eglot-rename)
	      ("C-c o" . eglot-code-action-organize-imports)
	      ("C-c h" . eldoc)
	      ("<f6>" . xref-find-definitions)
	      ("C-c C-a" . eglot-code-actions)
	      ("C-c C-f" . eglot-format-buffer)))

(defun poly/go-workspace-organize-imports()
  "Run organize-imports action in workspace with changed go files."
  (interactive)
  (save-excursion
    (when-let ((filename (buffer-file-name))
	       (directory-name (file-name-directory filename))
	       (files (magit-changed-files "HEAD")))
      (dolist (go-file files)
	(when (s-suffix? ".go" go-file)
	  (let* ((full-filename (expand-file-name go-file directory-name))
		 (buffer (find-file-noselect full-filename))
		 (results))
	    (when buffer
	      (with-current-buffer buffer
		(when (fboundp 'eglot-code-action-organize-imports)
		  (setq results (call-interactively 'eglot-code-action-organize-imports (point-min)))
		  (when results
		    (let ((el (seq-elt results 0))
			  (edit)
			  (idx 0))
		      (when (< idx (length results))
			(setq edit (plist-get el :edit))
			(if edit
			    (eglot--apply-workspace-edit edit)
			  (message (format "nothing need to import: %s" go-file)))
			(setq el (seq-elt results idx))
			(setq idx (1+ idx))))))
		(message (format "organize imports & save buffer: %s" go-file))
		(save-buffer))
	      )))))))

(defun lsp/non-greedy-eglot ()
  "Making Eglot capf non-greedy."
  (progn
    (fset 'non-greedy-eglot
	  (cape-capf-buster
	   (cape-capf-properties #'eglot-completion-at-point :exclusive 'no)))
    (setq completion-at-point-functions
	  (list #'non-greedy-eglot))))

(defun lsp/extra-capf ()
  "Adding extra capf during LSP startup."
  (let ((tmp-symbol (intern (concat "capf/" (symbol-name major-mode)))))
    (unless (null (symbol-function tmp-symbol))
      (funcall (symbol-function tmp-symbol)))))
#+end_src

*** eglot-rename with symbol in place

#+begin_src emacs-lisp
(defun poly/eglot-rename (newname)
  "Rename the current symbol to NEWNAME."
  (interactive
   (list (read-from-minibuffer
          (format "Rename `%s' to: " (or (thing-at-point 'symbol t)
                                         "unknown symbol"))
          (or (thing-at-point 'symbol t) "") nil nil nil
          (symbol-name (symbol-at-point)))))
  (unless (eglot--server-capable :renameProvider)
    (eglot--error "Server can't rename!"))
  (eglot--apply-workspace-edit
   (jsonrpc-request (eglot--current-server-or-lose)
                    :textDocument/rename `(,@(eglot--TextDocumentPositionParams)
                                           :newName ,newname))
   current-prefix-arg))
#+end_src

** lsp-mode

#+begin_src emacs-lisp
(defvar my-disable-lsp-completion nil
  "If non-nil, disable lsp-completion-enable, can work with .dir-locals
       ((nil . ((eval . (setq-local my-disable-lsp-completion t)))))
    .")

(defun my/local-variables-hook()
  "disable lsp-completion-enable"
  (when (bound-and-true-p my-disable-lsp-completion)
    (setq-local lsp-completion-enable nil
		;; lsp-modeline-code-actions-enable nil
		))
  (when (derived-mode-p 'go-mode
			'go-ts-mode
			'go-mod-ts-mode
			'java-mode
			'beancount-mode
			'web-mode
			;; 'python-mode
			'lua-mode
			'lua-ts-mode
			'scala-mode
			'js-mode
			'js2-mode
			'typescript-mode
			'c-mode
			'c++-mode
			'clojure-mode
			'cperl-mode
			'go-dot-mod-mode
			'perl-mode)
    (lsp-deferred)))

(use-package lsp-mode
  :straight t
  :when poly-use-lsp-mode
  :diminish
  :commands (lsp lsp-deferred lsp-enable-which-key-integration lsp-format-buffer lsp-organize-imports)
  :hook (((go-mode go-ts-mode go-dot-mod-mode go-mod-ts-mode
		   rust-ts-mode
		   rustic-mode
		   clojure-mode
		   ;; java-mode
		   beancount-mode web-mode
		   python-mode python-ts-mode
		   lua-mode lua-ts-mode
		   scala-mode js-mode js-ts-mode
		   js2-mode typescript-mode typescript-ts-mode
		   typescript-tsx-mode tsx-ts-mode
		   java-ts-mode
		   vue-mode
		   ;; html-ts-mode
		   c-mode c++-mode clojure-mode cperl-mode
		   shell-mode bash-mode markdown-mode sql-mode
		   yaml-mode yaml-ts-mode xml-mode nxml-mode
		   protobuf-mode
		   ) . lsp-deferred)
	 (lsp-mode . lsp-enable-which-key-integration))
  :custom
  (lsp-restart 'auto-restart)
  ;; (lsp-restart 'ignore)
  (lsp-auto-configure t)
  (lsp-auto-execute-action nil)
  (lsp-apply-edits-after-file-operations  nil)
  (lsp-enable-links nil)
  (lsp-idle-delay 0.1)                 ;; lazy refresh
  (lsp-server-trace nil)
  (lsp-log-io nil)
  (lsp-log-max nil)
  (lsp-print-performance nil)
  (lsp-document-sync-method nil) ;; use default method recommended by server. 'incremental 'full
  (lsp-enable-xref t)
  (lsp-auto-touch-files nil)
  (lsp-modeline-code-actions-segments '(count name))
  (lsp-modeline-code-actions-enable nil)
  (lsp-modeline-diagnostics-enable nil)
  (lsp-modeline-diagnostics-scope :file)
  (lsp-modeline-workspace-status-enable nil)
  (lsp-headerline-breadcrumb-enable nil)
  (lsp-semantic-tokens-enable t)
  (lsp-progress-spinner-type 'progress-bar-filled)
  ;; (lsp-diagnostics-provider :none)
  (lsp-diagnostics-provider :flycheck)
  (lsp-diagnostic-clean-after-change nil)
  (lsp-enable-indentation nil)
  (lsp-completion-enable t)
  (lsp-completion-enable-additional-text-edit nil)
  (lsp-response-timeout 5)
  (lsp-tcp-connection-timeout 2)
  (lsp-enable-folding t)
  (lsp-diagnostic-package :flycheck)
  (lsp-modeline-diagnostics-enable t)
  (lsp-diagnostics-disabled-modes '(markdown-mode gfm-mode js-mode go-mode go-ts-mode protobuf-mode))
  (lsp-flycheck-live-reporting t)    ;; obey `flycheck-check-syntax-automatically'
  (lsp-completion-provider :none)
  (lsp-enable-file-watchers nil)       ;; turn off for better performance
  ;; (lsp-file-watch-threshold 10000)
  (lsp-enable-text-document-color nil) ;; as above
  (lsp-enable-symbol-highlighting nil) ;; as above
  (lsp-enable-on-type-formatting nil)  ;; disable formatting on the fly
  (lsp-before-save-edits nil)
  (lsp-auto-guess-root t)              ;; auto guess root
  (lsp-keep-workspace-alive nil)       ;; auto kill lsp server
  (lsp-signature-auto-activate nil) ; nil
  (lsp-signature-render-documentation nil)
  (lsp-eldoc-enable-hover nil)         ;; disable eldoc displays in minibuffer
  (lsp-eldoc-render-all nil)
  (lsp-enable-snippet t)
  (lsp-enable-imenu t)
  (lsp-enable-links t)
  (lsp-lens-enable t)
  (lsp-imenu-container-name-separator "⦿")
  (lsp-imenu-show-container-name t)
  (lsp-clojure-custom-server-command "/opt/local/bin/clojure-lsp")
  (lsp-clients-emmy-lua-java-path "/Library/Java/JavaVirtualMachines/openjdk8-zulu/Contents/Home/bin/java")
  (lsp-clients-emmy-lua-jar-path (f-join (poly/vscode-extension-install-path "tangzx.emmylua") "server/EmmyLua-LS-all.jar"))
  (lsp-clients-emmy-lua-args '("com.tang.vscode.MainKt" "-XX:+UseG1GC" "-XX:+UseStringDeduplication"))
  (lsp-clients-lua-language-server-install-dir (poly/vscode-extension-install-path "sumneko.lua"))
  ;; (lsp-clients-lua-language-server-command (expand-file-name "server/bin/lua-language-server" lsp-clients-lua-language-server-install-dir))
  (lsp-clients-lua-language-server-bin (expand-file-name "server/bin/lua-language-server" lsp-clients-lua-language-server-install-dir))
  (lsp-clients-lua-language-server-args '("-E"))
  (lsp-clients-lua-language-server-main-location (expand-file-name "server/main.lua" lsp-clients-lua-language-server-install-dir))
  (lsp-lua-workspace-max-preload 4096); Default: 300, Max preloaded files
  (lsp-lua-workspace-preload-file-size 1024) ; Default: 100, Skip files larger than this value (KB) when preloading.
  (lsp-lua-diagnostics-globals "'Lua.diagnostics.globals': ['use', 'awesome', 'client', 'root']")
  (lsp-lua-completion-enable nil)
  (lsp-lua-diagnostics-disable t)
  (lsp-lua-diagnostics-enable nil)
  (lsp-lua-hint-enable nil)
  (lsp-lua-hint-param-name nil)
  (lsp-lua-hint-param-type nil)
  (lsp-lua-hover-enable nil)
  (lsp-lua-signature-help-enable nil)
  (lsp-lua-window-progress-bar nil)
  (lsp-lua-window-status-bar nil)
  (lsp-lua-completion-display-context nil)
  (lsp-go-gopls-server-path "/opt/local/bin/gopls")
  ;; (lsp-go-gopls-server-path "/usr/local/gopath/bin/gopls")
  ;; (lsp-gopls-server-args '("-debug" "127.0.0.1:3000" "-logfile=/tmp/gopls-emacs.log" ;; "-rpc.trace" "-vv"
  ;; 			   ))
  (lsp-go-hover-kind "NoDocumentation")
  (lsp-go-links-in-hover nil)
  (lsp-go-use-gofumpt t)
  (lsp-go-use-placeholders t)
  (lsp-go-symbol-matcher "FastFuzzy")
  ;; (lsp-go-env '((GOFLAGS . "-mod=mod")))
  (lsp-go-directory-filters ["-_bazel_out"
			     "-_bazel_bin"
			     "-_bazel_testlogs"
			     "-_bazel_infrastructure"
			     "-bazel-out"
			     "-bazel-bin"
			     "-bazel-testlogs"
			     "-bazel-infrastructure"
			     "-tools"
			     "-**/testdata"
			     "-vendor"
			     ;; "-internal"
			     "-.gocache"
			     "-.git"
			     "-!out"
			     ])
  ;; what to use when checking on-save. "check" is default, I prefer clippy
  ;; rustup component add clippy
  (lsp-rust-analyzer-cargo-watch-command "clippy")
  (lsp-beancount-langserver-executable (expand-file-name "workspace/beancount-language-server/target/release/beancount-language-server" "~"))
  (lsp-beancount-journal-file (expand-file-name ".emacs.d/.local/beancount/beancount.beancount" "~"))
  :config
  ;; cancel warning
  (advice-add 'lsp-warn
	      :around (lambda (orig-func &rest r)
			(message (apply #'format-message r))))

  (defun my-flycheck-lsp-advice (orig &rest args)
    "Ensure user-defined `flycheck-checker' isn't overwritten by `lsp'."
    (if flycheck-checker
        (progn
	  (let ((old-checker flycheck-checker))
            (apply orig args)
            (setq-local flycheck-checker old-checker)))
      (apply orig args))
    (apply orig args))

  (advice-add 'lsp-diagnostics-flycheck-enable :around #'my-flycheck-lsp-advice)

  (setq lsp-disabled-clients '(emmy-lua))
  (setq lsp-enabled-clients '(lua-language-server
			      pyright gopls
			      protobuf-bufls
			      vue-semantic-server
			      clojure-lsp
			      jdtls
			      rust-analyzer
			      ;; vls
			      json-ls beancount-ls css-ls dockerfile-ls ts-ls jsts-ls
			      html-ls emmet-ls nginx-ls bash-ls unified remark marksman sqls yamlls xmlls taplo))
  (add-to-list 'lsp-file-watch-ignored "[/\\\\]\\vendor$")
  (add-to-list 'lsp-file-watch-ignored "[/\\\\].git$")
  ;; (add-to-list 'lsp-file-watch-ignored "[/\\\\]internal$")
  (add-to-list 'lsp-file-watch-ignored "[/\\\\]\\.gocache$")
  (add-hook 'hack-local-variables-hook #'my/local-variables-hook)
  (add-hook 'html-ts-mode-hook (lambda()
				 (when
		                     ;; auto emerge emmet-ls
		                     (require 'emmet-ls nil t)
				   ;; auto emerge lsp-html
				   (require 'lsp-html nil t)
				   ;; auto emerge css-ls
				   (require 'css-ls nil t)
				   (lsp-deferred))
				 ))
  (lsp-register-custom-settings
   `(("gopls.usePlaceholders" t t)
     ("gopls.deepCompletion" t t)
     ("gopls.completeUnimported" t t)
     ("gopls.staticcheck" nil nil)
     ("gopls.completionBudget" "100ms" nil)
     ("gopls.semanticTokens" t t)
     ("gopls.allExperiments" t t)
     ("gopls.matcher" "Fuzzy" t)
     ("gopls.hoverKind" "NoDocumentation" nil)
     ("gopls.codelenses"  ((gc_details . :json-false)
			   (generate . t)
			   (regenerate_cgo . t)
			   (tidy . t)
			   (upgrade_dependency . t)
			   (vendor . t)) nil)
     ;;disables -mod=readonly, allowing imports from out-of-scope module
     ("gopls.allowModfileModifications" t t)
     ("gopls.vulncheck" "Imports" nil)
     ;;disables GOPROXY=off, allowing implicit module downloads rather than requiring user action
     ("gopls.allowImplicitNetworkAccess" t t)
     ;; ST1003 CamelCase
     ;; ST1021 comment on exported type
     ;; ST1016 methods on the same type should have the same receiver name
     ;; ST1020 comment on exported function
     ;; ST1005 error strings should not be capitalized
     ;; SA9003 empty branch
     ;; ST1022 comment on exported var
     ;; S1023 redundant break statement
     ;; SA4011 ineffective break statement. Did you mean to break out of the outer loop?
     ;; SA4010 this result of append is never used, except maybe in other appends
     ;; S1007 should use raw string (`...`) with regexp.Compile to avoid having to escape twice
     ("gopls.analyses" ,(mapcar (lambda (a) (cons a :json-false))
				'(;; unusedparams
				  ;; composites
				  ;; ST1003
				  ST1021 ST1016 SA5011 ST1020 ;; ST1005
				  ;; SA9003
				  ;; SA4006
				  ST1022 ;; S1023
				  ;; SA4011
				  ;; SA4010
				  )))
     ("gopls.annotations" ,(mapcar (lambda (a) (cons a :json-false))
				   '(bounds escape inline nil)))
     ;; ("gopls.buildFlags" ["-mod=readonly"])
     ("gopls.env" lsp-go-env)
     ("gopls.linkTarget" lsp-go-link-target)
     ("gopls.gofumpt" ,(if (executable-find "gofumpt") t nil) t)
     ("gopls.experimentalPostfixCompletions" t t)
     ("gopls.semanticTokens" t t)
     ("gopls.directoryFilters" lsp-go-directory-filters)
     ("Lua.runtime.version" "LuaJIT" t)
     ("Lua.workspace.checkThirdParty" t t)
     ("Lua.completion.enable" t t)
     ("Lua.completion.callSnippet" "Both" t)
     ("Lua.format.enable" t t)
     ("Lua.hint.enable" t t)
     ("Lua.hint.hover" t t)
     ("Lua.hint.paramType" t t)
     ("Lua.hint.paramName" t t)
     ("Lua.hint.arrayIndex" "Auto" t)
     ("Lua.develop.enable" :json-false)
     ("Lua.format.enable" t)
     ("Lua.format.defaultConfig.indent_style" "space")
     ("Lua.format.defaultConfig.indent_size" "2")
     ("Lua.format.defaultConfig.continuation_indent_size" "2")
     ("Lua.format.defaultConfig.quote_style" "none")

     ;; typescript
     ("typescript.format.baseIndentSize" 0)
     ("typescript.format.indentSize" 2)
     ("typescript.format.indentStyle" "None")
     ("typescript.format.trimTrailingWhitespace" t)
     ("typescript.format.convertTabsToSpaces" t)
     ("typescript.format.tabSize" 2)

     ("javascript.format.baseIndentSize" 0)
     ("javascript.format.indentSize" 2)
     ("javascript.format.indentStyle" "None")
     ("javascript.format.trimTrailingWhitespace" t)
     ("javascript.format.convertTabsToSpaces" t)
     ("javascript.format.tabSize" 2)

     ("html.suggest.html5" t)
     ("html.autoClosingTags" t)
     ("html.validate.scripts" t)
     ("html.validate.styles" t)
     ("html.format.wrapLineLength" 120)
     ("html.format.enable" t)
     ))
  :init
  (let* ((yaml-language-server-dir (poly/vscode-extension-install-path "redhat.vscode-yaml"))
	 (yaml-language-server-main (expand-file-name "dist/languageserver.js" yaml-language-server-dir)))
    (setq lsp-yaml-server-command (list "node" yaml-language-server-main "--stdio")))
  :bind (:map lsp-mode-map
	      ("C-c r" . lsp-rename)
	      ("C-c a" . lsp-organize-imports)
	      ("C-c C-f" . poly/lsp-format-buffer)
	      ("C-c C-i"     . lsp-find-implementation)
	      ([remap xref-find-definitions] . lsp-find-definition)
              ([remap xref-find-references] . lsp-find-references)
	      ([remap xref-find-apropos]     . lsp-find-declaration)))

(use-package lsp-pyright
  :ensure t
  :straight t
  :after lsp-mode
  :hook (python-mode . (lambda ()
                         (require 'lsp-pyright)
                         (lsp-deferred)))
  :config
  (add-to-list 'lsp-enabled-clients 'lsp-pyright))

(use-package dap-mode
  :straight t
  :when poly-use-lsp-mode
  :ensure t
  :after lsp-mode
  :config
  (dap-auto-configure-mode)
  ;; (dap-mode t)
  (dap-ui-mode t)
  (require 'dap-go)
  (require 'dap-dlv-go)
  (require 'dap-chrome)
  (require 'dap-hydra)
  ;; FIXME: Create nice soltion instead of a hack
  (defvar dap-hide/show-ui-hidden? t)
  (defun dap-hide/show-ui ()
    "Hide/show dap ui. FIXME"
    (interactive)
    (if dap-hide/show-ui-hidden?
        (progn
          (setq dap-hide/show-ui-hidden? nil)
          (dap-ui-locals)
          (dap-ui-repl))
      (kill-buffer "*dap-ui-inspect*")
      (kill-buffer "*dap-ui-locals*")
      (kill-buffer "*dap-ui-repl*")
      (kill-buffer "*dap-ui-sessions*")
      (setq dap-hide/show-ui-hidden? t)))
  :bind (:map dap-mode-map
	      ([f9] . dap-continue)
              ([S-f9] . dap-disconnect)
              ([f10] . dap-next)
              ([f11] . dap-step-in)
              ([S-f11] . dap-step-out)
              ([f12] . dap-hide/show-ui)
              ("C-c h" . #'dap-hydra)
              ("C-c b" . #'dap-breakpoint-toggle)
              ("C-c d r" . #'dap-java-debug)
              ("C-c d m" . #'dap-java-debug-test-class)
              ;; ("C-c r t" . #'mvn-test)
	      ))

(use-package lsp-treemacs
  :when poly-use-lsp-mode
  :straight t
  :after lsp-mode
  :commands lsp-treemacs-errors-list)

(use-package lsp-ui
  :straight t
  :after lsp-mode
  :when poly-use-lsp-mode
  :diminish
  :custom-face
  (lsp-ui-sideline-code-action ((t (:inherit warning))))
  :hook (lsp . lsp-ui-mode)
  :custom
  (lsp-ui-doc-enable nil)
  (lsp-ui-doc-header nil)
  (lsp-ui-doc-max-height 45)
  (lsp-ui-doc-include-signature t)
  (lsp-ui-doc-position 'top)
  (lsp-ui-doc-alignment 'frame)
  ;; (lsp-ui-doc-position 'at-point)
  (lsp-ui-doc-border (face-foreground 'default))
  (lsp-ui-sideline-enable t)
  (lsp-ui-sideline-ignore-duplicate t)
  (lsp-ui-sideline-show-code-actions t)
  (lsp-ui-sideline-show-diagnostics t)
  (lsp-ui-doc-use-childframe nil)
  (lsp-ui-doc-use-webkit nil)
  (lsp-ui-doc-show-with-cursor t)
  (lsp-ui-imenu-window-width 200)
  (lsp-ui-doc-border (face-foreground 'font-lock-comment-face))
  (lsp-ui-imenu-colors `(,(face-foreground 'font-lock-keyword-face)
			 ,(face-foreground 'font-lock-string-face)
			 ,(face-foreground 'font-lock-constant-face)
			 ,(face-foreground 'font-lock-variable-name-face)))
  ;; :config
  ;; ;; Use lsp-ui-doc-webkit only in GUI
  ;; (when IS-GUI
  ;;   (setq lsp-ui-doc-use-webkit t))
  ;; ;; WORKAROUND Hide mode-line of the lsp-ui-imenu buffer
  ;; ;; https://github.com/emacs-lsp/lsp-ui/issues/243
  ;; (defadvice lsp-ui-imenu (after hide-lsp-ui-imenu-mode-line activate)
  ;;   (setq mode-line-format nil))
  :bind (
	 :map lsp-ui-mode-map
	 (("M-<f6>" . lsp-ui-hydra/body)
	  ;; ("C-c C-i"                     . lsp-ui-peek-find-implementation)
	  ;; ([remap xref-find-definitions] . lsp-ui-peek-find-definitions)
          ;; ([remap xref-find-references]  . lsp-ui-peek-find-references)
          ;; ([remap xref-go-back]          . lsp-ui-peek-jump-backward)
          ;; ([remap xref-go-forward]       . lsp-ui-peek-jump-forward)
	  )))

(use-package lsp-protobuf
  :straight (:host github :repo "shuxiao9058/lsp-protobuf")
  :custom
  (lsp-protobuf-bufls-server-path "/usr/local/gopath/bin/bufls"))

(use-package lsp-java
  :hook ((java-ts-mode . java-lsp-init)
	 (java-ts-mode . dap-mode)
	 (java-ts-mode . dap-ui-mode))
  :custom
  (lsp-java-server-install-dir (expand-file-name "~/.emacs.d/.cache/lsp/eclipse.jdt.ls/"))
  (lsp-java-workspace-dir (expand-file-name "~/.emacs.d/.cache/lsp/eclipse.jdt.ls/workspace/"))
  (lsp-java-implementations-code-lens-enabled t)
  (lsp-java-references-code-lens-enabled t)
  (lsp-java-save-actions-organize-imports t)
  (lsp-java-format-on-type-enabled nil)
  (lsp-java-import-gradle-offline-enabled t)
  (lsp-java-autobuild-enabled t)
  (lsp-java-import-gradle-enabled t)
  (lsp-java-import-maven-enabled t)
  (lsp-java-completion-enabled t)
  :init
  ;; 指定运行 jdtls 的 java 程序
  (setq lsp-java-java-path "/opt/local/Library/Java/JavaVirtualMachines/jdk-20-oracle-openjdk.jdk/Contents/Home/bin/java"
	dap-java-java-command "/opt/local/Library/Java/JavaVirtualMachines/jdk-20-oracle-openjdk.jdk/Contents/Home/bin/java")
  ;; 查看所有 java 版本：/usr/libexec/java_home -verbose
  (setq lsp-java-configuration-runtimes
        '[(:name "Java SE 8" :path "/opt/local/Library/Java/JavaVirtualMachines/openjdk8-zulu/Contents/Home" :default t)
          (:name "Java SE 11.0.20" :path "/opt/local/Library/Java/JavaVirtualMachines/openjdk11-zulu/Contents/Home")
          (:name "Java SE 20.0.2" :path "/opt/local/Library/Java/JavaVirtualMachines/jdk-20-oracle-openjdk.jdk/Contents/Home")])
  :config
  (defun java-lsp-init ()
    "We need to require java-lsp before loading lsp in a Java buffer.
use-package will load java-lsp for us simply by calling this function."
    (setq lsp-java-vmargs
          `(;; "-noverify"
            ;; "-Xmx1G"
	    "-XX:+UseParallelGC"
	    "-XX:GCTimeRatio=4"
	    "-XX:AdaptiveSizePolicyWeight=90"
	    "-Dsun.zip.disableMemoryMapping=true"
	    "-Xmx6G"
	    "-Xms2G"
	    ;; "-Xmx3G"
            ;; "-XX:+UseG1GC"
            "-XX:+UseStringDeduplication"
	    "-javaagent:/Users/jiya/workspace/dotemacs.d/.local/jar/lombok.jar"
	    ;; "-javaagent:[~/.emacs.d/.local/jar/lombok.jar][classes=META-INF/]"
	    "-Xbootclasspath/a:~/.config/emacs/.local/jar/lombok.jar"
	    ;;             ,(concat "-javaagent:" (expand-file-name "~") "/.emacs.d/.local/jar/lombok.jar")
	    ;; ,(concat "-Xbootclasspath/a:" (expand-file-name "~") "/.emacs.d/.local/jar/lombok.jar")
	    ;; "-javaagent:/Users/jiya/workspace/dotemacs.d/.local/jar/lombok.jar"
	    ;; "-javaagent:[~/.emacs.d/.local/jar/lombok.jar][classes=META-INF/]"
	    ;; "-Xbootclasspath/a:~/.config/emacs/.local/jar/lombok.jar"
	    "--add-modules=ALL-SYSTEM"
	    "--add-opens"
	    "java.base/java.util=ALL-UNNAMED"
	    "--add-opens"
	    "java.base/java.lang=ALL-UNNAMED"
	    ))
    (setq c-basic-offset 2
          tab-width 2
          indent-tabs-mode t
          imenu-list-auto-resize t)
    (setq electric-indent-inhibit nil)  ; Auto-indent code after e.g. {}
    (setq company-lsp-cache-candidates nil)  ; Company cache should be disabled for lsp-java
    (lsp-deferred))
  ;; (add-hook 'java-ts-mode-hook 'lsp)
  (add-hook 'java-ts-mode-hook #'lsp-java-boot-lens-mode)
  ;; (require 'dap-java)
  )

(use-package dap-java
  :straight nil
  :after lsp-java
  :config
  (dap-register-debug-template "VulpxLauncher"
                               (list :type "java"
                                     :request "launch"
                                     :args ""
                                     :cwd nil
                                     :stopOnEntry :json-false
                                     :host "localhost"
                                     :request "launch"
                                     :modulePaths []
                                     :classPaths nil
                                     :name "VulpxLauncher"
                                     :projectName "forme-backend"
                                     :mainClass "io.vulpx.VulpxLauncher")))

;; For groovy and gradle support
(use-package groovy-mode :defer t)

(use-package gradle-mode
  :hook (java-ts-mode . gradle-mode)
  :preface
  (defun my/switch-to-compilation-window ()
    "Switch to the *compilation* buffer after compilation."
    (other-window 1))
  ;; :bind (:map gradle-mode-map
  ;;             ("C-c C-c" . gradle-build)
  ;;             ("C-c C-t" . gradle-test))
  :config
  (advice-add 'gradle-build :after #'my/switch-to-compilation-window)
  (advice-add 'gradle-test :after #'my/switch-to-compilation-window))
#+end_src

** yas parameter complete in place required


#+begin_src emacs-lisp
(use-package yasnippet-snippets
  :straight t
  :ensure t
  :config
  (add-to-list 'yas-snippet-dirs
	       (expand-file-name "snippets" poly-cache-dir) t))

(use-package yasnippet
  :straight t
  :ensure t
  :diminish yas-global-mode
  :commands yas-global-mode
  :hook (after-init . yas-global-mode)
  :hook ((typescript-mode . yas-minor-mode)
         (sh-mode . yas-minor-mode)
         (c-mode . yas-minor-mode)
         (c++-mode . yas-minor-mode)
         (go-ts-mode . yas-minor-mode)
         (json-mode . yas-minor-mode)
         (yaml-mode . yas-minor-mode)
         (web-mode . yas-minor-mode)
         (js2-mode . yas-minor-mode)
	 (lua-mode . yas-minor-mode))
  :after (yasnippet-snippets)
  :config
  (yas-reload-all))

(use-package java-snippets
  :straight t
  :defer t
  :after yasnippet)

(use-package javadoc-lookup
  :straight t)

(use-package cape-yasnippet
  :defer t
  :disabled
  :after cape yasnippet
  :straight (:host github :repo "elken/cape-yasnippet")
  :init
  (add-to-list 'completion-at-point-functions #'cape-yasnippet)
  ;; :config
  ;; (defun cae-yas-setup-capf ()
  ;; (make-variable-buffer-local 'completion-at-point-functions)
  ;; (cl-pushnew 'cape-yasnippet
  ;;             completion-at-point-functions
  ;;             :test #'eq))
;; ;;;###autoload
;; (defun cae-corfu-enable-in-minibuffer-h ()
;;   (unless (or (bound-and-true-p mct--active)
;;               (bound-and-true-p vertico--input)
;;               (cl-member (minibuffer-prompt)
;;                          '("I-search: "
;;                            "Query replace "
;;                            "Align regexp"
;;                            "Expansion for ")
;;                          :test #'string-match-p)
;;               (memq this-command '(evil-ex
;;                                    evil-ex-search-forward
;;                                    evil-ex-search-backward))
;;               (and (featurep 'helm-core)
;;                    (helm--alive-p))

;;               (corfu-mode +1))))
  ;; (dolist (hook '(prog-mode-hook
  ;;                 text-mode-hook
  ;;                 lsp-mode-hook
  ;;                 sly-mode-hook))
  ;;   (add-hook hook #'cae-yas-setup-capf))
  )
#+end_src

* treesitter

#+begin_src emacs-lisp
(when (and (fboundp 'treesit-available-p) (treesit-available-p))
  (require 'treesit))

(use-package treesit
  :straight (:type built-in)
  :commands treesit-font-lock-rules treesit-font-lock-recompute-features
  :when (treesit-available-p)
  :init
  (setq treesit-language-source-alist
        '((bash . ("https://github.com/tree-sitter/tree-sitter-bash"))
          (c . ("https://github.com/tree-sitter/tree-sitter-c"))
          (cmake . ("https://github.com/uyha/tree-sitter-cmake"))
          (cpp . ("https://github.com/tree-sitter/tree-sitter-cpp"))
          (css . ("https://github.com/tree-sitter/tree-sitter-css"))
          (c-sharp . ("https://github.com/tree-sitter/tree-sitter-c-sharp"))
          (go . ("https://github.com/tree-sitter/tree-sitter-go"))
          (html . ("https://github.com/tree-sitter/tree-sitter-html"))
          (java . ("https://github.com/tree-sitter/tree-sitter-java"))
          (javascript . ("https://github.com/tree-sitter/tree-sitter-javascript"))
          (json . ("https://github.com/tree-sitter/tree-sitter-json"))
          (lua . ("https://github.com/Azganoth/tree-sitter-lua"))
          (make . ("https://github.com/alemuller/tree-sitter-make"))
          (ocaml . ("https://github.com/tree-sitter/tree-sitter-ocaml" nil "ocaml/src"))
          (python . ("https://github.com/tree-sitter/tree-sitter-python"))
          (php . ("https://github.com/tree-sitter/tree-sitter-php"))
          (typescript . ("https://github.com/tree-sitter/tree-sitter-typescript" nil "typescript/src"))
          (ruby . ("https://github.com/tree-sitter/tree-sitter-ruby"))
          (rust . ("https://github.com/tree-sitter/tree-sitter-rust"))
          (sql . ("https://github.com/m-novikov/tree-sitter-sql"))
          (toml . ("https://github.com/tree-sitter/tree-sitter-toml"))
          (yaml . ("https://github.com/ikatyang/tree-sitter-yaml"))
	  (protobuf . ("https://github.com/mitchellh/tree-sitter-proto"))
          (zig . ("https://github.com/GrayJack/tree-sitter-zig"))))
  (setq major-mode-remap-alist
	'((c-mode . c-ts-mode)
	  (c++-mode . c++-ts-mode)
	  (c-or-c++-mode . c-or-c++-ts-mode)
	  (python-mode . python-ts-mode)
	  (csharp-mode . csharp-ts-mode)
	  (cmake-mode . cmake-ts-mode)
	  (dockerfile-mode . dockerfile-ts-mode)
	  (go-mode . go-ts-mode)
	  (json-mode . json-ts-mode)
	  (bash-mode . bash-ts-mode)
	  (shell-mode . bash-ts-mode)
	  (sh-mode . bash-ts-mode)
	  ;; (lua-mode . lua-ts-mode)
	  (json-mode . json-ts-mode)
	  (css-mode . css-ts-mode)
	  (java-mode . java-ts-mode)
	  (rust-mode . rust-ts-mode)
	  (ruby-mode . ruby-ts-mode)
	  (typescript-mode . typescript-ts-mode)
	  (javascript-mode . js-ts-mode)
	  (conf-toml-mode . toml-ts-mode)
	  (yaml-mode . yaml-ts-mode)))
  :config
  (add-to-list 'treesit-extra-load-path (expand-file-name "tree-sitter" user-emacs-directory))
  (defun poly/treesit-install-all-languages ()
    "Install all languages specified in `treesit-language-source-alist'."
    (interactive)
    (let ((languages (mapcar 'car treesit-language-source-alist)))
      (dolist (lang languages)
        (treesit-install-language-grammar lang)
        (message "`%s' parser was installed." lang)
        (sit-for 0.75))))
  (advice-add
   'treesit--install-language-grammar-1
   :around
   (lambda (old-function out-dir &rest arguments)
     (apply old-function (car treesit-extra-load-path) arguments)))
  :hook
  (c-ts-mode .
	     (lambda()
	       (setq-local treesit-font-lock-level 4)
	       (setq-local
		treesit-font-lock-settings
		(append
		 treesit-font-lock-settings
		 (treesit-font-lock-rules
		  :language 'c
		  :feature 'func
		  '((call_expression
		     function:
		     (identifier) @font-lock-property-face
		     arguments: (_))))))))
  (java-ts-mode .
		(lambda()
		  (setq-local
		   treesit-font-lock-settings
		   (append
		    treesit-font-lock-settings
		    (treesit-font-lock-rules
		     :language 'java
		     :feature 'expression
		     :override t
		     '((method_invocation
			name: (identifier) @font-lock-property-face)))))))
  (go-ts-mode
   .
   (lambda()
     (setq-local treesit-font-lock-level 4)
     (treesit-font-lock-recompute-features '(property bracket delimiter operator variable function attribute import import func))))
  (python-ts-mode
   .
   (lambda()
     (setq-local treesit-font-lock-level 4)
     (treesit-font-lock-recompute-features '(property bracket delimiter operator variable function attribute import))))
  ;; :custom
  ;; (treesit--font-lock-verbose t)
  )


(add-hook 'prog-mode-hook #'general-ts-mode-setup)
(add-hook 'c-ts-mode-hook #'c-ts-setup)
(add-hook 'css-ts-mode-hook 'ts-css-setup)

(defun general-ts-mode-setup ()
  (treesit-font-lock-recompute-features
   nil
   '(property bracket delimiter operator variable function)))

(defun c-ts-setup ()
  (setq-local electric-quote-comment nil)
  (setq-local electric-quote-string nil)
  (indent-tabs-mode)
  (bug-reference-prog-mode)
  (setq-local fill-paragraph-function #'ts-c-fill-paragraph)
  (treesit-font-lock-recompute-features '(emacs-devel)))

(defun ts-c-fill-paragraph (&optional arg)
  (interactive)
  (let ((node (treesit-node-at (point))))
    (when (equal (treesit-node-type node) "comment")
      (fill-region
       (treesit-node-start node) (treesit-node-end node)))
    t))

(defun ts-css-setup ()
  (treesit-font-lock-recompute-features nil '(variable function)))

(defun poly/lsp-format-buffer()
  (interactive)
  (if (bound-and-true-p lsp-mode)
      (lsp-format-buffer)
    (when (bound-and-true-p eglot--managed-mode)
      (eglot-format-buffer))))

(defun lsp-format-buffer-on-save ()
  (add-hook 'before-save-hook
	    #'poly/lsp-format-buffer -10 t))

(dolist (hook '(go-ts-mode-hook
		js-ts-mode-hook
		;; lua-mode-hook
		typescript-ts-mode-hook javascript-ts-mode-hoo))
  (add-hook hook #'lsp-format-buffer-on-save))
#+end_src

* Languages
** cc-mode
#+begin_src emacs-lisp
(use-package cc-mode
  :straight t
  :ensure t
  :mode (
	 ("\\.c\\'" . c-mode)
         ("\\.h\\'" . c-mode)
	 ("\\.cxx\\'" . c++-mode)
         ("\\.cpp\\'" . c++-mode)
         ("\\.hpp\\'" . c++-mode)
	 ("\\.x\\'" . objc-mode)
	 ("\\.xm\\'" . objc-mode)
	 ("\\.m\\'" . objc-mode)
	 ("\\.mm\\'" . objc-mode)

	 ;; ("\\.c" . c-mode)
         ;; ("\\.h" . c-mode)
         ;; ("\\.cpp" . c++-mode)
         ;; ("\\.hpp" . c++-mode)
	 ;; ("\\.h\\(h\\|xx\\|pp\\)\\'" . c++-mode)
         ;; ("\\.tpp\\'" . c++-mode)
	 )
  :custom
  (c-offsets-alist '((inline-open           . 0)
                     (brace-list-open       . 0)
                     (inextern-lang         . 0)
                     (statement-case-open   . 4)
                     (access-label          . -)
                     (case-label            . 0)
                     (member-init-intro     . +)
                     (topmost-intro         . 0)
                     (inlambda              . 0) ;; better indentation for lambda
                     (innamespace           . 0) ;; no indentation after namespace
                     (arglist-cont-nonempty . +)))
  ;; :config
  ;; (with-eval-after-load 'lsp-mode
  ;;   (setq lsp-clients-clangd-args
  ;;         '("-j=2"
  ;;           "--background-index"
  ;;           "--clang-tidy"
  ;;           "--completion-style=bundled"
  ;;           "--pch-storage=memory"
  ;;           "--suggest-missing-includes")))
  )

(use-package modern-cpp-font-lock
  :straight t
  :ensure t
  :hook (c++-mode . modern-c++-font-lock-mode))

(use-package cmake-mode
  :straight t
  :ensure t
  ;; :defines (company-backends)
  :mode (("CMakeLists\\.txt\\'" . cmake-mode)
         ("\\.cmake\\'" . cmake-mode))
  ;; :config
  ;; (with-eval-after-load 'company-mode
  ;;   (add-to-list 'company-backends 'company-cmake))
  )

;; (use-package clang-format
;;   :straight t
;;   :defer t
;;   ;; :load-path "site-lisp"
;;   :commands (clang-format-buffer)
;;   ;; :config
;;   ;; (setq clang-format-style-option "file")
;;   ;; ;; (bind-key "C-c <down>" 'clang-format-buffer c-mode-base-map)
;;   ;; :bind (:map c-mode-base-map
;;   ;;             ("C-c <down>" . clang-format-buffer)
;;   ;;             )
;;   )

(use-package cpp-auto-include
  :straight   (cpp-auto-include
               :host github
               :repo "emacsorphanage/cpp-auto-include")
  :commands (cpp-auto-include)
  )
#+end_src
** Go Language
#+begin_src emacs-lisp
(defconst go--tools
  '((goplay . "github.com/haya14busa/goplay/cmd/goplay")
    (gopls . "golang.org/x/tools/gopls")
    (dlv . "github.com/go-delve/delve/cmd/dlv")
    (impl . "github.com/josharian/impl")
    (errcheck . "github.com/kisielk/errcheck")
    (gomodifytags . "github.com/fatih/gomodifytags")
    (gogetdoc . "github.com/zmb3/gogetdoc")
    (gotests . "github.com/cweill/gotests/...")
    (goimports . "golang.org/x/tools/cmd/goimports")
    (staticcheck . ("honnef.co/go/tools/cmd/staticcheck" "master"))
    (fillstruct . "github.com/davidrjenni/reftools/cmd/fillstruct")
    (goconst . "github.com/jgautheron/goconst/cmd/goconst")
    (godoc . "golang.org/x/tools/cmd/godoc")
    (wire . "github.com/google/wire/cmd/wire")
    (gofumpt . "mvdan.cc/gofumpt")
    (revive . "github.com/mgechev/revive")
    (gocritic . "github.com/go-critic/go-critic/cmd/gocritic")
    (unparam . "mvdan.cc/unparam")
    (unused . "honnef.co/go/tools/cmd/unused")
    (ineffassign . "github.com/gordonklaus/ineffassign")
    (pet . "github.com/knqyf263/pet")
    ;; (protovalidate-go . "github.com/bufbuild/protovalidate-go")
    (protobuf-go . "google.golang.org/protobuf/cmd/protoc-gen-go")
    (protoc-gen-go-grpc . "google.golang.org/grpc/cmd/protoc-gen-go-grpc")
    (protoc-gen-grpc-gateway . "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-grpc-gateway")
    (protoc-gen-openapiv2 . ("github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2" "v2.16.0"))
    (protoc-gen-doc . "github.com/pseudomuto/protoc-gen-doc/cmd/protoc-gen-doc")
    (bufls . "github.com/bufbuild/buf-language-server/cmd/bufls")
    (buf . ("github.com/bufbuild/buf/cmd/buf" "v1.21.0"))
    (protoc-gen-buf-breaking . "github.com/bufbuild/buf/cmd/protoc-gen-buf-breaking")
    (protoc-gen-buf-lint . "github.com/bufbuild/buf/cmd/protoc-gen-buf-lint")
    (golangci-lint . "github.com/golangci/golangci-lint/cmd/golangci-lint")))

(defun poly/install-go-tool (pkg)
  "Install or update go PKG/tools."
  (unless (executable-find "go")
    (user-error "Unable to find `go' in `exec-path'!"))
  ;; (message "Installing go tool [%s] ..." (symbol-name pkg))
  (let ((pkg-repo (alist-get pkg go--tools))
	(pkg-version)
	(pkg-name (symbol-name pkg)))
    (pcase (type-of pkg-repo)
      ('cons
       (setq pkg-version (cadr pkg-repo))
       (setq pkg-repo (car pkg-repo)))
      (_
       (setq pkg-version "latest")))
    (when pkg-repo
      (let ((process (start-process "go-tool" "*Go Tool*" "go" "install" "-v" "-x" (concat pkg-repo  "@" pkg-version))))
	(process-put process 'pkg-name pkg-name)
	(set-process-sentinel
	 process
	 (lambda (proc _)
	   (let ((status (process-exit-status proc))
		 (pkg-name (process-get proc 'pkg-name)))
	     (if (= 0 status)
		 (message "%s installed successfully!" pkg-name)
	       (message "Failed to install %s." pkg-name)))))))))

(use-package go-mode
  :disabled
  :straight t
  :ensure t
  :commands (godoc gofmt gofmt-before-save)
  :after (eglot)
  :config
  ;; Optional: install eglot-format-buffer as a save hook.
  ;; The depth of -10 places this before eglot's willSave notification,
  ;; so that that notification reports the actual contents that will be saved.
  (defun eglot-format-buffer-on-save ()
    (add-hook 'before-save-hook #'eglot-format-buffer -10 t))
  (add-hook 'go-mode-hook #'eglot-format-buffer-on-save))

(unless (executable-find "gopls")
  (poly/install-go-tool 'gopls))

(use-package gorepl-mode
  :straight t
  :after go-mode
  :commands gorepl-run-load-current-file)

;; Install: See https://github.com/golangci/golangci-lint#install
(use-package flycheck-golangci-lint
  :after (flycheck)
  :hook ((go-mode go-ts-mode) .
	 (lambda()
           (flycheck-golangci-lint-setup)
           (setq flycheck-local-checkers '((lsp . ((next-checkers . (golangci-lint))))))))
  :defines flycheck-disabled-checkers
  :init
  (setenv "GO111MODULE" "on")
  :custom
  (flycheck-golangci-lint-enable-all t)
  (flycheck-golangci-lint-deadline "1m")
  ;; (flycheck-golangci-lint-enable-all t)
  (flycheck-golangci-lint-fast t)
  (flycheck-golangci-lint-config
   (expand-file-name "golangci.yml" "~/.config/golangci-lint"))
  :config
  (unless (executable-find "golangci-lint")
    (poly/install-go-tool 'golangci-lint)))

(use-package go-eldoc
  :straight t
  :after go-mode
  :ensure t
  :disabled
  :commands go-eldoc-setup
  :init
  (add-hook 'go-mode-hook #'go-eldoc-setup))

(use-package go-rename
  :straight t
  :after go-mode
  :disabled
  :ensure t
  :commands go-rename)

(use-package go-guru
  :straight t
  :after go-mode
  :disabled
  :ensure t
  :commands go-guru-hl-identifier-mode
  :init
  (add-hook 'go-mode-hook #'go-guru-hl-identifier-mode))

;; (use-package go-mod-mode
;;     :straight (:host github :repo "zkry/go-mod-mode")
;;     :ensure t
;;     :mode (("go\\.mod\\'" . go-mod-mode)))

(use-package go-tag
  :straight t
  :bind (:map go-mode-map
	      ("C-c t a" . go-tag-add)
	      ("C-c t r" . go-tag-remove))
  :init (setq go-tag-args (list "-transform" "camelcase"))
  :config
  (unless (executable-find "gomodifytags")
    (poly/install-go-tool  'gomodifytags)))

(use-package go-fill-struct
  :straight t
  :after go-mode
  :config
  ;; fillstruct - fills a struct literal with default values
  (unless (executable-find "fillstruct")
    (poly/install-go-tool 'fillstruct)))

(use-package go-dlv
  :straight t
  :after go-mode
  :config
  ;; Delve is a debugger for the Go programming language.
  (unless (executable-find "dlv")
    (poly/install-go-tool 'dlv)))

(use-package go-errcheck
  :straight t
  :disabled
  :after go-mode
  :bind (:map go-mode-map
	      ("C-c C-e" . go-errcheck))
  :config
  ;; errcheck is a program for checking for unchecked errors in Go code.
  (unless (executable-find "errcheck")
    (poly/install-go-tool 'errcheck)))

(use-package go-gen-test
  :straight t
  :bind (:map go-mode-map
	      ("C-c t g" . go-gen-test-dwim)))

(use-package go-impl
  :straight t
  :commands (go-impl)
  :after go-mode
  :config
  (unless (executable-find "impl")
    (poly/install-go-tool 'impl)))

(use-package gotest
  :straight t
  :custom
  (go-test-verbose t)
  :bind (:map go-mode-map
	      ("C-c t f" . go-test-current-file)
	      ("C-c t t" . go-test-current-test)
	      ("C-c t j" . go-test-current-project)
	      ("C-c t b" . go-test-current-benchmark)
	      ("C-c t c" . go-test-current-coverage)
	      ("C-c t x" . go-run)))

(use-package go-playground
  :straight t
  :diminish
  :commands (go-playground-mode)
  :config
  (unless (executable-find "goplay")
    (poly/install-go-tool 'goplay)))

(defun go-install-tools ()
  "Install or update go PKG/tools."
  (interactive)
  (dolist (pkg go--tools)
    (poly/install-go-tool (car pkg))))
#+end_src
* lisp

#+begin_src emacs-lisp
(use-package lisp-mode
  :straight nil
  :after paredit
  :ensure nil
  :defer t
  :config
  (defun init-lisp-mode ()
    (setq lisp-body-indent 2)
    (show-paren-mode t)
    (setq show-paren-delay 0)
    (make-variable-buffer-local 'show-paren-style)
    (setq show-paren-style 'parenthesis) ; or parenthesis/expression
    (enable-paredit-mode)
    (setq abbrev-mode t)
    (setq lisp-indent-function 'common-lisp-indent-function))
  :hook
  (lisp-mode . init-lisp-mode)
  (emacs-lisp-mode . init-lisp-mode))
#+end_src

* Lua

#+begin_src emacs-lisp
(use-package lua-mode
  :straight t
  :ensure t
  :defer t
  :custom
  (lua-indent-level 2)
  ;; (lua-indent-level tab-width)
  (lua-indent-string-contents t)
  ;; :hook (cua-mode . lua-mode)
  :interpreter (("lua" . lua-mode)
		("nse" . lua-mode)
		)
  :mode (("\\.lua$" . lua-mode) ("\\.nse$" . lua-mode))
  :config
  (autoload 'lua-mode "lua-mode" "Lua editing mode." t))
#+end_src

* Tramp

#+begin_src emacs-lisp
(use-package tramp
  :straight (:type built-in)
  :ensure t
  :custom
  (tramp-default-method "ssh")
  (remote-file-name-inhibit-cache t)
  :config
  (customize-set-variable
   'tramp-ssh-controlmaster-options
   (concat
    " -o ControlPath=~/.ssh/ControlMaster/master-%%r@%%h:%%p "
    " -o ControlMaster=auto -o ControlPersist=yes")
   )
  (add-to-list 'tramp-default-user-alist '("ssh" "10\.181\.24\.12" "jy09901"))
  (setq tramp-verbose 6)
  (setq tramp-default-user "jy09901"
	tramp-default-host "10\.181\.24\.12"))

(use-package password-cache
  :straight (:type built-in)
  :ensure nil
  :custom
  ;; Never expire passwords
  (password-cache-expiry nil))

(use-package tramp-sh
  :straight (:type built-in)
  :ensure nil
  :custom
  ;; Use out-of-band method for big files
  (tramp-copy-size-limit (* 0.5 1024 1024))
  :config
  ;; Use the PATH from the remote
  (add-to-list 'tramp-remote-path 'tramp-own-remote-path))

(use-package tramp-gvfs
  :straight (:type built-in)
  :ensure nil
  :if (not IS-MAC)
  ;; :after tramp-ftp
  :config
  ;; ;; Prefer gvfs for FTP
  ;; (add-to-list 'tramp-gvfs-methods "ftp")
  (add-to-list 'tramp-gvfs-methods "dav")
  (add-to-list 'tramp-gvfs-methods "davs"))
#+end_src

* Clojure

** clojure-mode

Use clojure-mode for basic syntax support.

#+begin_src emacs-lisp
(use-package clojure-mode
  :straight t
  :commands (clojurescript-mode)
  ;; :config
  ;; (add-hook 'clojure-mode-hook 'paredit-mode)
  )

(use-package clojure-mode-extra-font-locking
  :straight t
  :ensure t
  :after clojure-mode)

(use-package flycheck-clojure
    :straight t
    :ensure t
    :commands clojure-mode
    :config
    (flycheck-clojure-setup))
#+end_src

** Cider for REPL connection

#+begin_src emacs-lisp
(use-package cider
    :straight t
    :ensure t
    :commands cider-mode
    :custom
    (cider-print-fn 'zprint)
    :hook (cider-repl-mode . paredit-mode)
    :config
    (setq nrepl-popup-stacktraces nil)
    ;; (remove-hook 'cider-mode-hook 'cider-turn-on-eldoc-mode)
    ;; (add-hook 'cider-mode-hook 'cider-turn-on-eldoc-mode)
    ;; (add-hook 'cider-repl-mode-hook 'paredit-mode)
    )
#+end_src

** Linting with flycheck-clj-kondo

#+begin_src emacs-lisp
(use-package flycheck-clj-kondo
  :straight t
  :ensure t
  :commands clojure-mode
  :hook (clojure-mode . flycheck-mode)
  ;; :config
  ;; (flycheck-clojure-setup)
  )
#+end_src


* WEB
** vue
#+begin_src emacs-lisp
(use-package vue-mode
  :straight t
  :commands (vue-mode)
  :mode "\\.vue"
  ;; :config
  ;; (set-face-background 'mmm-default-submode-face nil)
  )
#+end_src
** web-mode
#+begin_src emacs-lisp
;; 设置缩进级别空格数
(defvar-local my/web-mode-offset 2)

(defun my/current-buffer-suffix()
  "Return suffix of current buffer."
  (nth 0 (cdr (split-string (buffer-name) "\\."))))

(defvar typescript-linter 'tslint
  "The linter to use for typescript. Possible values are `tslint' `eslint'")

;; (defun typescript/set-lsp-linter ()
;;   (pcase typescript-linter
;;     ('tslint (flycheck-add-mode 'typescript-tslint 'typescript-tsx-mode))
;;     ;; This sets tslint unconditionally for all lsp clients which is wrong
;;     ;; Must be set for respective modes only, see go layer for examples.
;;     ('eslint (flycheck-add-mode 'javascript-eslint 'typescript-tsx-mode)
;;              (flycheck-add-mode 'javascript-eslint 'typescript-mode))
;;     (_ (message
;;         "Invalid typescript-layer configuration, no such linter: %s" typescript-linter))))

;; (typescript/set-lsp-linter)

(use-package web-mode
  :straight t
  :mode (;; ("\\.js\\'" . web-mode)
	 ;; ("\\.jsx\\'" . web-mode)
	 ("\\.vue\\'" . web-mode)
	 ("\\.jinja\\'" . web-mode)
	 ("\\.tpl\\'" . web-mode)
	 ;; ("\\.tsx\\'" . web-mode)
	 ("\\.html$" . web-mode))
  :custom
  (web-mode-markup-indent-offset 2)
  (web-mode-css-indent-offset 2)
  (web-mode-code-indent-offset 2)
  (web-mode-block-padding 2)
  (web-mode-comment-style 2)
  (web-mode-enable-css-colorization t)
  (web-mode-enable-auto-pairing t)
  (web-mode-enable-comment-keywords t)
  (web-mode-enable-current-element-highlight t)
  (js2-basic-offset 2)
  (js-indent-level 2)
  (sgml-basic-offset 2)
  :config
  (defun open-html-file ()
    "Open current html file in default browser."
    (interactive)
    (shell-command-on-region
     (point-min)
     (point-max)
     (concat "open " (buffer-file-name))
     "*open*"))
  ;; (global-set-key (kbd "C-c h") 'open-html-file)
  )

(use-package emmet-mode
  :after(web-mode js2-mode)
  :config
  (add-hook 'sgml-mode-hook 'emmet-mode)
  (add-hook 'css-mode-hook  'emmet-mode)
  (add-hook 'web-mode-hook  'emmet-mode)
  (add-hook 'emmet-mode-hook (lambda () (setq emmet-indent-after-insert nil)))
  (add-hook 'emmet-mode-hook (lambda () (setq emmet-indentation 2)))
  (setq emmet-expand-jsx-className? t)
  ;; Make `emmet-expand-yas' not conflict with yas/mode
  (setq emmet-preview-default nil))
#+end_src

** tidy
#+begin_src emacs-lisp
(defun my/setup-tide-mode ()
  "Setup tide mode used in \\<keymap\\>>."
  (interactive)
  (tide-setup)
  (flycheck-mode +1)
  (setq flycheck-check-syntax-automatically '(save mode-enabled))
  (eldoc-mode +1)
  (tide-hl-identifier-mode +1)
  ;; company is an optional dependency. You have to
  ;; install it separately via package-install
  ;; `M-x package-install [ret] company`
  ;; (company-mode +1)
  )

(defun poly/tide-before-save ()
  "Auto format for tide."
  (interactive)
  (unless (string-suffix-p ".tsx" (buffer-file-name))
    ;; (when (bound-and-true-p eglot-mode)
    ;;   (print "eglot-mode format")
    ;;   (eglot-format-buffer))
    (tide-format-before-save)
    )
  ;; (if (bound-and-true-p eglot-mode)
  ;;     (eglot-format-buffer))
  )

;; (defun poly/tide-after-save ()
;;   "Auto format for tide."
;;   (interactive)
;;   ;; (if (string-suffix-p ".tsx" (buffer-file-name))
;;   ;;     (me/pretty-quick))
;;   )

(use-package tide
  :straight t
  :commands tide-setup
  :hook
  (before-save . poly/tide-before-save)
  (typescript-mode . tide-hl-identifier-mode)
  (typescript-mode . my/setup-tide-mode)
  :after web-mode
  :custom
  (typescript-indent-level 2)
  (tide-format-options '(:indentSize 2 :tabSize 2)))
#+end_src

** typescript
#+begin_src emacs-lisp :tangle no
(use-package typescript-mode
  :straight t
  :init
  (define-derived-mode typescript-tsx-mode typescript-mode "tsx")
  :custom
  (typescript-indent-level 2)
  :hook
  ((typescript-mode . subword-mode)
   ;; (typescript-mode . lsp)
   (typescript-mode . (lambda ()
			(require 'tide)
			(tide-setup))))
  :mode
  ("\\.tsx?\\'" . typescript-tsx-mode))
#+end_src

** prettier-js
#+begin_src emacs-lisp :tangle no
(use-package prettier-js
  :straight t
  :commands (prettier-js-mode prettier)
  :custom
  (prettier-target-mode "js-mode")
  (prettier-js-args
   '("--trailing-comma" "all" "--single-quote" "--semi" "--arrow-parens" "always"))
  :hook ((js-mode . prettier-js-mode)
	 (typescript-mode . prettier-js-mode)
	 (web-mode . prettier-js-mode)))
#+end_src

** js-mode
#+begin_src emacs-lisp :tangle no
(use-package js
  :straight (:type built-in)
  :mode ("\\.js$" . js-mode)
  :hook
  (;; (js-mode . lsp)
   (js-mode . (lambda ()
		(require 'tide)
		(tide-setup)))))
#+end_src

** tagedit

#+begin_src emacs-lisp
(use-package tagedit
  :straight t
  :ensure t
  :commands tagedit-mode
  :config
  (tagedit-add-paredit-like-keybindings)
  ;; (add-hook 'web-mode-hook 'tagedit-mode)
  :hook
  (((sgml-mode html-mode) . tagedit-mode)))
#+end_src

** HTML
#+begin_src emacs-lisp
#+end_src

** Emmet
#+begin_src emacs-lisp
#+end_src

** protobuf

#+begin_src emacs-lisp
(use-package protobuf-mode
  :straight t
  :defer 1
  :config
  (defconst my-protobuf-style
    '((c-basic-offset . 2)
      (indent-tabs-mode . nil)))
  (add-hook 'protobuf-mode-hook (lambda () (c-add-style "my-style" my-protobuf-style t))))

(use-package flycheck-buf-lint
  :straight t
  :init
  (push 'buf-lint flycheck-checkers)
  :config
  (defun poly/flycheck-buf-lint-setup()
    (flycheck-buf-lint-setup))
  :hook (protobuf-mode . poly/flycheck-buf-lint-setup))
#+end_src

** python

#+begin_src emacs-lisp
(setq python-python-command "/opt/local/bin/python")
(setq py-force-py-shell-name-p t)
#+end_src

** rust

#+begin_src emacs-lisp
(use-package rustic
  :mode ("\\.rs\\'" . rustic-mode)
  :bind (:map rustic-mode-map
              ("C-c C-c s" . lsp-rust-analyzer-status)
              ("s-r" . rustic-cargo-run))
  :init
  (setq rustic-lsp-server 'rust-analyzer)
   :config
  ;; uncomment for less flashiness
  ;; (setq lsp-eldoc-hook nil)
  ;; (setq lsp-enable-symbol-highlighting nil)
  ;; (setq lsp-signature-auto-activate nil)

  ;; comment to disable rustfmt on save
  ;; (setq rustic-format-on-save nil)
  ;; (add-hook 'rustic-mode-hook 'rk/rustic-mode-hook)
   )

(defun rk/rustic-mode-hook ()
  ;; so that run C-c C-c C-r works without having to confirm, but don't try to
  ;; save rust buffers that are not file visiting. Once
  ;; https://github.com/brotzeit/rustic/issues/253 has been resolved this should
  ;; no longer be necessary.
  (when buffer-file-name
    (setq-local buffer-save-without-query t)))

(use-package rust-playground)

(use-package flycheck-rust)

(with-eval-after-load 'rust-mode
  (add-hook 'flycheck-mode-hook #'flycheck-rust-setup))
#+end_src

** imenu-list

#+begin_src emacs-lisp
(use-package imenu-list
  :straight t)
#+end_src
