#+title: ui

#+begin_src emacs-lisp
  ;;; -*- lexical-binding: t -*-
#+end_src

** Core UI configuration
#+begin_src emacs-lisp


  ;; Hide the mouse while typing:
  (setq make-pointer-invisible t)

  (when EMACS27+
    ;; very long line performence optimizy
    (global-so-long-mode t))

  ;;; highlight current line
  (global-hl-line-mode)

  ;; Removes *scratch* from buffer after the mode has been set.
  (defun remove-scratch-buffer ()
    (if (get-buffer "*scratch*")
        (kill-buffer "*scratch*")))
  (add-hook 'after-change-major-mode-hook 'remove-scratch-buffer)

  ;; ;; auto maximized frame
  ;; (when (and IS-MAC IS-GUI)
  ;;   (add-to-list 'default-frame-alist '(fullscreen . maximized)))

  (when IS-MAC
    (setq frame-resize-pixelwise t
    mac-command-modifier 'super
    mac-option-modifier  'meta)
    (when (featurep 'ns)
      (setq ns-use-thin-smoothing t
            ns-use-fullscreen-animation t
            ns-use-native-fullscreen t
            ns-use-proxy-icon t
            ns-use-mwheel-momentum t
            ns-use-mwheel-acceleration t)
      ;; (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
      ;; (add-to-list 'default-frame-alist '(ns-appearance . dark))
      ))

  ;; Symbol’s value as variable is void: mouse-wheel-down-event
  (when (require 'mwheel nil 'noerror)
    ;; scroll two lines at a time (less "jumpy" than defaults)
    (setq mouse-wheel-scroll-amount
          '(1                                 ; 一次只滚动 1 行
            ((shift) . 2)                     ; 按住 Shift 滚动 2 行
            ((control). 3))                   ; 按住 Ctrl 滚动 3 行
          mouse-wheel-progressive-speed nil ;; don't accelerate scrolling
          mouse-wheel-follow-mouse 't ;; scroll window under mouse
          scroll-preserve-screen-position 't ;; 鼠标滚动的时候保持光标在屏幕中的位置不变
          scroll-step 2) ;; keyboard scroll two lines at a time
    (mouse-wheel-mode t)
    ;; Better scrolling with mouse wheel/trackpad.
    (unless (and (boundp 'mac-mouse-wheel-smooth-scroll) mac-mouse-wheel-smooth-scroll)
      (global-set-key [wheel-down] (lambda () (interactive) (scroll-up-command 1)))
      (global-set-key [wheel-up] (lambda () (interactive) (scroll-down-command 1)))
      (global-set-key [double-wheel-down] (lambda () (interactive) (scroll-up-command 2)))
      (global-set-key [double-wheel-up] (lambda () (interactive) (scroll-down-command 2)))
      (global-set-key [triple-wheel-down] (lambda () (interactive) (scroll-up-command 4)))
      (global-set-key [triple-wheel-up] (lambda () (interactive) (scroll-down-command 4)))))

  ;; Clear Window clutter and set up the look and feel
  (when (and (fboundp 'menu-bar-mode) (not (eq menu-bar-mode -1)))
    (menu-bar-mode -1))
  (when (and (fboundp 'tool-bar-mode) (not (eq tool-bar-mode -1)))
    (tool-bar-mode -1))
  (when (and (fboundp 'scroll-bar-mode) (not (eq scroll-bar-mode -1)))
    (scroll-bar-mode -1))
  (when (and (fboundp 'horizontal-scroll-bar-mode) (not (eq horizontal-scroll-bar-mode -1)))
    (scroll-bar-mode -1))

  (when (and (fboundp 'use-file-dialog) (not (eq use-file-dialog -1)))
    (use-file-dialog -1))
  (when (and (fboundp 'use-dialog-box) (not (eq use-dialog-box -1)))
    (use-dialog-box -1))
  (when (and (fboundp 'blink-cursor-mode) (not (eq blink-cursor-mode -1)))
    (blink-cursor-mode -1))

  ;; emacs 28 new feature, CJK word breaking lines
  (when (boundp 'word-wrap-by-category)
    (setq word-wrap-by-category t))

  ;; ;; Display visited file's path in the frame title
;; ;; @See http://emacsredux.com/blog/2013/04/07/display-visited-files-path-in-the-frame-title/
;; (setq frame-title-format
;;       `((:eval (if (buffer-file-name)
;;                    (abbreviate-file-name (buffer-file-name))
;;                  "%b"))))

(setq frame-title-format '(multiple-frames "%b"
					   ("" invocation-name "@" system-name)))

;; Activate winner mode for quickly changing window sizes, etc
(when (fboundp 'winner-mode)
  (winner-mode 1))

  (setq mode-line-compact 'long)
#+end_src

**  since emacs 28

#+begin_src emacs-lisp
  (setq use-short-answers t)
  (setq create-lockfiles nil)
#+end_src

***  initial frame
#+begin_src emacs-lisp

  ;; Disable most GUI widgets early on
  (setq default-frame-alist '((horizontal-scroll-bars . nil)
                              (alpha . (0.90 0.90))
                              (ns-appearance . dark)
                              (ns-transparent-titlebar . t)
                              (drag-internal-border . 1)
                              (drag-with-tab-line . t)
                              (internal-border-width . 0)
                              ;; (internal-border-width . 5)
                              (vertical-scroll-bars . nil)
                              (menu-bar-lines . 0)
                              (tool-bar-lines . 0)
                              (fullscreen . maximized)
                              (height . 50)
                              (width . 95)
                              (undecorated . t) ;; remove title bar
                              ))
#+end_src

** Font

#+begin_src emacs-lisp
(setq +font-family "Fira Code")

;; (poly/font-exist-p +font-family)

;; (setq +ufont-family "Sarasa Mono SC")
(defvar +ufont-family "PingFang SC") ;; chinese font
(setq +fixed-pitch-family "Sarasa Mono SC")
(setq +variable-pitch-family "Sarasa Mono SC")

(defun poly/font-exist-p (fontname)
  "test if this font is exist or not."
  (when (and fontname (not (string= fontname "")))
    (when (x-list-fonts fontname) t)))

(setq english-font-size 12)
(setq chinese-font-size 14)

(defun +load-font (&optional frame)
  (interactive)
  (setq english-fonts `(,+font-family))
  (setq chinese-fonts `(,+ufont-family))
  (set-face-attribute 'default nil
		      ;; (format "%s-%d" (car english-fonts) 12)
                      :font (format "%s:pixelsize=%d" (car english-fonts) english-font-size) ;; 11 13 17 19 23
		      )
  (dolist (charset '(kana han symbol cjk-misc bopomofo))
    (set-fontset-font  nil ;; (frame-parameter nil 'font)
		       charset
		       (font-spec :family +ufont-family
				  ;; (car chinese-fonts)
				  :size chinese-font-size))) ;; 14 16 20 22 28
  (set-face-attribute 'variable-pitch nil :font (format "%s-%d" +ufont-family chinese-font-size))
  (set-face-attribute 'fixed-pitch nil :font (format "%s-%d" +ufont-family chinese-font-size))

  ;; (setq face-font-rescale-alist `((,+ufont-family . 1.2)))
  ;; (setq face-font-rescale-alist `((,+ufont-family . 1.24)))

  ;; emoji
  (when IS-MAC
    (if (version< "27.0" emacs-version)
	(set-fontset-font "fontset-default" 'unicode "Apple Color Emoji" nil 'prepend)
      (set-fontset-font t 'symbol (font-spec :family "Apple Color Emoji" :size 13) nil 'prepend)))

  ;; (let* ((font-spec (format "%s-%d" +font-family +font-size))
  ;;        (variable-pitch-font-spec (format "%s-%d" +variable-pitch-family +font-size))
  ;;        (fixed-pitch-font-spec (format "%s-%d" +fixed-pitch-family +font-size)))
  ;;   (set-fontset-font nil nil (font-spec :family +font-family
  ;;           :size +font-size
  ;;           :width 'normal
  ;;           ) frame)
  ;;   ;; (set-frame-font font-spec frame)
  ;;   (set-face-attribute 'variable-pitch nil :font variable-pitch-font-spec)
  ;;   (set-face-attribute 'fixed-pitch nil :font fixed-pitch-font-spec))
  ;; (+load-ext-font)
  )

(when (IS-GUI)
  (+load-font nil))

(add-hook 'after-init-hook
	  (lambda ()
	    (when (IS-GUI)
	      (+load-font nil))))

;; (add-hook 'telega-root-mode-hook '+load-font)
(add-hook 'after-init-hook
	  (lambda ()
	    (when (IS-GUI)
	      (+load-font nil))))
#+end_src

** ligatures

enable ligatures with emacs-mac, must install font first

#+begin_src emacs-lisp
(when (fboundp 'mac-auto-operator-composition-mode)
  ;; Function available in railwaycat Emacs only:
  ;; `mac-auto-operator-composition-mode' automatically composes
  ;; consecutive occurrences of characters consisting of the elements
  ;; of `mac-auto-operator-composition-characters' if the font
  ;; supports such a composition.
  (mac-auto-operator-composition-mode t))
#+end_src
