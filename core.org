#+title: Core

Core configuration of poly emacs, global variable declare.

#+begin_src emacs-lisp
  ;;; -*- lexical-binding: t -*-
#+end_src

* Core
** const declare
#+begin_src emacs-lisp
(defconst EMACS27+   (> emacs-major-version 26))
(defconst IS-MAC     (eq system-type 'darwin))
(defconst IS-LINUX   (eq system-type 'gnu/linux))
(defconst IS-WINDOWS (memq system-type '(cygwin windows-nt ms-dos)))
(defconst IS-BSD     (or IS-MAC (eq system-type 'berkeley-unix)))
(defconst IS-GUI (display-graphic-p))
(defconst IS-CONSOLE (not IS-GUI))
(defconst poly/emacs-pid (emacs-pid))
(defconst poly/emacs-pid-str (number-to-string poly/emacs-pid))
(defconst IS-AARCH64
  (string-match-p "aarch64-apple-darwin.+" system-configuration)
  "Whether apple arm chip")
#+end_src

** Core function

#+begin_src emacs-lisp
 ;;; Directories/files
(defconst poly-emacs-dir
  (eval-when-compile (file-truename user-emacs-directory))
  "The path to the currently loaded .emacs.d directory. Must end with a slash.")

(defconst poly-site-lisp-dir (concat poly-emacs-dir "site-lisp/"))

(defconst poly-local-dir
  (let ((localdir (getenv "POLYLOCALDIR")))
    (if localdir
	(expand-file-name (file-name-as-directory localdir))
      (expand-file-name ".local/" poly-emacs-dir)))
  "Root directory for local storage.
 Use this as a storage location for this system's installation of Doom Emacs.
 These files should not be shared across systems. By default, it is used by
 `doom-etc-dir' and `doom-cache-dir'. Must end with a slash.")

(defconst poly-etc-dir (concat poly-local-dir "etc/")
  "Directory for non-volatile local storage.
 Use this for files that don't change much, like server binaries, external
 dependencies or long-term shared data. Must end with a slash.")


(defconst poly-cache-dir (concat poly-local-dir (if IS-LINUX "cache-linux/" "cache/"))
  "Directory for volatile local storage.
 Use this for files that change often, like cache files. Must end with a slash.")

(defconst poly-autoload-dir (expand-file-name "autoload/" poly-emacs-dir)
  "Directory for autoload files.")

(defvar poly-pdump-load-path nil
  "The load-path backup before dump.
 This variable is non-nil when emacs is started with dump file.")

(defvar poly-pdump-packages '(cl-lib)
  "A list of package names to dump.")

(defun poly-pdump-packages (&rest pkgs)
  "Mark pkgs should be dumped."
  (dolist (pkg pkgs)
    ;; (push pkg poly-pdump-packages)
    (cl-pushnew pkg poly-pdump-packages :test #'string=)))

(defvar poly-use-package-always-pdump t
  "always set :pdump to use-package")

(defvar poly-use-lsp-mode t
  "use lsp-mode for completion")

(defvar poly-vscode-extensions-json-file
  (expand-file-name ".vscode/extensions/extensions.json" "~")
  "vscode extensions.json file path")

(defconst poly-vscode-app-install-path
  "/Applications/Visual Studio Code.app"
  "VSCode app install path")

(defconst poly-vscode-app-extension-path
  (expand-file-name "Contents/Resources/app/extensions" poly-vscode-app-install-path)
  "VSCode app extension path")

(defvar poly-vterm-directory-cached ""
  "vterm cached directory")

(defvar poly-use-company nil
  "use company for completion"
  )

(defvar poly-enable-native-comp t
  "Enable native compilation")

(defvar poly-org-config-file-list
  '(private editor writing programming addons)
  "Org config file list")

;; (defconst poly/using-native-comp (fboundp 'native-comp-available-p)
;;   ;; for native comp branch
;;   )
(defconst poly/using-native-comp
  (and poly-enable-native-comp (fboundp 'native-comp-available-p))
  ;; native compilation
  )

;; (when (boundp 'comp-deferred-compilation)
;;   (setq comp-deferred-compilation t))

;;; Scrolling
;; Fix the whole huge-jumps-scrolling-between-windows nastiness.
(setq scroll-conservatively 4)
;; Don't hscroll unless needed.
(setq hscroll-margin 1)
;; Start scrolling when 2 lines from top/bottom.  Set to 0 on systems where I
;; use ansi-term a lot.  Eshell is okay with this.  Disabling by default.
;; (setq scroll-margin 2)
;; Keeps the cursor in the same relative row during pgups and downs.
(setq scroll-preserve-screen-position t)

;;; Mouse wheel scrolling
;; Scroll in 1-line increments for the buffer under pointer.
(setq mouse-wheel-follow-mouse t)
(setq mouse-wheel-scroll-amount '(1 ((shift) . 1)))

;; Make cursor stay in the same column when scrolling using pgup/dn.
;; Previously pgup/dn clobbers column position, moving it to the beginning of
;; the line.
;; http://www.dotemacs.de/dotfiles/ElijahDaniel.emacs.html
(defadvice scroll-up (around ewd-scroll-up first act)
  "Keep cursor in the same column."
  (let ((col (current-column)))
    ad-do-it
    (move-to-column col)))
(defadvice scroll-down (around ewd-scroll-down first act)
  "Keep cursor in the same column."
  (let ((col (current-column)))
    ad-do-it
    (move-to-column col)))
#+end_src


** core lib

#+begin_src emacs-lisp
(require 'subr-x)

(defun load-expand(filename)
  (load(expand-file-name filename)))

;; attempt to load a feature/library, failing silently
(defvar missing-packages-list nil
  "List of packages that `try-require' can't find.")

;; (defmacro watcher:try-load (module)
;;   "Try to load the given module, logging an error if unable to load"
;;   `(condition-case ex
;;        (require ,module)
;;      ('error
;;       (message "watcher: Unable to load [%s] module: %s" ,module ex))))

(defun eval-after-load-all (my-features form)
  "Run FORM after all MY-FEATURES are loaded.
See `eval-after-load' for the possible formats of FORM."
  (if (null my-features)
      (if (functionp form)
	  (funcall form)
	(eval form))
    (eval-after-load (car my-features)
      `(lambda ()
	 (eval-after-load-all
	  (quote ,(cdr my-features))
	  (quote ,form))))))


(cl-defmacro after-load (pkgs &body body)
  "Waits until all packages are loaded before evaluating body.
Example:
(after-load (ivy counsel projectile)
  (do-stuff))
Expands to:
(with-eval-after-load \"ivy\"
  (with-eval-after-load \"counsel\"
    (with-eval-after-load \"projectile\"
      ...)))"
  (declare (indent 1))
  (if pkgs
      `(with-eval-after-load ,(symbol-name (car pkgs))
         (after-load ,(cdr pkgs) ,@body))
    `(progn ,@body)))

(defun try-require (feature)
  "Attempt to load a library or module. Return true if the
library given as argument is successfully loaded. If not, instead
of an error, just add the package to a list of missing packages."
  (condition-case err
      ;; protected form
      (progn
        (message "Checking for library `%s'..." feature)
        (if (stringp feature)
            (load-library feature)
          (require feature))
        (message "Checking for library `%s'... Found" feature))
    ;; error handler
    (file-error  ; condition
     (progn
       (message "Checking for library `%s'... Missing" feature)
       (add-to-list 'missing-packages-list feature 'append))
     nil)))

(defmacro require-soft (feature &optional file)
  "*Try to require FEATURE, but don't signal an error if 'require' fails."
  `(require ,feature ,file 'noerror))

;;{Ensure Executables};
;; Add any executables that must be found
(defun ensure-executable (exec)
  (unless (executable-find exec)
    (message (concat exec " not found in exec-path"))))

(defmacro when-available (func foo)
  "*Do something if FUNCTION is available."
  `(when (fboundp ,func) ,foo))

;;; timestamps in *Messages*
(defun current-time-microseconds ()
  (let* ((nowtime (current-time))
         (now-ms (nth 2 nowtime)))
    (concat (format-time-string "[%Y-%m-%dT%T" nowtime) (format ".%d] " now-ms))))

(defmacro Î· (fnc)
  "Return function that ignores its arguments and invokes FNC."
  `(lambda (&rest _rest)
     (funcall ,fnc)))

(defadvice message (before test-symbol activate)
  (if (not (string-equal (ad-get-arg 0) "%s%s"))
      (let ((deactivate-mark nil)
            (inhibit-read-only t))
	(with-current-buffer "*Messages*"
          (goto-char (point-max))
          (if (not (bolp))
              (newline))
          (insert (current-time-microseconds)))
        )))
;;
;;; Public library

(defun poly-unquote (exp)
  "Return EXP unquoted."
  (declare (pure t) (side-effect-free t))
  (while (memq (car-safe exp) '(quote function))
    (setq exp (cadr exp)))
  exp)

;; (defun poly-region-active-p ()
;;   "Return non-nil if selection is active.
;; Detects evil visual mode as well."
;;   (declare (side-effect-free t))
;;   (or (use-region-p)
;;       (and (bound-and-true-p evil-local-mode)
;;            (evil-visual-state-p))))


(defun poly-keyword-name (keyword)
  "Returns the string name of KEYWORD (`keywordp') minus the leading colon."
  (declare (pure t) (side-effect-free t))
  (cl-check-type keyword keyword)
  (substring (symbol-name keyword) 1))

(defmacro poly-log (format-string &rest args)
  "Log to *Messages* if `poly-debug-mode' is on.
Does not interrupt the minibuffer if it is in use, but still logs to *Messages*.
Accepts the same arguments as `message'."
  `(when poly-debug-mode
     (let ((inhibit-message (active-minibuffer-window)))
       (message
        ,(concat (propertize "POLY " 'face 'font-lock-comment-face)
                 ;; (when (bound-and-true-p poly--current-module)
                 ;;   (propertize
                 ;;    (format "[%s/%s] "
                 ;;            (poly-keyword-name (car poly--current-module))
                 ;;            (cdr poly--current-module))
                 ;;    'face 'warning))
                 format-string)
        ,@args))))

;; ;;
;; ;; Growl (Mac OS X only)
;; ;;
;; (defun growl-notify (message &optional title)
;;   "Display a Growl MESSAGE. The optional TITLE's default value is \"Emacs\"."
;;   (interactive "Message: ")
;;   (let ((g-title (if (and title (not (eq title ""))) title "Emacs")))
;;     (shell-command
;;      (concat
;;       "growlnotify"
;;       " --image /Applications/MacPorts/EmacsMac.app/Contents/Resources/Emacs.icns"
;;       " --title " (shell-quote-argument g-title)
;;       " --message " (shell-quote-argument message)))))

(defun terminal-notify (message &optional title)
  "Display a Notify MESSAGE. The optional TITLE's default value is \"Emacs\"."
  (interactive "Message: ")
  (let* ((g-title (if (and title (not (eq title ""))) title "Emacs"))
	 (notify-command (string-join `("terminal-notifier"
					"-ignoreDnD"
					;; "-appIcon"
					;; "file://Applications/MacPorts/EmacsMac.app/Contents/Resources/Emacs.icns"
					"-title" ,(shell-quote-argument g-title)
					;; "-sender" ,(shell-quote-argument "org.gnu.Emacs")
					;; "-sender" ,(shell-quote-argument "com.apple.Reminders")
					"-sender" ,(shell-quote-argument "org.hammerspoon.Hammerspoon")
					"-message" ,(shell-quote-argument message))
				      " ")))
    (shell-command notify-command)))
#+end_src

** ui
#+begin_src emacs-lisp
;; ;;; Automatic Optimization
(defvar gc-cons-threshold-original gc-cons-threshold)
;; ;; (setq gc-cons-threshold-original gc-cons-threshold)
(setq gc-cons-threshold (* 1024 1024 100))
(setq file-name-handler-alist-original file-name-handler-alist)
(setq inhibit-compacting-font-caches nil)
(setq file-name-handler-alist nil)
;; (run-with-idle-timer 5 t #'garbage-collect)
(run-with-idle-timer 5 nil
		     (lambda ()
		       (setq gc-cons-threshold gc-cons-threshold-original)
		       (setq file-name-handler-alist file-name-handler-alist-original)
		       (makunbound 'gc-cons-threshold-original)
		       (makunbound 'file-name-handler-alist-original)))

;; Package initialize occurs automatically, before `user-init-file' is
;; loaded, but after `early-init-file'. We handle package
;; initialization, so we must prevent Emacs from doing it early!
;; Disable Emacs 27's automatic package.el initialization before the init.el
;; file is loaded. I use straight.el instead of package.el.
(setq package-enable-at-startup nil)

;; ;; In noninteractive sessions, prioritize non-byte-compiled source files to
;; ;; prevent the use of stale byte-code. Otherwise, it saves us a little IO time
;; ;; to skip the mtime checks on every *.elc file.
;; (setq load-prefer-newer noninteractive)
(setq load-prefer-newer nil)

;; ;; In Emacs 27+, package initialization occurs before `user-init-file' is
;; ;; loaded, but after `early-init-file'. Doom handles package initialization, so
;; ;; we must prevent Emacs from doing it early!
;; (setq package-enable-at-startup nil)
;; (advice-add #'package--ensure-init-file :override #'ignore)
#+end_src


** theme

#+begin_src emacs-lisp
(add-to-list 'load-path
	     (expand-file-name "themes" user-emacs-directory))

(defun poly/reload-theme()
  "Reload theme."
  (interactive)
  (require 'poly-dark-theme)
  (load-theme 'poly-dark t)

  ;; (require 'vitesse-theme)
  ;; (load-theme 'vitesse t)
  ;; (load-theme 'phoebe t)
  ;; (require 'catppuccin-theme)
  ;; (setq catppuccin-flavor 'latte)
  ;; (setq catppuccin-flavor 'macchiato)
  ;; (setq catppuccin-flavor 'frappe)
  ;; (load-theme 'catppuccin t)
  )

(poly/reload-theme)
#+end_src

** gc timer

#+begin_src emacs-lisp
;; http://akrl.sdf.org/
(defmacro my/timer (&rest body)
  "Measure and return the time it takes evaluating BODY."
  `(let ((time (current-time)))
     ,@body
     (float-time (time-since time))))

;; When idle for 30s run the GC no matter what.
(defvar my/gc-timer
  (run-with-idle-timer 30 t
		       (lambda ()
                         (let ((inhibit-read-only t)
                               (gc-msg (format "Garbage Collector has run for %.06fsec"
                                               (my/timer (garbage-collect)))))
                           (with-current-buffer "*Messages*"
	                     (insert gc-msg "\n"))))))
#+end_src


** some useful functions

#+begin_src emacs-lisp
(defmacro poly/json-decode (str)
  "Read json string STR.  and return the decoded object."
  (if (progn
        (require 'json)
        (fboundp 'json-parse-string))
      `(json-parse-string ,str
                          :array-type 'array
                          :object-type 'plist
                          :null-object nil
                          :false-object :json-false)
    `(let ((json-array-type 'vector)
           (json-object-type 'plist)
           (json-false nil))
       (json-read-from-string ,str))))

(defmacro poly/json-encode (params)
  (if (progn
        (require 'json)
        (fboundp 'json-serialize))
      `(json-serialize ,params
                       :null-object nil
                       :false-object :json-false)
    `(let ((json-false :json-false))
       (json-encode ,params))))

(defun poly/file-read-all (filename)
  "Return the contents of FILENAME."
  (with-temp-buffer
    (insert-file-contents filename)
    (buffer-string)))

;; https://github.com/ahmadseleem/ViMacs/blob/1967b49676c70a2de9937278b8fa9e2c737c6a00/git.el#L82
(defun poly/git-repo? (directory)
  "Return true if there is a git repo in DIRECTORY, false otherwise."
  (or
   (f-dir? (f-expand ".git" directory))
   (and
    (f-dir? (f-expand "info" directory))
    (f-dir? (f-expand "objects" directory))
    (f-dir? (f-expand "refs" directory))
    (f-file? (f-expand "HEAD" directory)))))

(defun icons-displayable-p ()
  "Return non-nil if icons are displayable."
  (or (featurep 'nerd-icons)
      (require 'nerd-icons nil t)))

(defun poly/dir-local-variable (dir var)
  "Get DIR local variable VAR with symbol (e.g. `compile-command)."
  (let* ((dir-locals (dir-locals-read-from-dir dir))
	 (class-variables (dir-locals-get-class-variables dir-locals))
	 (local-vars)
	 (var-value))
    (dolist (class-var class-variables)
      (setq local-vars (cdr class-var))
      (when-let ((cons-value (assoc var local-vars)))
	(setq var-value (cdr cons-value))))
    var-value))

#+end_src


** vscode

#+begin_src emacs-lisp
(defun poly/vscode-extension-info(name)
  (when poly-vscode-extensions-json-file
    (when-let* ((json-content (poly/file-read-all poly-vscode-extensions-json-file))
		(extensions (poly/json-decode json-content))
		(extention (cl-find-if
		  (lambda (it) (when-let* ((identifier (plist-get it :identifier))
					   (lang-id (plist-get identifier :id)))
				 (equal lang-id name)
				 )
		    ) extensions))
		)
            extention)))

(defun poly/vscode-extension-install-path (name)
  (when-let* ((extention (poly/vscode-extension-info name))
	      (location (plist-get extention :location)))
    (plist-get location :path)))

;; (poly/vscode-extension-install-path "sumneko.lua")
#+end_src

** hammerspoon

send [[https://www.hammerspoon.org/docs/hs.urlevent.html][urlevent]] to hammerspoon, required by org-clock & pomo

 https://github.com/deftsp/.emacs.d/blob/fe38ec59ae630c5b88df9d10f40e33a2159113fb/lisp/50hammerspoon.el

#+begin_src emacs-lisp
(defun tl/open-hammerspoon-url (event &rest params)
  (let ((len (length params))
	(url (concat "hammerspoon://" event)))
    (when (> len 0)
      (if (zerop (% len 2))
	  (let ((querys (--reduce (format "%s&%s" acc it)
				  (-map (lambda (l)
					  (format "%s=%s" (url-encode-url (car l)) (url-encode-url (cadr l))))
					(-partition-all 2 params)))))
	    (setq url (concat url "?" querys)))
	(error "illegal hammerspoon params")))
    (unless (file-remote-p default-directory)
    (tl/with-suppress-message "Shell command succeeded with"
      (shell-command (format "open -g \"%s\""
			       url))))))

;; (defun tl/notify-hammerspoon-did-init ()
;;   (tl/open-hammerspoon-url "emacs_did_init"))

;; (add-hook 'after-init-hook #'tl/notify-hammerspoon-did-init t)

;; (defun tl/notify-hammerspoon-did-kill ()
;;   (tl/open-hammerspoon-url "emacs_did_kill"))

;; (add-hook 'kill-emacs-hook #'tl/notify-hammerspoon-did-kill t)
#+end_src
