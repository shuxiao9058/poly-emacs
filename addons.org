#+title: Addons

Configuration for addons, additional features provided by individual packages.

#+begin_src emacs-lisp
  ;;; -*- lexical-binding: t -*-
#+end_src

* Line numbers with display-line-numbers-mode

#+begin_src emacs-lisp
(defun should-use-minimum-resource ()
  (and buffer-file-name
       (string-match-p "\.\\(mock\\|min\\)\.js" buffer-file-name)))

;; http://stackoverflow.com/questions/3875213/turning-on-linum-mode-when-in-python-c-mode
(setq linum-mode-inhibit-minor-modes-list
      '(ein:notebook-mode))

(setq linum-mode-inhibit-modes-list
      '(eshell-mode
	shell-mode
	profiler-report-mode
	ffip-diff-mode
	dictionary-mode
	erc-mode
	dired-mode
	help-mode
	text-mode
	fundamental-mode
	jabber-roster-mode
	jabber-chat-mode
	inferior-js-mode
	inferior-python-mode
	ivy-occur-grep-mode ; better performance
	ivy-occur-mode ; better performance
	twittering-mode
	compilation-mode
	weibo-timeline-mode
	woman-mode
	;; ein:notebook-mode
	python-mode
	Info-mode
	calc-mode
	calc-trail-mode
	comint-mode
	gnus-group-mode
	gud-mode
	;; org-mode
	markdown-mode
	vc-git-log-edit-mode
	log-edit-mode
	vterm-mode
	term-mode
	eat-mode
	w3m-mode
	speedbar-mode
	mu4e-main-mode
	mu4e-headers-mode
	mu4e-view-mode
	mu4e-compose-mode
	gnus-summary-mode
	mu4e-article-mode
	gnus-article-mode
	notmuch-show-mode
	notmuch-hello-mode
	notmuch-search-mode
	company-mode
	magit-status-mode
	messages-buffer-mode
	calendar-mode
	treemacs-mode
	telega-chat-mode
	cfw:calendar-mode
	telega-root-mode))

(cond
 ;; ((fbounp 'linum-mode))
 (;; nil
  (fboundp 'global-display-line-numbers-mode)
  (defun display-line-numbers-mode-hook-setup ()
    (setq display-line-numbers (if (or (memq major-mode linum-mode-inhibit-modes-list)
				       (let ((is-inhibit-linum))
					 (dolist (mode local-minor-modes)
					   (when (member mode linum-mode-inhibit-minor-modes-list)
					     (setq is-inhibit-linum t))) is-inhibit-linum)
				       ;; don't show line number for certain file extensions
				       (should-use-minimum-resource))
				   nil
				 t)))
  (add-hook 'display-line-numbers-mode-hook 'display-line-numbers-mode-hook-setup)
  (global-display-line-numbers-mode t))
 (t
  ;; (global-linum-mode t)

  (defun my/magit-status-around (orig-fn &rest args)
    (window-configuration-to-register :magit-fullscreen)
    (apply orig-fn args)
    (delete-other-windows))
  (advice-add #'magit-status :around 'my/magit-status-around)

  (defun my/linum-on-around(orig-fn &rest args)
    (unless (or (member major-mode linum-mode-inhibit-modes-list)
		(let ((is-inhabit-linum))
		  (dolist (mode local-minor-modes)
		    (when (member mode linum-mode-inhibit-minor-modes-list)
		      (setq is-inhabit-linum t))) is-inhabit-linum))
      (apply orig-fn args)))
  (advice-add #'linum-on :around 'my/linum-on-around)

  ;; update line number every second so `linum-mode' won't slow down Emacs
  ;; @see https://lists.gnu.org/archive/html/bug-gnu-emacs/2013-04/msg00577.html
  ;; package like `nlinum-mode' has better performance but `git-gutter' is dependent
  ;; on `linum-mode'.
  ;; So we have to use `linum-mode'.
  (setq linum-delay t)
  (defun my/linum-schedule-around(orig-fn &rest args)
    (run-with-idle-timer 2 nil #'linum-update-current))
  (advice-add #'linum-schedule :around 'my/linum-schedule-around)))
#+end_src


* completion

** selectrum

#+begin_src emacs-lisp :tangle no
(use-package selectrum
  :disabled
  :hook (after-init . selectrum-mode)
  :custom
  (selectrum-fix-vertical-window-height t)
  (selectrum-extend-current-candidate-highlight t)
  (selectrum-count-style 'current/matches)
  (selectrum-highlight-candidates-function #'orderless-highlight-matches)
  (selectrum-refine-candidates-function #'orderless-filter)
  ;; (selectrum-num-candidates-displayed 15)
  (selectrum-max-window-height 15)
  :config
  (selectrum-mode t)
  :bind (;; ([remap yank-pop] . my/selectrum-yank-kill-ring)
	 :map selectrum-minibuffer-map
	 ;; ("DEL" . selectrum-backward-kill-sexp)
	 ("<S-backspace>" . selectrum-backward-kill-sexp)
	 ("<down>" . selectrum-next-candidate)
	 ("C-j"  .  selectrum-next-candidate)
	 ("<up>" .  selectrum-previous-candidate)
	 ("C-k"  .  selectrum-previous-candidate)
	 ("<backtab>" . selectrum-previous-candidate)))
#+end_src

** marginalia

#+begin_src emacs-lisp
  (use-package marginalia
    :ensure t
    :demand t
    :defer 1
    :custom
    (marginalia-annotators '(marginalia-annotators-heavy
			     marginalia-annotators-light))
    :init
    (setq marginalia-command-categories
	  '((imenu . imenu)
	    ;; (projectile-find-file . project-file)
	    ;; (projectile-find-file . project)
	    ;; (projectile-find-dir . project-file)
	    ;; (projectile-find-dir . project)
	    ;; (projectile-switch-project . project)
	    ;; (projectile-switch-project . file)
	    ;; (projectile-switch-open-project . file)
	    ;; (projectile-recentf . project-file)
	    ;; (projectile-display-buffer . project-buffer)
	    ;; (projectile-switch-to-buffer . project-buffer)
	    ;; (projectile-commander . project)
	    ))
    :bind (:map minibuffer-local-map
	   ("M-A" . marginalia-cycle))
    :config
    (marginalia-mode)

    ;; Display more annotations - e.g. docstring with M-x
    (setq marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))

    ;; When using Selectrum, ensure that Selectrum is refreshed when cycling annotations.
    (advice-add #'marginalia-cycle :after
	       (lambda () (when (bound-and-true-p selectrum-mode) (selectrum-exhibit)))))

  ;; -----------------------------------------------------------------------------
  ;; Marginalia doesn't remember the this-command when switching projects using
  ;; projectile, since it uses multiple minibuffers. In order to classify project
  ;; completions properly, we keep track of when we're in the process of switching
  ;; projects and make sure to return the correct category

  ;; (defvar c/switching-project? nil)
  ;; (defun c/projectile-before-switch-project ()
  ;;   (setq c/switching-project? t))
  ;; (defun c/projectile-after-switch-project ()
  ;;   (setq c/switching-project? nil))

  ;; (after-load (projectile marginalia)
  ;;   (add-hook 'projectile-before-switch-project-hook #'c/projectile-before-switch-project)
  ;;   (add-hook 'projectile-after-switch-project-hook #'c/projectile-after-switch-project)

  ;;   (advice-add 'marginalia-classify-by-prompt :around
  ;; 		(lambda (orig-fun &rest args)
  ;; 		  (if c/switching-project?
  ;; 		      'project
  ;; 		    (apply orig-fun args))))
  ;;   )
#+end_src

** Orderless

This is a completion style, it's a back-end for completion and is used by a  front-end that provides a completion UI.

#+begin_src emacs-lisp :tangle no
(use-package orderless
  :after selectrum
  :config
  (setq completion-styles '(orderless))
  (setq orderless-skip-highlighting (lambda () selectrum-is-active))
  (defun my/match-components-literally ()
    "Components match literally for the rest of the session."
    (interactive)
    (setq-local
     orderless-matching-styles '(orderless-literal)
     completion-styles '(orderless)
     ;; orderless-matching-styles '(orderless-strict-initialism)
     orderless-style-dispatchers nil))
  :bind
  (:map minibuffer-local-completion-map
	("C-l" . my/match-components-literally))
  )

;; (use-package orderless
;;   :ensure t
;;   :after icomplete
;;   :custom
;;   (orderless-component-separator " +")
;;   (orderless-matching-styles
;;    '(;; The characters of the component should appear in that order in the
;;      ;; candidate, but not necessarily consecutively. This maps 'abc' to
;;      ;; 'a.*b.*c'.
;;      orderless-flex
;;      ;; orderless-initialism = each character of the component should
;;      ;; appear as the beginning of a word in the candidate, in order. This
;;      ;; maps 'abc' to '\<a.*\<b.*\c'.
;;      ;; orderless-strict-initialism = like initialism but only allow
;;      ;; non-letters in between the matched words. 'fb' would match
;;      ;; 'foo-bar' but not 'foo-qux-bar'.
;;      ;; orderless-strict-leading-initialism = like strict-initialism but
;;      ;; require the first initial to match the candidate’s first word. 'bb'
;;      ;; would match 'bar-baz' but not 'foo-bar-baz'.
;;      ;; orderless-strict-full-initialism = like strict-initialism but
;;      ;; require the first initial to match the candidate’s first word. 'bb'
;;      ;; would match 'bar-baz' but not 'foo-bar-baz'.
;;      orderless-strict-leading-initialism
;;      ;; The component is treated as a regexp that must match somewhere in
;;      ;; the candidate.
;;      orderless-regexp
;;      ;; The component is split at word endings and each piece must match at
;;      ;; a word boundary in the candidate, occurring in that order.
;;      orderless-prefixes
;;      ;; The component is treated as a literal string that must occur in the
;;      ;; candidate.
;;      orderless-literal))
;;   (orderless-skip-highlighting (lambda () selectrum-is-active))
;;   :config
;;   (defun my/match-components-literally ()
;;     "Components match literally for the rest of the session."
;;     (interactive)
;;     (setq-local
;;      orderless-matching-styles '(orderless-literal)
;;      completion-styles '(orderless)
;;      ;; orderless-matching-styles '(orderless-strict-initialism)
;;      orderless-style-dispatchers nil))
;;   :bind
;;   (:map minibuffer-local-completion-map
;;	("C-l" . my/match-components-literally)))

;; ;; '=' at the end of a component will make this component match as a literal.
;; (defun my/orderless-literal-dispatcher (pattern _index _total)
;;   (when (string-suffix-p "=" pattern)
;;     `(orderless-literal . ,(substring pattern 0 -1))))

;; ;; ',' at the end of a component will make this component match as a strict
;; ;; leading initialism.
;; (defun my/orderless-initialism-dispatcher (pattern _index _total)
;;   (when (string-suffix-p "," pattern)
;;     `(orderless-strict-leading-initialism . ,(substring pattern 0 -1))))

;; (setq orderless-style-dispatchers
;;       '(my/orderless-literal-dispatcher
;;         my/orderless-initialism-dispatcher))
#+end_src

** selectrum-prescient

#+begin_src  emacs-lisp :tangle no
(use-package selectrum-prescient
  :after selectrum
  :config
  (selectrum-prescient-mode t)
  (prescient-persist-mode))
#+end_src

** Consult without consultation fees

#+begin_src emacs-lisp
(use-package consult
  :demand t
  :defer 1
  :custom
  (consult-preview-key nil)
  :hook
  (completion-list-mode . consult-preview-at-point-mode)
  :init (bind-key "TAB"
		  (lambda ()
		    (interactive)
		    (isearch-exit)
		    (consult-line isearch-string))
		  isearch-mode-map)
  :config
  (require 'consult)
  (require 'consult-imenu)
  (with-eval-after-load 'org
    (require 'consult-org))
  (declare-function consult--customize-set "consult")
  (progn
    (setq consult-project-root-function  (lambda ()
					   (when-let* ((project (project-current)))
                                             (car (project-roots project))))
          consult-narrow-key             "<"
	  consult-line-numbers-widen     t
	  consult-async-min-input        2
	  consult-async-refresh-delay    0.15
	  consult-async-input-throttle   0.2
	  consult-async-input-debounce   0.1
	  ;; xref-show-xrefs-function       #'consult-xref
	  ;; xref-show-definitions-function #'consult-xref
	  )
    (setq consult-project-root-function #'vc-root-dir)
    ;; (consult-customize
    ;;  consult-ripgrep consult-git-grep consult-grep
    ;;  consult-buffer consult-bookmark consult-recent-file consult-xref
    ;; :preview-key (kbd "M-."))
    ;; Disable consult-buffer project-related capabilities as
    ;; they are very slow in TRAMP.
    (setq consult-buffer-sources
	  (delq 'consult--source-project-buffer
		(delq 'consult--source-project-file consult-buffer-sources)))

    (setq consult--source-hidden-buffer
	  (plist-put consult--source-hidden-buffer :narrow ?h)))
  (advice-add #'multi-occur :override #'consult-multi-occur)
  (setq consult-narrow-key "<"
	consult-line-numbers-widen t)
  :bind (("M-s f" . consult-line)
	 ("M-g g" . consult-line)
	 ("M-g o" . consult-outline)
	 ("M-g i" . consult-imenu)
	 ("M-g r" . consult-ripgrep)
	 ;; ("C-x C-r" . consult-recent-file)
	 ([remap apropos]  . consult-apropos)
	 ([remap bookmark-jump] . consult-bookmark)
	 ([remap goto-line]  . consult-goto-line)
	 ([remap imenu]         . consult-imenu)
	 ([remap locate] . consult-locate)
	 ([remap man]      . consult-man)
	 ([remap recentf-open-files] . consult-recent-file)
	 ([remap yank-pop] . consult-yank-from-kill-ring)
	 ;; ([remap yank-pop] . consult-yank-pop)
	 ;; ([remap yank-pop] . consult-yank-from-kill-ring)
	 ;; ([remap project-find-regexp] . consult-ripgrep)
	 ([remap switch-to-buffer]          . consult-buffer)
	 ([remap switch-to-buffer-other-window] . consult-buffer-other-window)
	 ([remap switch-to-buffer-other-frame]  . consult-buffer-other-frame)
	 ([remap switch-to-buffer] . consult-buffer)))
#+end_src

#+begin_src emacs-lisp
(use-package deadgrep
  :ensure t
  :commands (deadgrep--read-search-term)
  :bind (("C-c s" . deadgrep)))
#+end_src

** vertico
#+BEGIN_SRC emacs-lisp
;; (with-eval-after-load 'vertico
;;   (require 'vertico-buffer)
;;   (require 'vertico-directory)
;;   (require 'vertico-flat)
;;   (require 'vertico-indexed)
;;   (require 'vertico-mouse)
;;   (require 'vertico-quick)
;;   (require 'vertico-repeat)
;;   (require 'vertico-reverse))

;; minibuffer
(use-package vertico
  ;; :vc (:url "https://github.com/minad/vertico"
  ;; 	    :branch "main"
  ;; 	    :rev :newest
  ;; 	    :main-file "vertico.el"
  ;; 	    :lisp-dir "extensions/")
  :custom
  ;; Different scroll margin
  (vertico-scroll-margin 0)

  ;; Show more candidates
  (vertico-count 12)

  ;; Grow and shrink the Vertico minibuffer
  (vertico-resize t)
  ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
  (vertico-cycle t)
  :bind
  (("C-z" . vertico-quick-jump)
   (:map vertico-map
	 ;; ("DEL" . selectrum-backward-kill-sexp)
	 ;; ("<S-backspace>" . vertico-backward-kill-sexp)
	 ("<down>" . vertico-next)
	 ("C-j"  .  vertico-next)
	 ("<up>" .  vertico-previous)
	 ("C-k"  .  vertico-previous)
	 ("<backtab>" . vertico-previous)
	 ("?" . minibuffer-completion-help)
	 ("M-RET" . minibuffer-force-complete-and-exit)
	 ("M-TAB" . minibuffer-complete)))
  :config
  (vertico-mode)
  ;; (require 'vertico-buffer)
  ;; (require 'vertico-directory)
  ;; (require 'vertico-flat)
  ;; (require 'vertico-indexed)
  ;; (require 'vertico-mouse)
  ;; (require 'vertico-quick)
  ;; (require 'vertico-repeat)
  ;; (require 'vertico-reverse)
  )

(require 'vertico-buffer)
(require 'vertico-directory)
(require 'vertico-flat)
(require 'vertico-indexed)
(require 'vertico-mouse)
(require 'vertico-quick)
(require 'vertico-repeat)
(require 'vertico-reverse)

;; (use-package vertico-buffer
;;   :ensure nil
;;   :after vertico
;;   :custom
;;   (vertico-buffer-display-action '(display-buffer-same-window))
;;   ;; :config
;;   ;; (vertico-buffer-mode)
;;   )

;; (use-package vertico-flat
;;   :ensure nil
;;   :after vertico)

;; (use-package vertico-indexed
;;   :ensure nil
;;   :after vertico)

;; (use-package vertico-mouse
;;   :ensure nil
;;   :after vertico)

;; (use-package vertico-quick
;;   :ensure nil
;;   :after vertico)

;; (use-package vertico-repeat
;;   :ensure nil
;;   :after vertico)

;; (use-package vertico-reverse
;;   :ensure nil
;;   :after vertico)

;; ;; Configure directory extension.
;; (use-package vertico-directory
;;   :ensure nil
;;   :after vertico
;;   ;; More convenient directory navigation commands
;;   :bind (:map vertico-map
;; 	      ("RET" . vertico-directory-enter)
;; 	      ("DEL" . vertico-directory-delete-char)
;; 	      ("M-DEL" . vertico-directory-delete-word)
;; 	      ("<S-backspace>" . vertico-directory-delete-word))
;;   ;; Tidy shadowed file names
;;   :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))

;; Improved Candidate Filtering with Orderless

;; Optionally use the `orderless' completion style. See
;; `+orderless-dispatch' in the Consult wiki for an advanced Orderless style
;; dispatcher. Additionally enable `partial-completion' for file path
;; expansion. `partial-completion' is important for wildcard support.
;; Multiple files can be opened at once with `find-file' if you enter a
;; wildcard. You may also give the `initials' completion style a try.
(use-package orderless
  :config
  ;; Configure a custom style dispatcher (see the Consult wiki)
  ;; (setq orderless-style-dispatchers '(+orderless-dispatch)
  ;;       orderless-component-separator #'orderless-escapable-split-on-space)
  (orderless-define-completion-style orderless+initialism
    (orderless-matching-styles '(orderless-initialism
				 orderless-literal
				 orderless-regexp)))
  (setq ;; completion-styles '(orderless basic) ;; basic
   ;; `selectrum', `vertico' and `icomplete' will honoring
   completion-styles '(basic partial-completion substring flex)
   ;; (completion-category-overrides '((buffer (styles . (flex)))))
   orderless-matching-styles '(orderless-literal orderless-regexp)
   completion-category-defaults nil
   completion-category-overrides '((buffer (styles substring basic emacs22);; (styles . (flex))
					   )
				   (eglot (styles prescient
						  ;; orderless
						  ))
				   (command (styles orderless+initialism))
				   (symbol (styles orderless-flex orderless-literal))
				   (variable (styles orderless+initialism))
				   (file (styles partial-completion)))))

;; A few more useful configurations...

;; Sorting and filtering
(use-package prescient
  ;; :after vertico
  :config
  ;; (require 'vertico-prescient)
  ;; (vertico-prescient-mode 1)
  (prescient-persist-mode 1))
#+END_SRC

** corfu

#+begin_src emacs-lisp
(use-package corfu
  ;; :vc (:url "https://github.com/minad/corfu"
  ;; 	    :rev :newest
  ;; 	    :branch "main"
  ;; 	    :lisp-dir "extensions")
  :custom
  (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
  (corfu-auto t)                 ;; Enable auto completion
  (corfu-count 10) ;; Max # of candidates to show
  (corfu-commit-predicate nil)
  (corfu-auto-delay 0.08)
  (corfu-auto-prefix 1)
  (corfu-quit-at-boundary nil)
  ;; (corfu-separator ?\s)          ;; Orderless field separator
  (corfu-separator  ?_)
  (corfu-preview-current 'insert)       ; First candidate as overlay. Insert on input if only one
  (corfu-quit-at-boundary 'separator)   ; Boundary: stay alive if separator inserted
  (corfu-quit-no-match 'separator)      ; No match: stay alive if separator inserted
  (corfu-preselect 'first)
  ;; (corfu-preselect 'prompt)
  (corfu-popupinfo-delay '(0.5 . 0.2))
  (corfu-on-exact-match nil)     ;; Configure handling of exact matches
  ;; (corfu-echo-documentation nil) ;; Disable documentation in the echo area
  ;; (corfu-echo-documentation '(1.0 . 0.2))
  (corfu-echo-documentation nil) ;; use corfu doc
  (corfu-min-width 30)
  ;; (corfu-min-width 99)
  ;; hide scroll-bar
  (corfu-bar-width 0)
  ;; (corfu-right-margin-width 0)
  (corfu-scroll-margin 5)        ;; Use scroll margin
  (corfu-right-margin-width 2.0)
  (corfu-left-margin-width 1.0)
  (corfu-popupinfo-mode t)
  (corfu-history-mode t)
  (global-corfu-mode t)
  :init
  (corfu-indexed-mode 1)
  (global-corfu-mode)
  ;; (require 'corfu-history)
  ;; (require 'corfu-popupinfo)
  ;; (corfu-history-mode)
  ;; (corfu-popupinfo-mode)
  :config
  (unbind-key (kbd "TAB") corfu-map)
  (unbind-key (kbd "<tab>") corfu-map)
  (add-hook 'eshell-mode-hook
            (lambda () (setq-local corfu-quit-at-boundary t
				   corfu-quit-no-match t
				   corfu-auto nil)
              (corfu-mode)))
  :bind (:map corfu-map
	      ;; ("TAB" . corfu-next)
	      ("C-n" . corfu-next)
	      ;; ("<tab>" . corfu-next)
	      ;; ("S-TAB" . corfu-previous)
	      ("C-p" . corfu-previous)
	      ;; ("C-SPC" . corfu-insert-separator)
	      ("C-g"      . corfu-quit)
	      ;; ("<backtab>" . corfu-previous)

	      ("<escape>" . corfu-quit)
	      ("<return>" . corfu-insert)
	      ("RET"     . corfu-insert)
	      ("ESC"    . corfu-reset)
	      ;; ("SPC" . corfu-move-to-minibuffer)
	      ;; ("<space>" . corfu-move-to-minibuffer)
	      ([remap completion-at-point] . corfu-next)))

;; Icon support
(use-package kind-icon
  :after corfu
  :custom
  (kind-icon-default-face 'corfu-default)
  (kind-icon-use-icons nil)
  (kind-icon-blend-background nil)
  ;; (kind-icon-blend-frac 0.08)
  (svg-lib-icons-dir (expand-file-name "svg-lib" poly-cache-dir))
  :config
  (setq kind-icon-default-style '(:padding -0.5 :stroke 0 :margin 0 :radius 0 :height 0.6 :scale 1.0))
  (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter)
  (setq kind-icon-mapping
        `(
          (array ,(nerd-icons-codicon "nf-cod-symbol_array") :face font-lock-type-face)
          (boolean ,(nerd-icons-codicon "nf-cod-symbol_boolean") :face font-lock-builtin-face)
          (class ,(nerd-icons-codicon "nf-cod-symbol_class") :face font-lock-type-face)
          (color ,(nerd-icons-codicon "nf-cod-symbol_color") :face success)
          (command ,(nerd-icons-codicon "nf-cod-terminal") :face default)
          (constant ,(nerd-icons-codicon "nf-cod-symbol_constant") :face font-lock-constant-face)
          (constructor ,(nerd-icons-codicon "nf-cod-symbol_method") :face font-lock-function-name-face)
          (enummember ,(nerd-icons-codicon "nf-cod-symbol_enum_member") :face font-lock-builtin-face)
          (enum-member ,(nerd-icons-codicon "nf-cod-symbol_enum_member") :face font-lock-builtin-face)
          (enum ,(nerd-icons-codicon "nf-cod-symbol_enum") :face font-lock-builtin-face)
          (event ,(nerd-icons-codicon "nf-cod-symbol_event") :face font-lock-warning-face)
          (field ,(nerd-icons-codicon "nf-cod-symbol_field") :face font-lock-variable-name-face)
          (file ,(nerd-icons-codicon "nf-cod-symbol_file") :face font-lock-string-face)
          (folder ,(nerd-icons-codicon "nf-cod-folder") :face font-lock-doc-face)
          (interface ,(nerd-icons-codicon "nf-cod-symbol_interface") :face font-lock-type-face)
          (keyword ,(nerd-icons-codicon "nf-cod-symbol_keyword") :face font-lock-keyword-face)
          (macro ,(nerd-icons-codicon "nf-cod-symbol_misc") :face font-lock-keyword-face)
          (magic ,(nerd-icons-codicon "nf-cod-wand") :face font-lock-builtin-face)
          (method ,(nerd-icons-codicon "nf-cod-symbol_method") :face font-lock-function-name-face)
          (function ,(nerd-icons-codicon "nf-cod-symbol_method") :face font-lock-function-name-face)
          (module ,(nerd-icons-codicon "nf-cod-file_submodule") :face font-lock-preprocessor-face)
          (numeric ,(nerd-icons-codicon "nf-cod-symbol_numeric") :face font-lock-builtin-face)
          (operator ,(nerd-icons-codicon "nf-cod-symbol_operator") :face font-lock-comment-delimiter-face)
          (param ,(nerd-icons-codicon "nf-cod-symbol_parameter") :face default)
          (property ,(nerd-icons-codicon "nf-cod-symbol_property") :face font-lock-variable-name-face)
          (reference ,(nerd-icons-codicon "nf-cod-references") :face font-lock-variable-name-face)
          (snippet ,(nerd-icons-codicon "nf-cod-symbol_snippet") :face font-lock-string-face)
          (string ,(nerd-icons-codicon "nf-cod-symbol_string") :face font-lock-string-face)
          (struct ,(nerd-icons-codicon "nf-cod-symbol_structure") :face font-lock-variable-name-face)
          (text ,(nerd-icons-codicon "nf-cod-text_size") :face font-lock-doc-face)
          (typeparameter ,(nerd-icons-codicon "nf-cod-list_unordered") :face font-lock-type-face)
          (type-parameter ,(nerd-icons-codicon "nf-cod-list_unordered") :face font-lock-type-face)
          (unit ,(nerd-icons-codicon "nf-cod-symbol_ruler") :face font-lock-constant-face)
          (value ,(nerd-icons-codicon "nf-cod-symbol_field") :face font-lock-builtin-face)
          (variable ,(nerd-icons-codicon "nf-cod-symbol_variable") :face font-lock-variable-name-face)
	  (tabnine ,(nerd-icons-codicon "nf-cod-hubot") :face font-lock-warning-face)
          (unknown ,(nerd-icons-codicon "nf-cod-code") :face font-lock-warning-face)
          (t ,(nerd-icons-codicon "nf-cod-code") :face font-lock-warning-face))))

;;; Emacs bookmarks
;; C-x r m: create new bookmark
;; C-x r b: navigate to bookmark
;; C-x r l: list bookmarks.
(setq
 bookmark-default-file "~/.emacs.d/bookmarks" ; Moved from ~.
 bookmark-save-flag 1)                        ; Autosave each change.

(use-package corfu-history
  :ensure nil
  :after corfu
  :init (corfu-history-mode))

(defun poly/convert-super-capf (arg-capf)
  (if (and (symbolp arg-capf) (not (memq arg-capf '(t nil))))
      (list
       (cape-capf-buster
	(cape-capf-super
	 ;; #'tabnine-completion-at-point
	 arg-capf
	 ;; #'cape-dabbrev
	 #'tempel-complete
	 ;; :with #'tempel-complete
	 )
	'equal)
       #'cape-file)
      (list
       (cape-capf-buster
	(cape-capf-super
	 ;; #'tabnine-completion-at-point
	 #'cape-dabbrev
	 ;; arg-capf
	 #'tempel-complete
	 ;; :with #'tempel-complete
	 )
	'equal)
       #'cape-file)))

(defun poly/set-basic-capf ()
  (interactive)
  (setq completion-category-defaults nil)
  (setq-local completion-at-point-functions
	      (poly/convert-super-capf nil)))

(defun poly/set-mail-capf ()
  (interactive)
  (setq completion-category-defaults nil)
  (setq-local completion-at-point-functions
	      (list
	       #'cape-file
	       (cape-capf-buster
		(cape-capf-super
		 ;; #'notmuch-capf
		 ;; #'ebdb-mail-dwim-completion-at-point-function
		 ;; #'ebdb-complete-mail
		 ;; #'tabnine-completion-at-point
		 ;; arg-capf
		 #'tempel-complete)
		))))

(defun poly/set-lsp-capf ()
  (interactive)
  (setq completion-category-defaults nil)
  (setq-local completion-at-point-functions
	      (poly/convert-super-capf
	       (if eglot--managed-mode
		   (progn
		     #'eglot-completion-at-point)
		 #'lsp-completion-at-point))))

;; Completion At Point Extensions made for `corfu'
(use-package cape
  ;; ;; Bind dedicated completion commands
  ;; ;; Alternative prefix keys: C-c p, M-p, M-+, ...
  ;; :bind (("C-c p p" . completion-at-point) ;; capf
  ;;        ("C-c p t" . complete-tag)        ;; etags
  ;;        ("C-c p d" . cape-dabbrev)        ;; or dabbrev-completion
  ;;        ("C-c p h" . cape-history)
  ;;        ("C-c p f" . cape-file)
  ;;        ("C-c p k" . cape-keyword)
  ;;        ("C-c p s" . cape-symbol)
  ;;        ("C-c p a" . cape-abbrev)
  ;;        ("C-c p i" . cape-ispell)
  ;;        ("C-c p l" . cape-line)
  ;;        ("C-c p w" . cape-dict)
  ;;        ("C-c p \\" . cape-tex)
  ;;        ("C-c p _" . cape-tex)
  ;;        ("C-c p ^" . cape-tex)
  ;;        ("C-c p &" . cape-sgml)
  ;;        ("C-c p r" . cape-rfc1345))
  ;; :init
  ;; Add `completion-at-point-functions', used by `completion-at-point'.
  ;; (add-to-list 'completion-at-point-functions #'cape-file)
  ;; (add-to-list 'completion-at-point-functions #'cape-tex)
  ;; (add-to-list 'completion-at-point-functions #'cape-dabbrev)
  ;; (add-to-list 'completion-at-point-functions #'cape-keyword)
  ;; (add-to-list 'completion-at-point-functions #'cape-sgml)
  ;; (add-to-list 'completion-at-point-functions #'cape-rfc1345)
  ;; (add-to-list 'completion-at-point-functions #'cape-ispell)
  ;; (add-to-list 'completion-at-point-functions #'cape-dict)
  ;; (add-to-list 'completion-at-point-functions #'cape-symbol)
  ;; (add-to-list 'completion-at-point-functions #'cape-line)
  :hook ((prog-mode . poly/set-basic-capf)
	 (org-mode . poly/set-basic-capf)
	 (text-mode . poly/set-basic-capf)
	 (eglot-managed-mode . poly/set-lsp-capf)
	 ;; (emacs-lisp-mode . (lambda ()
	 ;;      (poly/convert-super-capf #'elisp-completion-at-point)))
	 ;; ((lsp-completion-mode eglot-managed-mode) . poly/set-lsp-capf)
	 )
  :config
  ;; (with-eval-after-load 'cape
  ;;   (add-hook 'prog-mode-hook  #'poly/set-basic-capf)
  ;;   (add-hook 'org-mode-hook  #'poly/set-basic-capf)
  ;;   (add-hook 'text-mode-hook  #'poly/set-basic-capf)
  ;;    (add-hook 'eglot-managed-mode-hook  #'poly/set-lsp-capf))
  ;; (add-hook 'eglot-managed-mode-hook  (lambda() (poly/set-lsp-capf #'eglot-completion-at-point)))
  (poly/set-basic-capf)
  (setq dabbrev-upcase-means-case-search t)
  (setq case-fold-search nil)
  ;; (setq cape-dict-file "/usr/share/dict/words")
  ;; Silence the pcomplete capf, no errors or messages!
  (advice-add 'pcomplete-completions-at-point :around #'cape-wrap-silent)
  ;; Ensure that pcomplete does not write to the buffer
  ;; and behaves as a pure `completion-at-point-function'.
  (advice-add 'pcomplete-completions-at-point :around #'cape-wrap-purify))

(defun corfu-enable-in-minibuffer ()
  "Enable Corfu in the minibuffer if `completion-at-point' is bound."
  (when (where-is-internal #'completion-at-point (list (current-local-map)))
    ;; (setq-local corfu-auto nil) Enable/disable auto completion
    (corfu-mode 1)))
(add-hook 'minibuffer-setup-hook #'corfu-enable-in-minibuffer)

(defun corfu-move-to-minibuffer ()
  (interactive)
  (let ((completion-extra-properties corfu--extra)
	completion-cycle-threshold completion-cycling)
    (apply #'consult-completion-in-region completion-in-region--data)))

;; Use dabbrev with Corfu!
(use-package dabbrev
  ;; Swap M-/ and C-M-/
  ;; :bind (("M-/" . dabbrev-completion)
  ;;        ("C-M-/" . dabbrev-expand))
  )

;; (use-package corfu-doc
;;   :disabled
;;   :ensure t
;;   :config
;;   :hook
;;   (corfu-mode-hook . corfu-doc-mode)
;;   ;; :bind
;;   ;; (:map corfu-map
;;   ;; ("M-p" . corfu-doc-scroll-down)
;;   ;; ("M-n" . corfu-doc-scroll-up)
;;   ;; ( "M-d" . corfu-doc-toggle))
;;   )

;; Configure Tempel
(use-package tempel
  :bind (("M-+" . tempel-complete) ;; Alternative tempel-expand
	 ("M-*" . tempel-insert))
  :config
  (global-tempel-abbrev-mode))

(use-package tempel-collection
  :after tempel)

(use-package editorconfig)
#+end_src

*** ldap-mode

#+begin_src emacs-lisp :tangle no
(use-package ldap-mode
  :straight (ldap-mode :package "ldap-mode"
		       :type git
		       :host nil
		       :repo "ssh://git@h.jiya.net:9922/shuxiao9058/ldap-mode.git")
  :mode (("\\.ldif\\'" . ldap-mode)))
#+end_src

*** tabnine & copilot

**** tabnine

#+begin_src emacs-lisp :tangle no
(use-package tabnine
  :vc (:url "https://github.com/shuxiao9058/tabnine" :rev :newest :branch "main")
  :commands (tabnine-start-process)
  :hook ((prog-mode conf-mode text-mode vterm-mode org-msg-edit-mode) . tabnine-mode)
  :diminish "⌬"
  :custom
  (tabnine-wait 1.0)
  (tabnine-minimum-prefix-length 0)
  (tabnine-max-wait-count-while-nil 5)
  (tabnine-wait-interval-while-nil 0.2)
  (tabnine-max-consecutive-restart-count most-positive-fixnum)
  ;; (tabnine-network-proxy "http://127.0.0.1:8888")
  ;; (tabnine-debug-file-path "/tmp/tabnine-emacs.log")
  (tabnine-log-file-path "/private/tmp/tabnine-emacs.log")
  (tabnine-chat-default-mode 'org-mode)
  (tabnine-chat-prompt-alist '((explain-code . "解释这段代码含义")
			       (generate-test-for-code . "为这段代码编写测试用例")
			       (document-code . "为这段代码添加文档注释")
			       (fix-code . "找到并修复这段代码的潜在问题")))
  ;; (tabnine-chat-max-context-length 200)
  (tabnine-disable-predicates '(window-minibuffer-p +tabnine-disable-predicate))
  (tabnine-disable-display-predicates '(window-minibuffer-p +tabnine-disable-predicate))
  :init
  (setq tabnine-executable-args (list "--log-level" "Info" "--no-lsp" "true"))
  :hook ((kill-emacs . tabnine-kill-process)
	 (meow-insert-exit . (lambda() (tabnine-clear-overlay))))
  :after cape
  :config
  (tabnine-start-process)
  ;; (setq tabnine-network-proxy "http://127.0.0.1:8888")
  (defun +tabnine-disable-predicate()
    ;; (let ((is-insert-mode (meow-insert-mode-p)))
    ;;   (if is-insert-mode
    ;; 	  (message "is insert-mode: t" )
    ;; 	(message "not insert-mode" )))
    (not ;; (derived-mode-p 'vterm-mode)
     (meow-insert-mode-p)
     ;; (meow-motion-mode-p)
     ;; (meow-normal-mode-p)
     ))
  ;; (add-to-list 'tabnine-disable-predicates #'+tabnine-disable-predicate)
  ;; (add-to-list 'tabnine-disable-display-predicates #'+tabnine-disable-predicate)
  )
#+end_src

**** minuet

Setup deep complete backend (copilot or minuet).

#+begin_src emacs-lisp
(add-hook 'hack-local-variables-hook #'poly/setup-deep-completion)
(defvar poly-deep-completion-enable-modes-list '(prog-mode conf-mode text-mode vterm-mode org-msg-edit-mode))

(defun poly/setup-deep-completion()
  (when (derived-mode-p poly-deep-completion-enable-modes-list)
    (if (bound-and-true-p poly-disable-copilot-completion)
	(minuet-auto-suggestion-mode +1)
      (copilot-mode +1))))
#+end_src

#+begin_src emacs-lisp
(defun bjodah/minuet-use-groq-llama ()
  ;; GROQ for speed:
  (plist-put minuet-openai-compatible-options :end-point "https://api.groq.com/openai/v1/chat/completions")
  (plist-put minuet-openai-compatible-options :api-key (lambda () (getenv "GROQ_API_KEY")))
  (plist-put minuet-openai-compatible-options :model "llama-3.3-70b-specdec")

  ;; Prioritize throughput for faster completion
					;(minuet-set-optional-options minuet-openai-compatible-options :provider '(:sort "throughput"))
  (minuet-set-optional-options minuet-openai-compatible-options :max_tokens 256)
  (minuet-set-optional-options minuet-openai-compatible-options :top_p 0.9)
  (setq minuet-n-completions 2)
  (setq minuet-context-window 16000) ;; 16k chars ~= 4000 tokens
  (setq minuet-provider 'openai-compatible))

(defun bjodah/minuet-use-deepseek ()
  (interactive)
  (setq minuet-openai-fim-compatible-options
        '(:model "deepseek-chat"
		 :end-point "https://api.deepseek.com/beta/completions"
		 :api-key "DEEPSEEK_API_KEY"
		 :name "Deepseek"
		 :template (:prompt minuet--default-fim-prompt-function
				    :suffix minuet--default-fim-suffix-function)
		 :optional nil))
  (setq minuet-n-completions 2)
  (setq minuet-context-window 8000) ;; 8k chars ~= 2000 tokens
  (setq minuet-provider 'openai-fim-compatible)
  )

(defun bjodah/minuet-use-gemini ()
  "Switch minuet provider to Gemini"
  (interactive)
  (setq minuet-n-completions 2)
  (setq minuet-context-window 16000) ;; 16k chars ~= 4000 tokens
  (setq minuet-provider 'gemini)
  (defvar mg-minuet-gemini-prompt
    "You are the backend of an AI-powered code completion engine. Your task is to
provide code suggestions based on the user's input. The user's code will be
enclosed in markers:
- `<contextAfterCursor>`: Code context after the cursor
- `<cursorPosition>`: Current cursor location
- `<contextBeforeCursor>`: Code context before the cursor
")
  (defvar mg-minuet-gemini-chat-input-template
    "{{{:language-and-tab}}}
<contextBeforeCursor>
{{{:context-before-cursor}}}<cursorPosition>
<contextAfterCursor>
{{{:context-after-cursor}}}")
  (defvar mg-minuet-gemini-fewshots
    `((:role "user"
             :content "# language: python
<contextBeforeCursor>
def fibonacci(n):
    <cursorPosition>
<contextAfterCursor>
fib(5)")
      ,(cadr minuet-default-fewshots)))
  (minuet-set-optional-options minuet-gemini-options
                               :prompt 'mg-minuet-gemini-prompt
                               :system)
  (minuet-set-optional-options minuet-gemini-options
                               :template 'mg-minuet-gemini-chat-input-template
                               :chat-input)
  (plist-put minuet-gemini-options :fewshots 'mg-minuet-gemini-fewshots)
  (minuet-set-optional-options minuet-gemini-options
                               :generationConfig
                               '(:maxOutputTokens 256
                                                  :topP 0.9))
  (minuet-set-optional-options minuet-gemini-options
                               :safetySettings
                               [(:category "HARM_CATEGORY_DANGEROUS_CONTENT"
                                           :threshold "BLOCK_NONE")
                                (:category "HARM_CATEGORY_HATE_SPEECH"
                                           :threshold "BLOCK_NONE")
                                (:category "HARM_CATEGORY_HARASSMENT"
                                           :threshold "BLOCK_NONE")
                                (:category "HARM_CATEGORY_SEXUALLY_EXPLICIT"
                                           :threshold "BLOCK_NONE")])
  )

(defun bjodah/minuet-use-groq-coder ()
  "Switch minuet provider to qwen2.5-Coder-32B via GROQ."
  (interactive)
  (plist-put minuet-openai-fim-compatible-options :end-point "https://api.groq.com/openai/v1/completions") ;; <--- GROQ only supports /chat/completions endpoint :/ (2025-03-31)
  (plist-put minuet-openai-fim-compatible-options :name "GROQ/Qwen/Qwen2.5-Coder-32B")
  (plist-put minuet-openai-fim-compatible-options :api-key (lambda () (getenv "GROQ_API_KEY")))
  (plist-put minuet-openai-fim-compatible-options :model "qwen-2.5-coder-32b")
  (minuet-set-optional-options minuet-openai-fim-compatible-options :suffix nil :template)
  (minuet-set-optional-options
   minuet-openai-fim-compatible-options
   :prompt
   (defun minuet-llama-cpp-fim-qwen-prompt-function (ctx)
     (format "<|fim_prefix|>%s\n%s<|fim_suffix|>%s<|fim_middle|>"
             (plist-get ctx :language-and-tab)
             (plist-get ctx :before-cursor)
             (plist-get ctx :after-cursor)))
   :template)
  (setq minuet-n-completions 2)
  (setq minuet-context-window 16000) ;; 16k chars ~= 4000 tokens
  (setq minuet-provider 'openai-fim-compatible)
  )

(defun bjodah/minuet-use-localhost-fim ()
  (setq minuet-n-completions 2) ;; 1 is recommended for Local LLM for resource saving
  (setq minuet-context-window 2048) ;; 4k chars ~= 1000 tokens
  (setq minuet-provider 'openai-fim-compatible)
  ;; I recommend beginning with a small context window size and incrementally
  ;; expanding it, depending on your local computing power. A context window
  ;; of 512, serves as an good starting point to estimate your computing
  ;; power. Once you have a reliable estimate of your local computing power,
  ;; you should adjust the context window to a larger value.
  ;; (setq minuet-context-window 2048) ;; 512
  (plist-put minuet-openai-fim-compatible-options :end-point "http://localhost:8000/v1/completions")
  ;; an arbitrary non-null environment variable as placeholder
  (plist-put minuet-openai-fim-compatible-options :name "llama")
  (plist-put minuet-openai-fim-compatible-options :api-key (defun my-tabby-api-key () "YE2z1ZHuHUxH8hCsBqD"))
  ;; The model is set by the llama-cpp server and cannot be altered
  ;; post-launch.
  ;; (plist-put minuet-openai-fim-compatible-options :model "qwen2.5-coder:3b")
  (plist-put minuet-openai-fim-compatible-options :model "JetBrains_Mellum:4b")

  ;; (plist-put minuet-openai-fim-compatible-options :model "qwen2.5-coder:3b")

  ;; Llama.cpp does not support the `suffix` option in FIM completion.
  ;; Therefore, we must disable it and manually populate the special
  ;; tokens required for FIM completion.
  (minuet-set-optional-options minuet-openai-fim-compatible-options :suffix nil :template)
  (minuet-set-optional-options minuet-openai-fim-compatible-options :temperature 0.2)
  (minuet-set-optional-options
   minuet-openai-fim-compatible-options
   :prompt
   (defun minuet-llama-cpp-fim-qwen-prompt-function (ctx)
     (format "<|fim_prefix|>%s\n%s<|fim_suffix|>%s<|fim_middle|>"
             (plist-get ctx :language-and-tab)
             (plist-get ctx :before-cursor)
             (plist-get ctx :after-cursor)))
   :template)
  (minuet-set-optional-options minuet-openai-fim-compatible-options :max_tokens 56) ; or 56 for local llm?
  )


(defun bjodah/minuet-use-llama-swap-ling ()
  "Switch to Ling-Coder-lite on localhost (llama-swap container on port :8686"
  (interactive)
  (plist-put minuet-openai-compatible-options :end-point "http://localhost:8686/v1/chat/completions")
  (plist-put minuet-openai-compatible-options :api-key (defun my-llama-swap-key () "sk-empty"))
                                        ;(plist-put minuet-openai-compatible-options :model "HuggingFaceTB/SmolLM2-1.7B-Instruct")
  (plist-put minuet-openai-compatible-options :model "llamacpp-Ling-Coder-lite")

  ;; Prioritize throughput for faster completion
  (minuet-set-optional-options minuet-openai-compatible-options :max_tokens 128)
  (minuet-set-optional-options minuet-openai-compatible-options :top_p 0.9)
  (setq minuet-n-completions 2)
  (setq minuet-context-window 2000) ;; 2000 chars ~= 500 tokens
  (setq minuet-provider 'openai-compatible))

(defun bjodah/minuet-use-llama-swap-qwen-coder-14B ()
  "Switch to Qwen/Qwen2.5-Coder-Instruct-14B on localhost (llama-swap container on port :8686"
  (interactive)
  (bjodah/minuet-use-localhost-fim) ;; we need to override port 8000, and model name.
  (setq minuet-n-completions 4)
  (plist-put minuet-openai-fim-compatible-options :end-point "http://localhost:8686/v1/completions")
  (plist-put minuet-openai-fim-compatible-options :name "llama-swap-qwen-coder")
  (plist-put minuet-openai-fim-compatible-options :api-key (defun my-llama-swap-key () "sk-empty"))
  (plist-put minuet-openai-fim-compatible-options :model "exllamav2-Qwen2.5-Coder-14B-Instruct"))


(use-package minuet
  :vc (:url "https://github.com/milanglacier/minuet-ai.el"
	    :rev :newest
	    :branch "main")
  :demand t ; Force immediate loading
  ;; :hook ((prog-mode conf-mode text-mode vterm-mode org-msg-edit-mode) .
  ;; 	 (lambda () (when poly-disable-copilot-completion
  ;; 		 (message "enable minuet")
  ;; 		 (minuet-auto-suggestion-mode +1))))
  :custom
  (minuet-request-timeout 10)
  (minuet-context-ratio 0.8)
  :bind
  (("M-o" . #'minuet-complete-with-minibuffer) ;; use minibuffer for completion
   ("M-i" . #'minuet-show-suggestion) ;; use overlay for completion
   ("M-p" . #'minuet-configure-provider)
   :map minuet-active-mode-map
   ;; These keymaps activate only when a minuet suggestion is displayed in the current buffer
   ("M-[" . #'minuet-previous-suggestion) ;; invoke completion or cycle to next completion
   ("M-]" . #'minuet-next-suggestion) ;; invoke completion or cycle to previous completion
   ("<tab>" . #'minuet-accept-suggestion) ;; accept whole completion
   ;; Accept the first line of completion, or N lines with a numeric-prefix:
   ;; e.g. C-u 2 M-a will accepts 2 lines of completion.
   ("M-<return>" . #'minuet-accept-suggestion-line)
   ("C-g" . #'minuet-dismiss-suggestion))
  ;; :init
  ;; ;; if you want to enable auto suggestion.
  ;; ;; Note that you can manually invoke completions without enable minuet-auto-suggestion-mode
  ;; (add-hook 'prog-mode-hook #'minuet-auto-suggestion-mode)
  :config
  (bjodah/minuet-use-localhost-fim) ; or bjodah/minuet-use-smollm2
  (setq minuet-auto-suggestion-throttle-delay 1.5)
  (setq minuet-auto-suggestion-debounce-delay 0.3)
  ;; You can use M-x minuet-configure-provider to interactively configure provider and model

  (defun +minuet-disable-suggestion()
    (not
     (meow-insert-mode-p)))

  (add-to-list 'minuet-auto-suggestion-block-functions #'+minuet-disable-suggestion)
  )
#+end_src

**** copilot

#+begin_src emacs-lisp
(use-package copilot
  :vc (:url "https://github.com/copilot-emacs/copilot.el" :branch "main" :rev :newest)
  ;; :hook ((prog-mode conf-mode text-mode vterm-mode org-msg-edit-mode) .
  ;; 	 (lambda () (unless poly-disable-copilot-completion
  ;; 		      (copilot-mode +1))))
  :custom
  (copilot-network-proxy
   '(:host "127.0.0.1" :port 6152))
  (copilot-max-char 1000000)
  :bind (:map copilot-completion-map
	      ("M-[" . copilot-previous-completion)
	      ("M-]" . copilot-next-completion)
	      ("<tab>" . copilot-accept-completion)
	      ("M-f" . copilot-accept-completion-by-word))
  :config
  (setq copilot-enable-predicates nil
        warning-suppress-types '((copilot copilot--infer-indentation-offset)))
  (add-to-list 'copilot-indentation-alist '(clojure-mode 2))
  (add-to-list 'copilot-indentation-alist '(clojurec-mode 2))
  (add-to-list 'copilot-indentation-alist '(clojurescript-mode 2))
  (add-to-list 'copilot-disable-predicates
	       #'(lambda ()
                   (symbol-value 'meow-normal-mode))))
#+end_src

#+RESULTS:
: copilot-accept-completion-by-word

*** corfu-quick

#+begin_src emacs-lisp
(use-package corfu-quick
  :after corfu
  :ensure nil
  :bind
  (:map corfu-map
        ("C-q" . corfu-quick-insert)))
#+end_src

*** corfu-terminal & popon

#+begin_src emacs-lisp
(unless IS-GUI
  (use-package popon
    :vc (:url "https://codeberg.org/akib/emacs-popon.git" :branch "master" :rev :newest))
  (use-package corfu-terminal
    :vc (:url "https://codeberg.org/akib/emacs-corfu-terminal.git" :branch "master" :rev :newest)
    :after popon
    :config
    (unless IS-GUI
      (corfu-terminal-mode +1))))
#+end_src

** completion-preview-mode

Show candidates inline when only one candidate.

#+begin_src emacs-lisp :tangle no
(use-package completion-preview
  :ensure nil
  :hook
  ((comint-mode-hook
    eshell-mode-hook
    prog-mode-hook
    text-mode-hook) . completion-preview-mode)
  (minibuffer-setup-hook . completion-preview-enable-in-minibuffer)
  :bind
  (:map completion-preview-active-mode-map
        ("TAB" . completion-preview-complete)
        ("C-e" . completion-preview-insert))
  :config
  (setq completion-preview-exact-match-only t)
  ;; (setq completion-preview-adapt-background-color nil)
  (setq completion-preview-minimum-symbol-length 2)
  (defun completion-preview-enable-in-minibuffer ()
     "Enable Corfu completion in the minibuffer, e.g., `eval-expression'."
     (when (where-is-internal #'completion-at-point (list (current-local-map)))
       (completion-preview-mode 1)))
  (cl-pushnew 'org-self-insert-command completion-preview-commands :test #'equal))
#+end_src

* hydra

Quick action with hydra

#+begin_src emacs-lisp



(defhydra hydra-base ()
  "
_a_genda         | _f_lycheck         |      _n_otdeft
_d_ap            | _l_sp              |      _o_utline & outshine
_e_in            | _t_ab
               |                  |      _w_indow
"
  ("a" hydra-agenda-view/body :exit t)
  ("d" dap-hydra/body :exit t)
  ("f" hydra-flycheck/body :exit t)
  ("l" hydra-lsp/body :exit t)
  ("n" notdeft-global-hydra/body :exit t)
  ("w" hydra-window/body :exit t)
  ("o" hydra-outline/body :exit t)
  ("t" hydra-tab/body :exit t)
  ("e" hydra-ein/body :exit t))

(defhydra hydra-window (:exit nil)
  "
Movement^^        ^Split^         ^Switch^    ^Resize^
----------------------------------------------------------------
_h_ ←          _v_ertical      _b_uffer      _q_ ←→ shrink
_j_ ↓          _x_ horizontal  _f_ind files  _w_ ←→ grow
_k_ ↑          _z_ undo        _a_ce 1       _e_ ↑↓ shrink
_l_ →          _Z_ reset       _s_wap        _r_ ↑↓ grow
_F_ollow       _D_lt Other     _S_ave        _m_aximize
_SPC_ cancel   _o_nly this     _d_elete
"
  ("h" windmove-left )
  ("j" windmove-down )
  ("k" windmove-up )
  ("l" windmove-right )
  ("q" shrink-window-horizontally)
  ("w" enlarge-window-horizontally)
  ("e" shrink-window)
  ("r" enlarge-window)
  ("b" helm-mini)
  ("f" helm-find-files)
  ("F" follow-mode)
  ("a" (lambda ()
	 (interactive)
	 (ace-window 1)
	 (add-hook 'ace-window-end-once-hook
		   'hydra-window/body))
   )
  ("v" (lambda ()
	 (interactive)
	 (split-window-right)
	 (windmove-right))
   )
  ("x" (lambda ()
	 (interactive)
	 (split-window-below)
	 (windmove-down))
   )
  ("s" (lambda ()
	 (interactive)
	 (ace-window 4)
	 (add-hook 'ace-window-end-once-hook
		   'hydra-window/body)))
  ("S" save-buffer)
  ("d" delete-window)
  ("D" (lambda ()
	 (interactive)
	 (ace-window 16)
	 (add-hook 'ace-window-end-once-hook
		   'hydra-window/body)))
  ("o" delete-other-windows)
  ("m" ace-maximize-window)
  ("z" (progn
	 (winner-undo)
	 (setq this-command 'winner-undo)))
  ("Z" winner-redo)
  ("SPC" nil))

;; (defhydra hydra-git-gutter (:body-pre (git-gutter+-mode 1)
;;              :hint nil)
;;   "
;; Git gutter:
;;   _j_: next hunk        _s_tage hunk     _q_uit
;;   _k_: previous hunk    _r_evert hunk    _Q_uit and deactivate git-gutter
;;   ^ ^                   _p_opup hunk
;;   _h_: first hunk
;;   _l_: last hunk
;; "
;;   ;; set start _R_evision
;;   ("j" git-gutter+:next-hunk)
;;   ("k" git-gutter+:previous-hunk)
;;   ("h" (progn (goto-char (point-min))
;;               (git-gutter+:next-hunk 1)))
;;   ("l" (progn (goto-char (point-min))
;;               (git-gutter+:previous-hunk 1)))
;;   ("s" git-gutter+:stage-hunks)
;;   ("r" git-gutter+:revert-hunks)
;;   ("p" git-gutter+:popup-hunk)
;;   ;;("R" git-gutter:set-start-revision)
;;   ("q" nil :color blue)
;;   ("Q" (progn (git-gutter+-mode -1)
;;               ;; git-gutter-fringe doesn't seem to
;;               ;; clear the markup right away
;;               (sit-for 0.1)
;;               ;;(git-gutter:clear)
;;               )
;;    :color blue)
;;   )

;; from https://www.reddit.com/r/emacs/comments/8of6tx/tip_how_to_be_a_beast_with_hydra/
(defhydra hydra-outline (:color blue :hint nil)
  "
    ^Hide^             ^Show^           ^Move
    ^^^^^^------------------------------------------------------
    _q_: sublevels     _a_: all         _u_: up
    _t_: body          _e_: entry       _n_: next visible
    _o_: other         _i_: children    _p_: previous visible
    _c_: entry         _k_: branches    _f_: forward same level
    _l_: leaves        _s_: subtree     _b_: backward same level
    _d_: subtree
    "
  ;; Hide
  ("q" hide-sublevels)    ; Hide everything but the top-level headings
  ("t" hide-body)         ; Hide everything but headings (all body lines)
  ("o" hide-other)        ; Hide other branches
  ("c" hide-entry)        ; Hide this entry's body
  ("l" hide-leaves)       ; Hide body lines in this entry and sub-entries
  ("d" hide-subtree)      ; Hide everything in this entry and sub-entries
  ;; Show
  ("a" show-all)          ; Show (expand) everything
  ("e" show-entry)        ; Show this heading's body
  ("i" show-children)     ; Show this heading's immediate child sub-headings
  ("k" show-branches)     ; Show all sub-headings under this heading
  ("s" show-subtree)      ; Show (expand) everything in this heading & below
  ;; Move
  ("u" outline-up-heading)                ; Up
  ("n" outline-next-visible-heading)      ; Next
  ("p" outline-previous-visible-heading)  ; Previous
  ("f" outline-forward-same-level)        ; Forward - same level
  ("b" outline-backward-same-level)       ; Backward - same level
  ("z" nil "leave")
  )

(defhydra hydra-ein (:hint nil)
  "
 Operations on Cells^^^^^^            On Worksheets^^^^              Other
 ----------------------------^^^^^^   ------------------------^^^^   ----------------------------------^^^^
 [_k_/_j_]^^     select prev/next     [_h_/_l_]   select prev/next   [_t_]^^         toggle output
 [_K_/_J_]^^     move up/down         [_H_/_L_]   move left/right    [_C-l_/_C-S-l_] clear/clear all output
 [_C-k_/_C-j_]^^ merge above/below    [_1_.._9_]  open [1st..last]   [_C-o_]^^       open console
 [_O_/_o_]^^     insert above/below   [_+_/_-_]   create/delete      [_C-s_/_C-r_]   save/rename notebook
 [_y_/_p_/_d_]   copy/paste           ^^^^                           [_x_]^^         close notebook
 [_u_]^^^^       change type          ^^^^                           [_q_]^^         quit transient-state
 [_RET_]^^^^     execute"

  ("q" nil :exit t)
  ;; ("?" spacemacs//ipython-notebook-ms-toggle-doc)
  ("h" ein:notebook-worksheet-open-prev-or-last)
  ("j" ein:worksheet-goto-next-input)
  ("k" ein:worksheet-goto-prev-input)
  ("l" ein:notebook-worksheet-open-next-or-first)
  ("H" ein:notebook-worksheet-move-prev)
  ("J" ein:worksheet-move-cell-down)
  ("K" ein:worksheet-move-cell-up)
  ("L" ein:notebook-worksheet-move-next)
  ("t" ein:worksheet-toggle-output)
  ("d" ein:worksheet-kill-cell)
  ("R" ein:worksheet-rename-sheet)
  ("y" ein:worksheet-copy-cell)
  ("p" ein:worksheet-yank-cell)
  ("o" ein:worksheet-insert-cell-below)
  ("O" ein:worksheet-insert-cell-above)
  ("u" ein:worksheet-change-cell-type)
  ("RET" ein:worksheet-execute-cell-and-goto-next)
  ;; Output
  ("C-l" ein:worksheet-clear-output)
  ("C-S-l" ein:worksheet-clear-all-output)
  ;;Console
  ("C-o" ein:console-open)
  ;; Merge and split cells
  ("C-k" ein:worksheet-merge-cell)
  ("C-j"
   (lambda ()
     (interactive)
     (ein:worksheet-merge-cell (ein:worksheet--get-ws-or-error) (ein:worksheet-get-current-cell) t t)))
  ("s" ein:worksheet-split-cell-at-point)
  ;; Notebook
  ("C-s" ein:notebook-save-notebook-command)
  ("C-r" ein:notebook-rename-command)
  ("1" ein:notebook-worksheet-open-1th)
  ("2" ein:notebook-worksheet-open-2th)
  ("3" ein:notebook-worksheet-open-3th)
  ("4" ein:notebook-worksheet-open-4th)
  ("5" ein:notebook-worksheet-open-5th)
  ("6" ein:notebook-worksheet-open-6th)
  ("7" ein:notebook-worksheet-open-7th)
  ("8" ein:notebook-worksheet-open-8th)
  ("9" ein:notebook-worksheet-open-last)
  ("+" ein:notebook-worksheet-insert-next)
  ("-" ein:notebook-worksheet-delete)
  ("x" ein:notebook-close))

;; keymap https://github.com/Timidger/dotfiles/blob/master/.emacs.d/layers/+emacs/org/packages.el
(defhydra hydra-agenda-view (:hint nil)
  "
Headline^^            Visit entry^^               Filter^^                    Date^^               Toggle mode^^        View^^             Clock^^        Other^^
--------^^---------   -----------^^------------   ------^^-----------------   ----^^-------------  -----------^^------  ----^^---------    -----^^------  -----^^-----------
[_ht_] set status     [_SPC_] in other window     [_ft_] by tag               [_ds_] schedule      [_tf_] follow        [_vd_] day         [_ci_] in      [_gr_] reload
[_hk_] kill           [_TAB_] & go to location    [_fr_] refine by tag        [_dd_] set deadline  [_tl_] log           [_vw_] week        [_co_] out     [_._]  go to today
[_hr_] refile         [_RET_] & del other windows [_fc_] by category          [_dt_] timestamp     [_ta_] archive       [_vt_] fortnight   [_ck_] cancel  [_gd_] go to date
[_hA_] archive        [_o_]   link                [_fh_] by top headline      [_+_]  do later      [_tr_] clock report  [_vm_] month       [_cj_] jump    ^^
[_hT_] set tags       ^^                          [_fx_] by regexp            [_-_]  do earlier    [_td_] diaries       [_vy_] year        ^^             ^^
[_hp_] set priority   ^^                          [_fd_] delete all filters   ^^                   ^^                   [_vn_] next span   ^^             ^^
^^                    ^^                          ^^                          ^^                   ^^                   [_vp_] prev span   ^^             ^^
^^                    ^^                          ^^                          ^^                   ^^                   [_vr_] reset       ^^             ^^
[_q_] quit
"
  ;; Entry
  ("ht" org-agenda-todo)
  ("hk" org-agenda-kill)
  ("hr" org-agenda-refile)
  ("hA" org-agenda-archive-default)
  ("hT" org-agenda-set-tags)
  ("hp" org-agenda-priority)

  ;; Visit entry
  ("SPC" org-agenda-show-and-scroll-up)
  ("<tab>" org-agenda-goto :exit t)
  ("TAB" org-agenda-goto :exit t)
  ("RET" org-agenda-switch-to :exit t)
  ("o"   link-hint-open-link :exit t)

  ;; Date
  ("ds" org-agenda-schedule)
  ("dd" org-agenda-deadline)
  ("dt" org-agenda-date-prompt)
  ("+" org-agenda-do-date-later)
  ("-" org-agenda-do-date-earlier)

  ;; View
  ("vd" org-agenda-day-view)
  ("vw" org-agenda-week-view)
  ("vt" org-agenda-fortnight-view)
  ("vm" org-agenda-month-view)
  ("vy" org-agenda-year-view)
  ("vn" org-agenda-later)
  ("vp" org-agenda-earlier)
  ("vr" org-agenda-reset-view)

  ;; Toggle mode
  ("tf" org-agenda-follow-mode)
  ("tl" org-agenda-log-mode)
  ("ta" org-agenda-archives-mode)
  ("tr" org-agenda-clockreport-mode)
  ("td" org-agenda-toggle-diary)

  ;; Filter
  ("ft" org-agenda-filter-by-tag)
  ("fr" org-agenda-filter-by-tag-refine)
  ("fc" org-agenda-filter-by-category)
  ("fh" org-agenda-filter-by-top-headline)
  ("fx" org-agenda-filter-by-regexp)
  ("fd" org-agenda-filter-remove-all)

  ;; Clock
  ("ci" org-agenda-clock-in :exit t)
  ("co" org-agenda-clock-out)
  ("ck" org-agenda-clock-cancel)
  ("cj" org-agenda-clock-goto :exit t)

  ;; Other
  ("q" nil :exit t)
  ("gr" org-agenda-redo)
  ("." org-agenda-goto-today)
  ("gd" org-agenda-goto-date))

(defhydra dumb-jump-hydra (:color blue :columns 3)
  "Dumb Jump"
  ("j" dumb-jump-go "Go")
  ("o" dumb-jump-go-other-window "Other window")
  ("e" dumb-jump-go-prefer-external "Go external")
  ("x" dumb-jump-go-prefer-external-other-window "Go external other window")
  ("i" dumb-jump-go-prompt "Prompt")
  ("l" dumb-jump-quick-look "Quick look")
  ("b" dumb-jump-back "Back"))

(defhydra hydra-flycheck (:hint nil)
  "
  _a_: list errors   _p_: prev error   _<_ : first error _w_: copy message
  _c_: check buffer  _n_: next error   _>_ : last error  _C_: clear errors    "
  ("a" flycheck-list-errors)
  ("n" flycheck-next-error)
  ("p" flycheck-previous-error)
  ("<" flycheck-first-error)
  (">" (lambda ()
	 (interactive)
	 (goto-char (point-max)) (flycheck-previous-error)))
  ("c" flycheck-buffer)
  ("C" flycheck-clear)
  ("w" flycheck-copy-errors-as-kill)
  ("q" nil "quit" :color "deep sky blue"))

;; (defhydra hydra-clock (:color blue)
;;     "
;;     ^
;;     ^Clock^             ^Do^
;;     ^─────^─────────────^──^─────────
;;     _q_ quit            _c_ cancel
;;     ^^                  _d_ display
;;     ^^                  _e_ effort
;;     ^^                  _i_ in
;;     ^^                  _j_ jump
;;     ^^                  _o_ out
;;     ^^                  _r_ report
;;     ^^                  ^^
;;     "
;;     ("q" nil)
;;     ("c" org-clock-cancel :color pink)
;;     ("d" org-clock-display)
;;     ("e" org-clock-modify-effort-estimate)
;;     ("i" org-clock-in)
;;     ("j" org-clock-goto)
;;     ("o" org-clock-out)
;;     ("r" org-clock-report)
;;   )

;; (defhydra hydra-straight-helper (:hint nil)
;;   "
;; _c_heck all       |_f_etch all     |_m_erge all      |_n_ormalize all   |p_u_sh all
;; _C_heck package   |_F_etch package |_M_erge package  |_N_ormlize package|p_U_sh package
;; ----------------^^+--------------^^+---------------^^+----------------^^+------------||_q_uit||
;; _r_ebuild all     |_p_ull all      |_v_ersions freeze|_w_atcher start   |_g_et recipe
;; _R_ebuild package |_P_ull package  |_V_ersions thaw  |_W_atcher quit    |prun_e_ build"
;;   ("c" straight-check-all)
;;   ("C" straight-check-package)
;;   ("r" straight-rebuild-all)
;;   ("R" straight-rebuild-package)
;;   ("f" straight-fetch-all)
;;   ("F" straight-fetch-package)
;;   ("p" straight-pull-all)
;;   ("P" straight-pull-package)
;;   ("m" straight-merge-all)
;;   ("M" straight-merge-package)
;;   ("n" straight-normalize-all)
;;   ("N" straight-normalize-package)
;;   ("u" straight-push-all)
;;   ("U" straight-push-package)
;;   ("v" straight-freeze-versions)
;;   ("V" straight-thaw-versions)
;;   ("w" straight-watcher-start)
;;   ("W" straight-watcher-quit)
;;   ("g" straight-get-recipe)
;;   ("e" straight-prune-build)
;;   ("q" nil))


;; (defhydra sm/smerge-hydra
;;     (:color pink :hint nil :post (smerge-auto-leave))
;;   "
;; ^Move^       ^Keep^               ^Diff^                 ^Other^
;; ^^-----------^^-------------------^^---------------------^^-------
;; _n_ext       _b_ase               _<_: upper/base        _C_ombine
;; _p_rev       _u_pper              _=_: upper/lower       _r_esolve
;; ^^           _l_ower              _>_: base/lower        _k_ill current
;; ^^           _a_ll                _R_efine
;; ^^           _RET_: current       _E_diff
;; "
;;   ("n" smerge-next)
;;   ("p" smerge-prev)
;;   ("b" smerge-keep-base)
;;   ("u" smerge-keep-upper)
;;   ("l" smerge-keep-lower)
;;   ("a" smerge-keep-all)
;;   ("RET" smerge-keep-current)
;;   ("\C-m" smerge-keep-current)
;;   ("<" smerge-diff-base-upper)
;;   ("=" smerge-diff-upper-lower)
;;   (">" smerge-diff-base-lower)
;;   ("R" smerge-refine)
;;   ("E" smerge-ediff)
;;   ("C" smerge-combine-with-next)
;;   ("r" smerge-resolve)
;;   ("k" smerge-kill-current)
;;   ("ZZ" (lambda ()
;;           (interactive)
;;           (save-buffer)
;;           (bury-buffer))
;;  "Save and bury buffer" :color blue)
;;   ("q" nil "cancel" :color blue))


(defhydra hydra-smerge (:color pink
			       :hint nil
			       :pre (unless smerge-mode (smerge-mode +1))
			       :post (smerge-auto-leave))
  "
							 [smerge]
^Move^       ^Keep^               ^Diff^                 ^Other^
  ╭─────────────────────────────────────────────────────────╯
_n_ext       _b_ase               _<_: upper/base        _C_ombine
_p_rev       _m_ine              _=_: upper/lower       _r_esolve
_C-k_        _o_ther             _>_: base/lower        _R_move
_k_ ↑       _a_ll                _R_efine
_j_ ↓       _RET_: current       _E_diff
_C-j_
"
  ("n" smerge-next)
  ("p" smerge-prev)
  ("C-j" smerge-next)
  ("C-k" smerge-prev)
  ("j" next-line)
  ("k" previous-line)
  ("b" smerge-keep-base)
  ("m" smerge-keep-upper) ;; keep mine
  ("o" smerge-keep-lower) ;; keep other
  ;; ("u" smerge-keep-upper)
  ;; ("l" smerge-keep-lower)
  ("a" smerge-keep-all)
  ("RET" smerge-keep-current)
  ("\C-m" smerge-keep-current)
  ("<" smerge-diff-base-upper)
  ("=" smerge-diff-upper-lower)
  (">" smerge-diff-base-lower)
  ("H" smerge-refine)
  ("E" smerge-ediff)
  ("C" smerge-combine-with-next)
  ("r" smerge-resolve)
  ("R" smerge-kill-current)
  ("ZZ" (lambda ()
	  (interactive)
	  (save-buffer)
	  (bury-buffer))
   "Save and bury buffer" :color blue)
  ("q" nil "cancel" :color blue))

(defhydra hydra-tab (:color red :hint nil)
  "
						^tab^
-------^^-----------------------------^^--------------------------------^^-----------------------^^-------------------
    ^Switch^                        ^Move^                        ^Create & Kill^              ^Other^
_h_:       left tab              _<_: tab to left               _n_: new tab                  _rr_: rename
_l_:       right tab             _>_: tab to right              _N_: new tab with name        _rp_: rename default
[_1_.._9_]: switch [1st..last]     [_m1_..._9_]: move [1st..last]   _x_: kill                     _U_ : undo
_t_:      select tab 											_R_ : redo
"

  ;; ("u" winner-undo)
  ;; ;; doesn't work
  ;; ;; ("C-r" winner-redo)

  ;; ;; tab-bar-mode (Emacs 27)
  ("h"  #'tab-bar-switch-to-prev-tab)
  ("l"  #'tab-bar-switch-to-next-tab)
  ("<"  #'toy/tab-move-left)
  (">"  #'toy/tab-move-right)

  ;; ;; FIXME:
  ;; ;; ("w" #'toy/hydra-window/body)
  ;; ("w" (lambda () (interactive) (hydra-disable)
  ;;           (toy/hydra-window/body)))

  ("rr" #'tab-bar-rename-tab)
  ;; rename to project name
  ("rp" #'toy/set-tab-name-default) ;; NOTE: defined in `ide.el`

  ("n" #'tab-bar-new-tab)
  ;; new tab and set name
  ("N" (lambda () (interactive)
	 (tab-bar-new-tab)
	 (call-interactively 'tab-bar-rename-tab)))
  ("x" #'tab-bar-close-tab)

  ;; select tab
  ("1" (lambda () (interactive) (tab-bar-select-tab 1)))
  ("2" (lambda () (interactive) (tab-bar-select-tab 2)))
  ("3" (lambda () (interactive) (tab-bar-select-tab 3)))
  ("4" (lambda () (interactive) (tab-bar-select-tab 4)))
  ("5" (lambda () (interactive) (tab-bar-select-tab 5)))
  ("6" (lambda () (interactive) (tab-bar-select-tab 6)))
  ("7" (lambda () (interactive) (tab-bar-select-tab 7)))
  ("8" (lambda () (interactive) (tab-bar-select-tab 8)))
  ("9" (lambda () (interactive) (tab-bar-select-tab 9)))

  ;; move tab
  ("m1" (lambda () (interactive) (tab-bar-move-tab-to 1)))
  ("m2" (lambda () (interactive) (tab-bar-move-tab-to 2)))
  ("m3" (lambda () (interactive) (tab-bar-move-tab-to 3)))
  ("m4" (lambda () (interactive) (tab-bar-move-tab-to 4)))
  ("m5" (lambda () (interactive) (tab-bar-move-tab-to 5)))
  ("m6" (lambda () (interactive) (tab-bar-move-tab-to 6)))
  ("m7" (lambda () (interactive) (tab-bar-move-tab-to 7)))
  ("m8" (lambda () (interactive) (tab-bar-move-tab-to 8)))
  ("m9" (lambda () (interactive) (tab-bar-move-tab-to 9)))

  ;; winner
  ("U" winner-undo)
  ("R" winner-redo)

  ("t" my/tab-bar-select-tab-dwim)

  ("q" nil "cancel" :color blue)
  )

(defun toy/tab-move-right ()
  (interactive)
  (let* ((ix (tab-bar--current-tab-index))
	 (n-tabs (length (funcall tab-bar-tabs-function)))
	 (next-ix (mod (+ ix 1) n-tabs)))
    ;; use 1-based index
    (tab-bar-move-tab-to (+ 1 next-ix))))

(defun toy/tab-move-left ()
  (interactive)
  (let* ((ix (tab-bar--current-tab-index))
	 (n-tabs (length (funcall tab-bar-tabs-function)))
	 (next-ix (mod (+ ix n-tabs -1) n-tabs)))
    ;; use 1-based index
    (tab-bar-move-tab-to (+ 1 next-ix))))


(defhydra hydra-lsp (:exit t :hint nil)
  "
 ^Buffer^               ^ ^                     ^Server^          ^Lens^
-------------------------------------------------------------------------------------
 [_d_] describe        [_o_] definition        [_ws_] describe    [_ls_] show
 [_a_] execute         [_e_] references        [_wS_] shutdown    [_lh_] hide
 [_f_] format          [_t_] to-definition     [_wr_] restart     [_lt_] toggle
 [_r_] rename          [_i_] to-implem         [_wa_] add         [_ll_] saveLogs
                                               [_wm_] switch
          ^ ^                                  [_wd_] remove
"
  ("," xref-find-definitions )
  ("'" xref-pop-marker-stack)
  ("." xref-find-references)
  ("o" xref-find-definitions-other-window )
  ("d" lsp-describe-thing-at-point)
  ("a" lsp-execute-code-action)
  ("f" lsp-format-buffer)
  ("r" lsp-rename)
  ;; ("s" netrom/helm-lsp-workspace-symbol-at-point "Helm search")
  ;; ("S" netrom/helm-lsp-global-workspace-symbol-at-point "Helm global search")
  ("d" lsp-describe-thing-at-point)
  ("wr" lsp-restart-workspace)
  ("wS" lsp-shutdown-workspace)
  ("wa" lsp-workspace-folders-add)
  ("wd" lsp-workspace-folders-remove)
  ("wm" lsp-workspace-folders-switch)
  ("ws" lsp-describe-session)
  ("o" lsp-find-definition)
  ("e" lsp-find-references)
  ("t" lsp-goto-type-definition)
  ("i" lsp-goto-implementation)
  ("ls" lsp-lens-show)
  ("lh" lsp-lens-hide)
  ("lt" lsp-lens-mode)
  ("ll" lsp-save-logs)
  ("q" nil :color blue)
)

#+end_src

* Git integration with magit & diff-hl & smerge

To manage the git repository, use builtin package ~vc~.

#+begin_src emacs-lisp

;; Define handy function to insert Gerrit-style Change-Id trailers at the cursor
(defun poly/insert-change-id ()
  "Insert a Gerrit-style Change-Id at the cursor."
  (interactive)
  (insert (concat "Change-Id: I" (substring (secure-hash 'sha256 (number-to-string (random t))) 0 40))))

(use-package magit
  :commands (magit-file-delete magit-status magit-checkout)
  :hook ((magit-pop-mode . hide-mode-line-mode)
	 ;; (git-commit-setup . git-commit-turn-on-flyspell)
	 (magit-mode . hack-dir-local-variables-non-file-buffer))
  :custom
  (magit-section-initial-visibility-alist '((stashes . show)
                                            (unpushed . show)
                                            (pullreqs . show)
                                            (issues . show)))
  ;; (magit-refresh-verbose t) ;; debug only
  ;; (magit-display-buffer-function #'magit-display-buffer-fullframe-status-v1)
  (magit-display-buffer-function #'magit-display-buffer-fullcolumn-most-v1)
  (magit-revert-buffers 'silent)
  (git-commit-summary-max-length 50)
  (magit-log-section-commit-count 5)
  (magit-diff-options '("--minimal" "--patience" "-b"))
  (magit-tag-arguments '("--annotate" "--sign"))
  (magit-merge-arguments '("--no-ff"))
  (magit-rebase-arguments '("--autostash"))
  ;; use colored graph lines. Could be a performance issue.
  (magit-log-arguments '("-n64" "--graph" "--decorate" "--color" "--stat"))
  (magit-diff-use-overlays nil)
  (magit-use-overlays nil)
  (magit-auto-revert-mode nil)
  (git-rebase-auto-advance  nil)
  (magit-stage-all-confirm nil)
  (magit-commit-squash-commit 'marked-or-curren)
  (magit-push-always-verify ni) ;; cuz it says so
  ;; (magit-diff-refine-hunk nil)
  ;; (magit-diff-highlight-hunk-body nil)
  (git-commit-finish-query-functions nil)
  (magit-log-section-commit-count 10)
  (magit-log-section-arguments '("--graph" "--decorate" "--color"))
  ;; (magit-log-margin '(t "%Y-%m-%d %H:%M:%S" magit-log-margin-width t 18))
  (magit-log-margin  '(t "%m/%d/%Y %H:%M " magit-log-margin-width t 18))
  ;; (magit-log-margin-show-committer-date t)
  ;; (magit-git-executable "/usr/local/bin/git")
  :init
  ;; Must be set early to prevent ~/.emacs.d/transient from being created
  (setq transient-levels-file  (concat poly-etc-dir "transient/levels")
	transient-values-file  (concat poly-etc-dir "transient/values")
	transient-history-file (concat poly-etc-dir "transient/history"))

  ;; Have magit-status go full screen and quit to previous
  ;; configuration.  Taken from
  ;; http://whattheemacsd.com/setup-magit.el-01.html#comment-748135498
  ;; and http://irreal.org/blog/?p=2253
  (defun my/magit-status-around (orig-fn &rest args)
    (window-configuration-to-register :magit-fullscreen)
    (apply orig-fn args)
    (delete-other-windows))
  (advice-add #'magit-status :around 'my/magit-status-around)

  (defun my/magit-quit-window-after (orig-fn &rest args)
    (jump-to-register :magit-fullscreen)
    (apply orig-fn args))
  (advice-add #'magit-quit-window :after 'my/magit-quit-window-after)

  ;; (defadvice magit-quit-window (after magit-restore-screen activate)
  ;;   (jump-to-register :magit-fullscreen))
  ;; (setq
  ;; ;; Use flyspell in the commit buffer
  ;; (add-hook 'git-commit-setup-hook 'git-commit-turn-on-flyspell)
  :config

  (setq magit-define-global-key-bindings t)
  (setq magit-status-sections-hook
	'(
	  magit-insert-status-headers
	  magit-insert-merge-log
	  magit-insert-rebase-sequence
	  ;; gerrit-magit-insert-status
	  ;; magit-insert-am-sequence
	  ;; magit-insert-sequencer-sequence
	  ;; magit-insert-bisect-output
	  ;; magit-insert-bisect-rest
	  ;; magit-insert-bisect-log
	  magit-insert-untracked-files
	  magit-insert-unstaged-changes
	  magit-insert-staged-changes
	  magit-insert-unpushed-cherries
	  magit-insert-stashes
	  ;; magit-insert-recent-commits
	  magit-insert-unpulled-from-pushremote
	  magit-insert-unpushed-to-upstream
	  ;; gerrit-magit-insert-status
	  ;; magit-insert-unpushed-to-pushremote
	  ;; magit-insert-unpulled-from-upstream
	  ))

  (setq magit-status-headers-hook
	'(
	  ;; magit-insert-repo-header
	  magit-insert-remote-header
	  ;; magit-insert-error-header
	  magit-insert-diff-filter-header
	  magit-insert-head-branch-header
	  magit-insert-upstream-branch-header
	  magit-insert-push-branch-header
	  magit-insert-tags-header
	  ))

  (setq magit-refresh-status-buffer nil)
  (setq auto-revert-buffer-list-filter
	'magit-auto-revert-repository-buffer-p)
  (remove-hook 'magit-refs-sections-hook 'magit-insert-tags)
  (remove-hook 'server-switch-hook 'magit-commit-diff)

  ;; Opening repo externally
  (defun poly/parse-repo-url (url)
    "convert a git remote location as a HTTP URL"
    (if (string-match "^http" url)
	url
      (replace-regexp-in-string "\\(.*\\)@\\(.*\\):\\(.*\\)\\(\\.git?\\)"
				(concat (if (string-match "17usoft.com" url) "http" "https") "://\\2/\\3")
				url)))
  (defun poly/magit-open-repo ()
    "open remote repo URL"
    (interactive)
    (let ((url (magit-get "remote" "origin" "url")))
      (progn
	(browse-url (poly/parse-repo-url url))
	(message "opening repo %s" url))))

  (defun m/magit-display-buffer-traditional (buffer)
    "Like magit-display-buffer-traditional, but re-uses window for status mode, too."
    (display-buffer
     buffer (if (not (memq (with-current-buffer buffer major-mode)
			   '(magit-process-mode
			     magit-revision-mode
			     magit-diff-mode
			     magit-stash-mode
			     magit-status-mode)))
		'(display-buffer-same-window)
	      nil)))

  (setq magit-display-buffer-function 'm/magit-display-buffer-traditional)

  (defun m/magit-reset-author (&optional args)
    "Resets the authorship information for the last commit"
    (interactive)
    (magit-run-git-async "commit" "--amend" "--no-edit" "--reset-author"))

  ;; (magit-define-popup-action 'magit-commit-popup
  ;;   ?R "Reset author" 'm/magit-reset-author)
  (transient-append-suffix 'magit-commit
    "S"
    '("R" "Reset author" m/magit-reset-author))
  :bind
  (:map transient-base-map
	("q" . transient-quit-one)
	("<escape>" . transient-quit-one))
  (:map transient-edit-map
	("q" . transient-quit-one)
	("<escape>" . transient-quit-one))
  (:map transient-sticky-map
	("q" . transient-quit-one)
	("<escape>" . transient-quit-one)))

;; (use-package magit-delta
;;   :if (executable-find "delta")
;;   :hook (magit-mode . magit-delta-mode))

(use-package magit-gitflow
  :after magit
  :commands magit-gitflow-popup
  :hook (magit-mode . turn-on-magit-gitflow))

(use-package magit-todos
  :disabled
  :diminish
  :after magit
  :init
  (setq magit-todos-ignored-keywords '("NOTE" "DONE" "FAIL" "PROG")
	magit-todos-exclude-globs '("legacies/*" "vendor/"))
  :config
  (setq magit-todos-keyword-suffix "\\(?:([^)]+)\\)?:?") ; make colon optional
  (magit-todos-mode 1))


(use-package comment-tags
  :disabled
  :config
  (setq comment-tags-keyword-faces
        `(("TODO" . ,(list :weight 'bold :foreground "#28ABE3"))
          ("FIXME" . ,(list :weight 'bold :foreground "#DB3340"))
          ("BUG" . ,(list :weight 'bold :foreground "#DB3340"))
          ("HACK" . ,(list :weight 'bold :foreground "#E8B71A"))
          ("KLUDGE" . ,(list :weight 'bold :foreground "#E8B71A"))
          ("XXX" . ,(list :weight 'bold :foreground "#F7EAC8"))
          ("INFO" . ,(list :weight 'bold :foreground "#F7EAC8"))
          ("DONE" . ,(list :weight 'bold :foreground "#1FDA9A"))))
  (setq comment-tags-comment-start-only t
        comment-tags-require-colon nil
        comment-tags-case-sensitive t
        comment-tags-show-faces nil)
  :hook
  (prog-mode . comment-tags-mode))


;; git-gutter-plus - View, stage and revert Git changes from the buffer (inspired by package of same name from vim)
;; diff-hl is better
(use-package git-gutter+
  :diminish "Git↓"
  :demand t
  :disabled
  :bind (("C-c g n" . git-gutter+-next-hunk)
	 ("C-c g p" . git-gutter+-previous-hunk))
  :config
  (defun git-gutter+-remote-default-directory (dir file)
    (let* ((vec (tramp-dissect-file-name file))
	   (method (tramp-file-name-method vec))
	   (user (tramp-file-name-user vec))
	   (domain (tramp-file-name-domain vec))
	   (host (tramp-file-name-host vec))
	   (port (tramp-file-name-port vec)))
      (tramp-make-tramp-file-name method user domain host port dir)))

  (defun git-gutter+-remote-file-path (dir file)
    (let ((file (tramp-file-name-localname (tramp-dissect-file-name file))))
      (replace-regexp-in-string (concat "\\`" dir) "" file)))
  (global-git-gutter+-mode)
  )

(use-package git-gutter-fringe+
  :disabled)

;; git-messenger - Provides a function popup commit message at current line (port of package of same name from vim)
(use-package git-messenger
  :bind ("C-c g p" . git-messenger:popup-message)
  :init
  (custom-set-variables
   '(git-messenger:use-magit-popup t))
  (setq git-messenger:show-detail t)
  :config
  (progn
    (define-key git-messenger-map (kbd "RET") 'git-messenger:popup-close)))

;; git-timemachine - Step through historic versions of a git controlled file
(use-package git-timemachine
  :bind ("C-c g t" . git-timemachine-toggle))

;; ;; gitignore-mode - Major mode for various Git configuration files
;; (use-package git-modes)

;; browse-at-remote - Browse target page on github/gitlab/bitbucket
(use-package browse-at-remote
  :config
  (add-to-list 'browse-at-remote-remote-type-regexps '(:host "^git\\.17usoft\\.com$" :type "gitlab" :actual-host "git.17usoft.com"))
  ;; (transient-append-suffix 'magit-file-dispatch "m"
  ;;  '("o" "Browse file" browse-at-remote))
  ;; (transient-replace-suffix 'magit-dispatch "o"
   ;; '("o" "Browse file" browse-at-remote))
    )

;; ;; based on http://manuel-uberti.github.io/emacs/2018/02/17/magit-bury-buffer/
;; (defun magit-kill-buffers ()
;;   "Restore window configuration and kill all Magit buffers."
;;   (interactive)
;;   (let ((buffers (magit-mode-get-buffers)))
;;     (magit-restore-window-configuration)
;;     (mapc #'kill-buffer buffers)))

(use-package yaml
  :disabled)

(use-package forge
  :after (magit yaml)
  :disabled
  :commands forge-create-pullreq forge-create-issue
  :custom
  (forge-database-file (expand-file-name "forge/forge-database.sqlite" poly-etc-dir))
  ;; (custom-set-variables '(forge-post-mode-hook '(visual-line-mode)))
  (forge-bug-reference-hooks
   '(git-commit-setup-hook magit-mode-hook))
  :config
  (setq forge-alist
	(append forge-alist
		'(("git.17usoft.com" "git.17usoft.com/api/v4" "git.17usoft.com" forge-gitlab-repository)
		  ("github.com" "api.github.com" "github.com" forge-github-repository))))
  (transient-append-suffix 'forge-dispatch '(0)
    ["Edit"
     ("e a" "assignees" forge-edit-topic-assignees)
     ("e r" "review requests" forge-edit-topic-review-requests)])
  ;; ;; remove some hooks for magit performance-s
  ;; (remove-hook 'magit-status-sections-hook 'forge-insert-pullreqs)
  ;; (remove-hook 'magit-status-sections-hook 'forge-insert-issues)
  )

;; (use-package ghub
;;   :after (magit forge)
;;   ;; :custom
;;   ;; (ghub-insecure-hosts '("git.17usoft.com/api/v4"))
;;   )

(use-package smerge-mode
  :diminish
  :commands (smerge-mode
	     smerge-auto-leave
	     smerge-next
	     smerge-prev
	     smerge-keep-base
	     smerge-keep-upper
	     smerge-keep-lower
	     smerge-keep-all
	     smerge-keep-current
	     smerge-keep-current
	     smerge-diff-base-upper
	     smerge-diff-upper-lower
	     smerge-diff-base-lower
	     smerge-refine
	     smerge-ediff
	     smerge-combine-with-next
	     smerge-resolve
	     smerge-kill-current)
  :after (hydra magit)
  :hook ((find-file . (lambda ()
			(save-excursion
			  (goto-char (point-min))
			  (when (re-search-forward "^<<<<<<< " nil t)
			    (smerge-mode 1)))))

	 ( magit-diff-visit-file . (lambda ()
				     (when smerge-mode
				       (hydra-smerge/body))))))

;; (use-package vdiff)

(use-package gerrit
  :custom
  (gerrit-use-ssl nil)
  (gerrit-host "10.177.9.244:11832")  ;; is needed for REST API calls
  :config
  (setq gerrit-dashboard-query-alist
        '(("Has draft comments" . "has:draft")
          ("Work in progress" . "is:open AND owner:self is:wip")
          ("Outgoing reviews" . "is:open AND owner:self -is:wip ")
          ("Incoming reviews" . "is:open AND -owner:self -is:wip (reviewer:self)")
          ("CCed on" . "is:open AND cc:self")
	  ("Recently closed" . "is:closed  (-is:wip OR owner:self) (owner:self OR reviewer:self OR cc:self) limit:15")))


  ;; (progn
  ;;   ;; (add-hook 'magit-status-sections-hook #'gerrit-magit-insert-status t)
  ;;   (keymap-global-set "C-x i" 'gerrit-upload-transient)
  ;;   (keymap-global-set "C-x o" 'gerrit-download))
  )

(use-package code-review
  :disabled
  :bind (:map forge-topic-mode-map
	      ("C-c r" . code-review-forge-pr-at-point)
	      :map code-review-feedback-section-map
	      ("k" . code-review-section-delete-comment)
	      :map code-review-local-comment-section-map
	      ("k" . code-review-section-delete-comment)
	      :map code-review-reply-comment-section-map
	      ("k" . code-review-section-delete-comment)
	      :map code-review-mode-map
	      ("C-c C-n" . code-review-comment-jump-next)
	      ("C-c C-p" . code-review-comment-jump-previous))
  :custom
  (code-review-db-database-file (expand-file-name "code-review-db.sqlite" poly-cache-dir))
  (code-review-log-file (expand-file-name "code-review-error.log" poly-cache-dir))
  :config
  (setq code-review-auth-login-marker 'forge)
  (setq code-review-gitlab-host "git.17usoft.com/api")
  ;; (setq code-review-gitlab-baseurl "git.17usoft.com")
  (setq code-review-gitlab-base-url "gitlab.com") ;;; default value
  (setq code-review-gitlab-graphql-host nil)
  ;; (setq code-review-gitlab-graphql-host "git.17usoft.com/api")
  )

#+end_src

****  Git sign-off line

Automatically add a git signoff line based on discovered environmental identity.

#+begin_src emacs-lisp :tangle no
(defun mb/auto-git-commit-signoff ()
  "Automatically add a git signoff line based on environmental identity"
  (beginning-of-buffer)
  (unless
      (or ;; Unless we're in a work repo or there's already a signoff line.
       (string-match-p (regexp-quote "/work/") default-directory)
       (word-search-forward "Signed-off-by" nil t))
    (apply #'git-commit-signoff (git-commit-self-ident))))

(add-hook 'git-commit-mode-hook #'mb/auto-git-commit-signoff)
#+end_src
Enable diff-hl in based on major modes.

**** WIP Commits

#+begin_src emacs-lisp
;; TODO: Unfinished. A literal WIP. Need to workaround the race that occurs due
;; to Magit git calls being async.
(defun mb/magit-wip-commit-push (msg)
  "Commit current unstaged changes and push to its upstream."
  (interactive "sCommit Message: ")
  (when (= 0 (length msg))
    (setq msg (format-time-string "WIP (Magit@%Y-%m-%d %H:%M:%S)" (current-time))))
  (when (and buffer-file-name (buffer-modified-p))
    (save-buffer))
  (magit-stage-modified)
  (magit-commit-create (list "-m" msg))
  (magit-push-current-to-pushremote nil))
#+end_src

#+begin_src emacs-lisp
(use-package diff-hl
  :custom-face
  (diff-hl-change ((t (:inherit diff-changed :foreground unspecified :background unspecified))))
  (diff-hl-insert ((t (:inherit diff-added :background unspecified))))
  (diff-hl-delete ((t (:inherit diff-removed :background unspecified))))
  :bind (:map diff-hl-command-map
              ("SPC" . diff-hl-mark-hunk))
  :hook ((after-init . global-diff-hl-mode)
         (after-init . global-diff-hl-show-hunk-mouse-mode)
         (dired-mode . diff-hl-dired-mode))
  :init (setq diff-hl-draw-borders nil)
  :config
  ;; Highlight on-the-fly
  ;; (diff-hl-flydiff-mode 1)

  ;; Set fringe style
  (setq-default fringes-outside-margins t)

  (with-no-warnings
    (defun my-diff-hl-fringe-bmp-function (_type _pos)
      "Fringe bitmap function for use as `diff-hl-fringe-bmp-function'."
      (define-fringe-bitmap 'my-diff-hl-bmp
        (vector (if IS-LINUX #b11111100 #b11100000))
        1 8
        '(center t)))
    (setq diff-hl-fringe-bmp-function #'my-diff-hl-fringe-bmp-function)

    (unless (display-graphic-p)
      ;; Fall back to the display margin since the fringe is unavailable in tty
      (diff-hl-margin-mode 1)
      ;; Avoid restoring `diff-hl-margin-mode'
      (with-eval-after-load 'desktop
        (add-to-list 'desktop-minor-mode-table
                     '(diff-hl-margin-mode nil))))

    ;; Integration with magit
    (with-eval-after-load 'magit
      (add-hook 'magit-pre-refresh-hook #'diff-hl-magit-pre-refresh)
      (add-hook 'magit-post-refresh-hook #'diff-hl-magit-post-refresh)))
  (autoload 'diff-hl-mode "diff-hl" nil t)
  (autoload 'diff-hl-dired-mode "diff-hl-dired" nil t)

  (add-hook 'dired-mode-hook 'diff-hl-dired-mode)
  (add-hook 'prog-mode-hook 'diff-hl-mode)
  (add-hook 'conf-mode-hook 'diff-hl-mode)
  )
#+end_src

pulse

#+begin_src emacs-lisp
;; Pulse current line
(use-package pulse
  :ensure nil
  :custom-face
  (pulse-highlight-start-face ((t (:inherit region :background unspecified))))
  (pulse-highlight-face ((t (:inherit region :background unspecified :extend t))))
  :hook (((dumb-jump-after-jump imenu-after-jump) . my-recenter-and-pulse)
         ((bookmark-after-jump magit-diff-visit-file next-error) . my-recenter-and-pulse-line))
  :init
  (with-no-warnings
    (defun my-pulse-momentary-line (&rest _)
      "Pulse the current line."
      (pulse-momentary-highlight-one-line (point)))

    (defun my-pulse-momentary (&rest _)
      "Pulse the region or the current line."
      (if (fboundp 'xref-pulse-momentarily)
          (xref-pulse-momentarily)
        (my-pulse-momentary-line)))

    (defun my-recenter-and-pulse(&rest _)
      "Recenter and pulse the region or the current line."
      (recenter)
      (my-pulse-momentary))

    (defun my-recenter-and-pulse-line (&rest _)
      "Recenter and pulse the current line."
      (recenter)
      (my-pulse-momentary-line))

    (dolist (cmd '(recenter-top-bottom
                   other-window switch-to-buffer
                   aw-select toggle-window-split
                   windmove-do-window-select
                   pager-page-down pager-page-up
                   treemacs-select-window
                   symbol-overlay-basic-jump))
      (advice-add cmd :after #'my-pulse-momentary-line))

    (dolist (cmd '(pop-to-mark-command
                   pop-global-mark
                   goto-last-change))
      (advice-add cmd :after #'my-recenter-and-pulse))))

;; Pulse modified region
(use-package goggles
:ensure t
  :diminish
  :hook ((prog-mode text-mode) . goggles-mode))
#+end_src

Magit with cz

#+begin_src emacs-lisp :tangle no
(use-package magit-cz
  :vc (:url "https://github.com/yqrashawn/magit-cz" :branch "master" :rev :newest)
  :after magit)
#+end_src

* Input method with emacs-rime

~librime~ is required for this feature.

~emacs-rime~ is the frontend of rime built with emacs input method API.

#+begin_src emacs-lisp
(defun +rime-predicate-is-back-quote-or-tilde ()
  (or (equal rime--current-input-key ?`)
      (equal rime--current-input-key ?~)))

(defun +rime-inline-predicate()
  (or (eq major-mode 'minibuffer-mode) (eq major-mode 'notdeft-mode)))

(defun +rime-disable-predicate()
  (and (not (eq major-mode 'plantuml-mode))
       (or (eq major-mode 'minibuffer-mode) (eq major-mode 'notdeft-mode))))

(defun +rime-predicate-in-code-string ()
  (and (not (eq major-mode 'plantuml-mode))
       (or (rime-predicate-prog-in-code-p) ;; (eq (plist-get (text-properties-at (point)) 'face) 'font-lock-string-face)
	   )))

(defun +rime-predicate-org-syntax-punc-p ()
  (when (eq major-mode 'org-mode)
    (member rime--current-input-key '(91 93 42 126))))

(defun +rime-predicate-md-syntax-punc-p ()
  (when (eq major-mode 'markdown-mode)
    (member rime--current-input-key '(91 93 96))))

(use-package rime
  :vc (:url "https://github.com/DogLooksGood/emacs-rime"
	    :branch "master" :rev :newest)
  :defer t
  :custom
  (rime-disable-predicates '(;; +rime-disable-predicate
			     meow-normal-mode-p
			     meow-motion-mode-p
			     meow-keypad-mode-p
			     meow-beacon-mode-p
			     rime-predicate-evil-mode-p
			     rime-predicate-after-alphabet-char-p
			     rime-predicate-punctuation-line-begin-p
			     rime-predicate-punctuation-after-space-cc-p
			     rime-predicate-punctuation-after-ascii-p
			     rime-predicate-space-after-cc-p
			     ;; rime-predicate-prog-in-code-p
			     +rime-predicate-in-code-string
			     +rime-predicate-org-syntax-punc-p
                             +rime-predicate-md-syntax-punc-p
			     ))
  ;; Auto switch to inline ascii state when after a space after a non-ascii character.
  (rime-inline-predicates '(;; +rime-inline-predicate
			    rime-predicate-space-after-cc-p
                            rime-predicate-current-uppercase-letter-p
			    +rime-predicate-is-back-quote-or-tilde
                            +rime-predicate-md-syntax-punc-p))
  (rime-translate-keybindings '("C-f" "C-b" "C-n" "C-p" "C-g"))
  (default-input-method "rime")
  ;; (rime-cursor "˰")
  ;; (rime-librime-root (concat user-emacs-directory "librime/dist"))
  (rime-librime-root "/opt/librime")
  (rime-emacs-module-header-root "/opt/local/include/emacs")
  (rime-show-preedit t)
  (rime-inline-ascii-holder ?a)
  (rime-cursor "|")
  (window-min-height 1)
  (rime-title "ㄓ")
  (rime-inline-ascii-trigger 'shift-l)
  (rime-deactivate-when-exit-minibuffer t)
  ;; (rime-show-candidate 'posframe)
  ;; (rime-show-candidate 'popup)
  (rime-show-candidate 'minibuffer)
  ;; (rime-posframe-properties (list :background-color "#202325"
  ;;				  :foreground-color "#ddddde" ;; "#dedddd"
  ;;				  :internal-border-width 6))
  ;; (rime-code-face
  ;;  '((t (:inherit default :background "#ffffff" :foreground "#000000"))))
  ;; (rime-disable-predicates
  ;;  '(evil-normal-state-p
  ;;    rime--after-alphabet-char-p
  ;;    rime--prog-in-code-p
  ;;    ))
  ;; (rime-share-data-dir "")
  (rime-user-data-dir (expand-file-name "rime" poly-local-dir))
  :bind
  (:map rime-active-mode-map
	("<tab>" . rime-inline-ascii)
	:map rime-mode-map
	("C-$" . rime-send-keybinding)
	("M-j" . rime-force-enable)))

;; change the cursor color with the input-method changing
(defvar cursor-default-color (face-background 'cursor))
(defvar cursor-activate-color (face-foreground 'error nil t))

(defun set-cursor-color-red ()
  "Set the cursor color to red."
  (set-cursor-color cursor-activate-color))
(defun set-cursor-color-default ()
  "Set the cursor color to green."
  (set-cursor-color cursor-default-color))
(defun set-cursor-color-according-to-input-method ()
  "Set cursor color based on the current input method."
  (interactive)
  (if (string= current-input-method "rime")
      (set-cursor-color cursor-activate-color)
    (set-cursor-color cursor-default-color)))

(add-hook 'input-method-activate-hook 'set-cursor-color-red)
(add-hook 'input-method-deactivate-hook 'set-cursor-color-default)
(add-hook 'window-state-change-hook 'set-cursor-color-according-to-input-method)
#+end_src

** isearch-mb

deal with rime search in minibuffer

#+begin_src emacs-lisp
(use-package isearch-mb
  :custom
  ;; Match count next to the minibuffer prompt
  (isearch-lazy-count t)
  ;; Don't be stingy with history; default is to keep just 16 entries
  (search-ring-max 200)
  (regexp-search-ring-max 200)
  (isearch-regexp-lax-whitespace t)
  ;; Swiper style: space matches any sequence of characters in a line.
  (search-whitespace-regexp ".*?")
  ;; ;; Alternative: space matches whitespace, newlines and punctuation.
  ;; (search-whitespace-regexp "\\W+")
  ;; :bind
  ;; (("C-s" . isearch-forward-regexp)
  ;;  ("C-r" . isearch-backward-regexp))
  :config
  (isearch-mb-mode +1))
#+end_src

* Telegram client with Telega

~telegram-libtd~ is required for this feature.

Use Telega as Telegram client.

#+begin_src emacs-lisp :tangle no
(use-package telega
  :vc (:url "https://github.com/zevlg/telega.el" :rev :newest :branch "master")
  :commands (telega)
  :defer t
  :custom
  (telega-symbol-reply "?")
  (telega-root-show-avatars nil)
  ;; (telega-user-show-avatars nil)
  ;; (telega-avatar-factors-alist '((1 . (0.8 . 0.1))
  ;;				 (2 . (0.8 . 0.1))))
  (telega-animation-play-inline nil)
  (telega-server-libs-prefix "/usr/local")
  (telega-use-images t)
  ;; (telega-proxies
  ;;  (list
  ;;   '(:server "127.0.0.1" :port 6153 :enable nil
  ;;	:type (:@type "proxyTypeSocks5"))))
  (telega-directory (expand-file-name "telega" poly-cache-dir))
  :config
  ;; show previews for photo/video webpages
  (advice-add #'telega-ins--webpage :before-while
	      (lambda (msg &rest args)
		(let ((ht (telega--tl-get msg :content :web_page :type)))
		  (-contains? '("video" "photo") ht))))
  (unbind-key (kbd "k") telega-msg-button-map)  ;; delete marked or at point (doubled with d)
  (unbind-key (kbd "e") telega-msg-button-map)  ;; msg-edit
  (define-key telega-msg-button-map (kbd "E") 'telega-msg-edit)
  (unbind-key (kbd "n") telega-msg-button-map)  ;; button-forward (seems to not differ from next link)
  (unbind-key (kbd "l") telega-msg-button-map)  ;; redisplay
  (unbind-key (kbd "h") telega-chat-button-map) ;; info (doubled with i)

  (defun +telega-open-file (file)
    (cond
     ;; ((member (downcase (file-name-extension file)) '("png" "jpg" "gif" "jpeg"))
     ;;  (start-process "telega-open-photo" nil "/sbin/imv" file))
     ((member (downcase (file-name-extension file)) '("mp4"))
      (start-process "telega-open-video" nil "/opt/local/bin/mpv" file))
     (t
      (find-file file))))
  (setq telega-open-message-as-file '(photo video) telega-open-file-function '+telega-open-file))
#+end_src

* Directory environment support with direnv

#+begin_src emacs-lisp
(use-package direnv
:config
(setq direnv-always-show-summary nil)

(autoload 'direnv-mode "direnv" nil t)
)

#+end_src

* saveplace
Save cursor position

#+begin_src emacs-lisp
(use-package saveplace
  :ensure nil
  :custom
  (save-place-file (expand-file-name "saveplace" poly-cache-dir))
  (save-place t)
  :config
  (save-place-mode 1))
#+end_src

* minibuffer

#+begin_src emacs-lisp

;; Completion engine
(use-package minibuffer
  :ensure nil
  :bind (:map minibuffer-local-map
              ([escape] . abort-recursive-edit)
              :map minibuffer-local-ns-map
              ([escape] . abort-recursive-edit)
              :map minibuffer-local-completion-map
              ([escape] . abort-recursive-edit)
              :map minibuffer-local-must-match-map
              ([escape] . abort-recursive-edit)
              :map minibuffer-local-isearch-map
              ([escape] . abort-recursive-edit))
  :custom
  ;; Default minibuffer is fine-tuned since Emacs 29
  (completion-auto-help t)
  (completion-show-help nil)
  (completion-cycle-threshold nil)
  (completion-auto-select 'second-tab)
  ;; Enable recursive minibuffers
  (enable-recursive-minibuffers t)
  (minibuffer-depth-indicate-mode t)
  ;; shorten " (default %s)" => " [%s]"
  (minibuffer-default-prompt-format " [%s]")
  ;; (minibuffer-default-prompt-format " (default %s)")
  (minibuffer-electric-default-mode t)
  ;; Don't insert completion at point into minibuffer
  (minibuffer-completion-auto-choose nil)
  ;; One frame one minibuffer.
  (minibuffer-follows-selected-frame nil)
  ;; vertical view
  (completions-format 'one-column)
  (completions-max-height 13)
  (completions-detailed t))
#+end_src

* savehist

save minibuffer history

#+begin_src emacs-lisp
(use-package savehist
  :ensure nil
  :custom
  (savehist-file (expand-file-name "history" poly-cache-dir))
  (savehist-save-minibuffer-history t)
  (savehist-autosave-interval 60)
  (savehist-additional-variables '(;; kill-ring
				   log-edit-comment-ring
				   last-kbd-macro
				   search-ring
				   mark-ring
				   global-mark-ring
				   regexp-search-ring
				   query-replace-history
				   minibuffer-history
				   file-name-history
				   corfu-history
				   command-history
				   shell-command-history
				   compile-history
				   register-alist
				   (comint-input-ring        . 50)
				   (dired-regexp-history     . 20)
				   (kill-ring                . 1000000)
				   (face-name-history        . 20)))
  :config
  (savehist-mode +1))
#+end_src

* desktop
#+begin_src emacs-lisp :tangle no
(defun sanityinc/desktop-time-restore (orig &rest args)
  (let ((start-time (current-time)))
    (prog1
        (apply orig args)
      (message "Desktop restored in %.2fms"
               (sanityinc/time-subtract-millis (current-time)
                                               start-time)))))
(advice-add 'desktop-read :around 'sanityinc/desktop-time-restore)

(defun sanityinc/desktop-time-buffer-create (orig ver filename &rest args)
  (let ((start-time (current-time)))
    (prog1
        (apply orig ver filename args)
      (message "Desktop: %.2fms to restore %s"
               (sanityinc/time-subtract-millis (current-time)
                                               start-time)
               (when filename
                 (abbreviate-file-name filename))))))
(advice-add 'desktop-create-buffer :around 'sanityinc/desktop-time-buffer-create)

(use-package desktop
  :defer 2
  :ensure nil
  :init
  (setq desktop-dirname (expand-file-name "desktop/" poly-cache-dir))
  (setq desktop-save t
        desktop-load-locked-desktop t)
  (setq desktop-path                     (list desktop-dirname))
  ;; (setq desktop-path (list user-emacs-directory))
  :custom
  (desktop-auto-save-timeout 600)
  :config
  ;; https://github.com/purcell/emacs.d/blob/master/lisp/init-sessions.el
  ;; Save a bunch of variables to the desktop file.
  ;; For lists, specify the length of the maximal saved data too.
  ;; save a bunch of variables to the desktop file
  ;; for lists specify the len of the maximal saved data also
  (setq desktop-globals-to-save
	'((comint-input-ring        . 50)
          (compile-history          . 30)
          desktop-missing-file-warning
          (dired-regexp-history     . 20)
          (extended-command-history . 30)
          (face-name-history        . 20)
          (file-name-history        . 100)
          (grep-find-history        . 30)
          (grep-history             . 30)
          (ivy-history              . 100)
          (magit-revision-history   . 50)
          (minibuffer-history       . 50)
          (org-clock-history        . 50)
          (org-refile-history       . 50)
          (org-tags-history         . 50)
          (query-replace-history    . 60)
          (read-expression-history  . 60)
          (regexp-history           . 60)
          (regexp-search-ring       . 20)
          register-alist
          (search-ring              . 20)
          (shell-command-history    . 50)
          tags-file-name
          tags-table-list))

  ;; http://emacs.stackexchange.com/a/20036/115
  ;; fix warning upon restoring desktop save file
  (setq desktop-restore-frames nil)

  (defun rag/bury-star-buffers ()
    "Bury all star buffers."
    (mapc (lambda (buf)
            (when (string-match-p "\\`\\*.*\\*\\'" (buffer-name buf))
              (bury-buffer buf)))
          (buffer-list)))
  (add-hook 'desktop-after-read-hook #'rag/bury-star-buffers)

  (defun rag/restore-last-saved-desktop ()
    "Enable `desktop-save-mode' and restore the last saved desktop."
    (interactive)
    (setq desktop-path (list user-emacs-directory))
    (desktop-save-mode 1)
    (desktop-read))

  ;; (desktop-save-mode 0)
  (desktop-save-mode 1)
  ;; Add a hook when emacs is closed to we reset the desktop
  ;; modification time (in this way the user does not get a warning
  ;; message about desktop modifications)
  (add-hook 'kill-emacs-hook
            (lambda ()
              ;; Reset desktop modification time so the user is not bothered
              (setq desktop-file-modtime (nth 5 (file-attributes (desktop-full-file-name))))))
  :bind (("<S-f2>" . desktop-save-in-desktop-dir)
         ("<C-f2>" . rag/restore-last-saved-desktop)))
#+end_src

session

#+begin_src emacs-lisp :tangle no
(use-package session
  :custom
  (session-save-file (expand-file-name "session" poly-cache-dir))
  (session-name-disable-regexp "\\(?:\\`'/tmp\\|\\.git/[A-Z_]+\\'\\)")
  :hook (after-init . session-initialize)
  :config
  (setq session-save-print-spec '(t nil 40000))
  (setq session-save-file-coding-system 'utf-8)
  session-globals-exclude '(consult--buffer-history
                            vertico-repeat-history))
#+end_src

Auto cleanup older buffers

#+begin_src emacs-lisp
(use-package midnight
  :ensure nil
  :defer 30
  :custom
  (clean-buffer-list-delay-general 7)   ; default is 3 days
  (midnight-period (* 60 60)) ;; in seconds
  :config
  (midnight-mode 1)
  (midnight-delay-set 'midnight-delay "06:00")
  (when (fboundp 'native-compile-prune-cache)
    (add-to-list 'midnight-hook 'native-compile-prune-cache))
  ;; (setq clean-buffer-list-delay-general 30)
  (setq clean-buffer-list-delay-general 1 ;; Clean other buffers every day
	clean-buffer-list-delay-special (* 24 3600)
	clean-buffer-list-kill-regexps (nconc clean-buffer-list-kill-regexps
					      '("compile|.*?|.*"
						"run|.*?|.*"
						"^.*$"
						"\\*Help\\*"
						"\\*ag search "
						"\\*.*[Ee]diff"
						"\\*tramp/sudo "
						"^haris-pipe-"
						"^\\*Help\\*"
						"^\\*helpful "
						"^\\*ivy-occur"
						"^\\*lsp-help\\*"
						"^\\*lsp session\\*"
						"^magit: "
						"^magit-\\(log\\|diff\\|stash\\|revision\\)"
						"^\\*Man "
						"^\\*straight-process\\*"
						"\\*which-key\\*"
						"^\\*xref\\*"
						;; Docker command output buffers
						"^\\* docker .*\\*"
						;; Docker compose command output buffers
						"^\\* .* docker-compose .*\\*"
						"\\`\\*Customize .*\\*\\'"
						"\\`\\magit: .*\\*\\'"))
	clean-buffer-list-kill-buffer-names (nconc clean-buffer-list-kill-buffer-names
						   '("*buffer-selection*"
						     "*Finder*"
						     "*Finder Category*"
						     "*Finder-package*"
						     "*RE-Builder*"
						     "*vc-change-log*"))
	clean-buffer-list-kill-never-buffer-names (nconc clean-buffer-list-kill-never-buffer-names
							 '("*scratch*"
							   "*Messages*"
							   "*server*"
							   "*Group*"
							   "*Org Agenda*"
							   "*eshell*"
							   "*ielm*"
							   "*mail*"
							   "*w3m*"
							   "*w3m-cache*"))
	clean-buffer-list-kill-never-regexps (nconc clean-buffer-list-kill-never-regexps
						    '("^ \\*Minibuf-.*\\*$"
						      "^\\*Summary"
						      "^\\*Article"
						      "^#"
						      "\\`\\*tramp/.*\\*\\`"
						      "\\`\\*ftp .*\\*\\`"))))
#+end_src

* embark

#+begin_src emacs-lisp
(use-package embark
    :init
  (setq prefix-help-command #'embark-prefix-help-command)
  :bind
  (("C-." . embark-act)         ;; pick some comfortable binding
   ("C-;" . embark-dwim)        ;; good alternative: M-.
   ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'
  :config
  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
	       '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
		 nil
		 (window-parameters (mode-line-format . none)))))

(use-package embark-consult
    :after (embark consult)
    ;;   :demand t ; only necessary if you have the hook below
    ;;   ;; if you want to have consult previews as you move around an
    ;;   ;; auto-updating embark collect buffer
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))

(use-package docker-compose-mode)
#+end_src
* activity log
** activity-watch
#+begin_src emacs-lisp
(use-package activity-watch-mode
  :diminish
  :config
  (global-activity-watch-mode))
#+end_src
** wakatime

#+begin_src emacs-lisp
(use-package wakatime-mode
  :vc (:url "https://github.com/shuxiao9058/wakatime-mode"
	    :branch "master"
	    :rev :newest)
  :init
  (setq +wakatime-hide-filenames t)
  (setq wakatime-ignore-exit-codes '(0 1 102 112))
  (when IS-MAC
    ;; (setq wakatime-cli-path "/usr/local/bin/wakatime")
    (setq wakatime-cli-path (expand-file-name ".wakatime/wakatime-cli-darwin-arm64" "~")))
  :hook ((org-mode . wakatime-mode)
         (prog-mode . wakatime-mode))
  :config
  (global-wakatime-mode +1))
#+end_src

* vterm

#+begin_src emacs-lisp :tangle no
(use-package vterm
  :demand
  :commands (vterm ds/vterm)
  :custom
  (vterm-max-scrollback 10000)
  (vterm-timer-delay 0.01)
  (vterm-kill-buffer-on-exit t)
  (vterm-ignore-blink-cursor nil)
  (vterm-always-compile-module t)
  (vterm-shell "/opt/local/bin/zsh")
  (vterm-module-cmake-args "-DUSE_SYSTEM_LIBVTERM=yes")
  :init
  (defun poly/vterm-compile-auto-exit ()
    (when-let* ((vterm-build-buffer (get-buffer vterm-install-buffer-name))
		(buffer-str (with-current-buffer vterm-build-buffer (buffer-string))))
      (when (s-contains? "[100%] Built target vterm-module" buffer-str)
	(let* ((buf vterm-build-buffer)
	       (win (get-buffer-window buf)))
	  (sit-for 0.8)
	  (kill-buffer buf)
	  (delete-window win)))))
  (advice-add #'vterm-module-compile :after #'poly/vterm-compile-auto-exit)

  (defun vterm-buffer-change ()
    (when (derived-mode-p 'vterm-mode)
      (unless (meow-insert-mode-p)
	(meow-insert-mode t))))

  (add-hook 'buffer-list-update-hook #'vterm-buffer-change)
  (when noninteractive
    (advice-add #'vterm-module-compile :override #'ignore)
    (provide 'vterm-module))
  :bind (:map vterm-mode-map
	      ;; ("C-c t" . vterm-copy-mode)
	      ("C-x C-x" . ds/vterm-send-C-x)
	      ;; :map vterm-copy-mode-map
	      ;; ("C-c t" . 'vterm-copy-mode)
              )
  :config
  (add-to-list 'vterm-eval-cmds '("update-pwd" (lambda (path) (setq-local default-directory path))))
  (advice-add 'vterm-copy-mode-done :after
	      (lambda (&rest _) (funcall #'vterm-exit-visual-insert)))

  (defmacro poly/vterm-define-key (key)
    "Define a command that sends KEY."
    (declare (indent defun)
	     (doc-string 3))
    `(progn (defun ,(intern (format "poly/vterm-send-%s" key)) ()
	      ,(format "Sends %s to the libvterm."  key)
	      (interactive)
	      (vterm-send ,key))))

  (setq vterm-keymap-exceptions (remove "C-h" vterm-keymap-exceptions))
  (dolist (key '("C-h" "C-z" "C-s" "C-p" "C-n" "<backspace>" "DEL" "M-<left>" "M-<right>"))
    (eval `(poly/vterm-define-key ,key))
    (define-key vterm-mode-map (kbd key) (intern (format "poly/vterm-send-%s" key))))

  ;; (defun vterm-send-C-k-and-kill ()
  ;;   "Send `C-k' to libvterm, and put content in kill-ring."
  ;;   (interactive)
  ;;   (kill-ring-save (point) (vterm-end-of-line))
  ;;   (vterm-send-key "k" nil nil t))
  (add-hook 'vterm-mode-hook
	    (lambda ()
	      (setq-local buffer-read-only nil)
	      (global-hl-line-mode 0)
	      ;; (hide-mode-line-mode 0)
	      (setq confirm-kill-processes nil)
	      (setq hscroll-margin 0)
	      (set (make-local-variable 'buffer-face-mode-face) 'fixed-pitch)
	      (buffer-face-mode t)))
  (defun ds/vterm (&optional name)
    (interactive "MName: ")
    (if (< 0 (length name))
	(if (get-buffer name)
	    (switch-to-buffer name)
	  (vterm name))
      (vterm))))

(use-package vterm-toggle
  ;; :when (memq window-system '(mac ns x))
  :bind (([f2] . mb/vterm-right-here)
	 ("C-<return>" . mb/vterm-right-here)
	 :map vterm-mode-map
	 ([f2] . mb/vterm-right-here))
  :custom
  (vterm-toggle-cd-auto-create-buffer nil)
  :config
  (defun poly/vterm-buffer(path)
    (when vterm-toggle--buffer-list
      (let* ((pwd)
	     (buf (cl-find-if
		   (lambda (b)
		     (setq pwd (with-current-buffer b default-directory))
		     (equal pwd path)) vterm-toggle--buffer-list)))
	(if buf (list buf pwd)
	  (let ((buf (car vterm-toggle--buffer-list)))
	    (list buf (with-current-buffer buf default-directory)))))))

  (defun poly/buffer-frame-same-p(buf1 buf2)
    (when-let* ((win1 (get-buffer-window buf1))
		(frame1 (window-frame win1))
		(win2 (get-buffer-window buf2))
		(frame2 (window-frame win2)))
      (equal frame1 frame2)))

  (defun +vterm/here (arg)
    "Open a terminal buffer in the current window at project root.

    If prefix ARG is non-nil, cd into `default-directory' instead of project root.

    Returns the vterm buffer."
    (interactive "P")
    (let* ((project-root  (if (and (fboundp 'project-root) (project-current))
			      (project-root (project-current))
			    default-directory))
	   (dir
	    (if arg
		default-directory
	      project-root))
	   (result (poly/vterm-buffer dir))
	   (cd-cmd (concat "cd " dir))
	   (curr-buffer (current-buffer))
	   (vterm-buffer)
	   (vterm-win)
	   (vterm-pwd))
      (when result
	(setq vterm-buffer (car result))
	(setq vterm-pwd (car (cdr result))))

      (if vterm-buffer
	  (progn
	    (with-current-buffer vterm-buffer
	      (when (bound-and-true-p read-only-mode)
		(read-only-mode -1)))

	    (setq vterm-win (get-buffer-window vterm-buffer))
	    (if (equal vterm-pwd (file-truename dir))
		(if (and (poly/buffer-frame-same-p vterm-buffer curr-buffer) (window-live-p vterm-win))
		    (select-window vterm-win nil)
		  (if (equal (length vterm-toggle--buffer-list) 1)
		      (vterm-toggle)
		    (switch-to-buffer vterm-buffer)))
	      (with-current-buffer vterm-buffer
		(vterm-send-string cd-cmd t)
		(vterm-send-return)))
	    (if (and (poly/buffer-frame-same-p vterm-buffer curr-buffer) (window-live-p vterm-win))
		(select-window vterm-win nil)
	      (switch-to-buffer vterm-buffer)))
	(if (equal (file-truename default-directory) (file-truename dir))
	    (vterm-toggle-insert-cd)
	  (progn
	    (vterm-toggle-cd dir)
	    (setq result (poly/vterm-buffer dir))
	    (when result
	      (setq vterm-buffer (car result))
	      (setq vterm-pwd (car (cdr result)))
	      (unless (equal vterm-pwd (file-truename dir))
		(with-current-buffer vterm-buffer
		  (vterm-send-string cd-cmd t)
		  (vterm-send-return)))))))
      ;; (vterm-toggle-show t)
      ))

  (defun mb/vterm-right-here ()
    (interactive)
    (if (derived-mode-p 'vterm-mode)
	(vterm-toggle)
      (call-interactively #'+vterm/here)
      ;; (let ((current-prefix-arg '-))
      ;; 	(call-interactively '+vterm/here))
      ))
  )

(use-package meow-vterm
  :vc (:url "https://github.com/accelbread/meow-vterm"
	    :branch "master" :rev :newest)
  :after vterm
  :init
  (setq vterm-keymap-exceptions '("C-c"))
  :config
  (meow-vterm-enable))
#+end_src

* EAT

| Key Sequence   | Note                            |
|----------------+---------------------------------|
| C-c M-d        | char mode                       |
| C-M-m or M-RET | "char mode" to "semi-char mode" |
| C-c C-e        | Emacs Mode                      |
| C-c C-j        | semi-char mode                  |
| C-c C-l        | line mode                       |


#+begin_src emacs-lisp
(use-package eat
  :vc (:url "https://codeberg.org/akib/emacs-eat.git" :branch "master" :rev :newest)
  :custom
  (eat-kill-buffer-on-exit t)
  (eat-enable-shell-prompt-annotation nil)
  (eat-term-terminfo-directory (expand-file-name ".terminfo" "~"))
  (explicit-shell-file-name "/opt/local/bin/zsh")
  ;; (eat-shell '("/opt/local/bin/zsh" "-l"))
  ;; (eat-tramp-shells '("bash"))
  ;; (eat-ssh-shells '("bash"))
  ;; (eat-term-name "xterm-256color") ;; fix top command: Error opening terminal: eat-truecolor. edit issue
  (eat-enable-mouse t)
  (eat-enable-directory-tracking t)
  (eat-enable-auto-line-mode nil)
  :hook ((eshell-load . eat-eshell-mode)
         (eshell-load . eat-eshell-visual-command-mode)
	 ;; (eat-eshell-exec . eat-eshell-emacs-mode)
	 (eat-eshell-exec . (lambda (&rest _) (eat-eshell-emacs-mode)))
	 ;; (eat--eshell-semi-char-mode . )
	 ;; https://github.com/ircurry/cfg/blob/bb599a50f62ecd9f5205320601cc8a660eeb05cc/home/programs/emacs/emacs.org#L338
	 (eat--eshell-semi-char-mode . (lambda (&rest _)
					 (progn
					   (when (and meow-global-mode (not meow-mode))
					     (meow-mode +1)))))
	 ;; TODO: in the future I would like for there to be a hook that operates when
	 ;; switching between the eat modes. This would make integrating meow and eat
	 ;; soooooo much easier and cleaner. It would also generally make eat more
	 ;; felixible. I would also like for `eat-emacs-mode' and the like to have
	 ;; hooks that I can use.
	 (eat--eshell-char-mode . (lambda (&rest _)
				    (if eat--eshell-char-mode
					(meow-mode -1)
				      (unless meow-mode
					(meow-mode +1)))))
	 (eat-eshell-exit . (lambda (&rest _)
			      (when (and meow-global-mode (not meow-mode))
				(meow-mode +1))))
	 (eat--char-mode . (lambda (&rest _)
			     (if eat--char-mode
				 (meow-mode -1)
			       (unless meow-mode
				 (meow-mode +1)))))
	 ;; (eat-exec . (lambda (&rest _) (eat-line-mode)))
	 (eat-mode . (lambda (&rest _)
		       (setq-local corfu-auto nil)
		       (setq-local corfu-quit-at-boundary nil)
		       (corfu-mode +1)))
	 )
  :bind (([f2] . poly/eat-right-here)
	 ("C-<return>" . poly/eat-right-here)
	 :map eat-mode-map
	 ([f2] . poly/eat-right-here)
	 ("C-c C-d" . eat-self-input)
	 ("C-c C-c" . eat-self-input)
	 ("C-d" . eat-self-input))
  :config
  (eat-eshell-mode)
  (eat-eshell-visual-command-mode)
  (setq eshell-visual-commands '())
  (setq eat-minimum-latency 0)
  (setopt eat-shell-prompt-annotation-delay 0)
  (setopt eat-very-visible-cursor-type '(t nil nil))
  (setopt eat-term-scrollback-size nil)
  (setopt eat-default-cursor-type '(t nil nil))
  (add-hook 'eat-mode-hook (lambda () (setq-local scroll-conservatively 10000)))
  (when (eq system-type 'darwin)
    (define-key eat-semi-char-mode-map (kbd "C-h") #'eat-self-input)
    (define-key eat-semi-char-mode-map (kbd "<backspace>") #'eat-self-input))
  (advice-add 'eat--eshell-local-mode :after
              (lambda (&rest _)
		"Remove eat-eshell's terminfo path override."
		(setq eshell-variable-aliases-list
                      (delete '("TERMINFO" eat-term-terminfo-directory t)
                              eshell-variable-aliases-list)))
              '((name . eat-eshell-remove-terminfo-override)))

  (advice-add 'eat-eshell-emacs-mode :around
              (lambda (orig-fun &rest args)
		"Only run if eat terminal is active."
		(when eat-terminal
                  (apply orig-fun args)))
              '((name . eat-eshell-only-when-active)))
  (defun eat-tab-change (original-fun &rest args)
    (interactive)
    (message "eat-tab-change triggered")  ; Output to *Messages* buffer
    (apply original-fun args)
    (walk-windows (lambda (window)
                    (with-current-buffer (window-buffer window)
                      (when (eq major-mode 'eat-mode)
			(end-of-buffer)
			(evil-insert-state))))
		  nil 'visible))

  (advice-add 'tab-bar-select-tab :around #'eat-tab-change)
  (defun kill-eat-processes ()
    "Kill processes associated with eat terminal buffers."
    (interactive)
    (dolist (buffer (buffer-list))
      (with-current-buffer buffer
	(when (eq major-mode 'eat-mode)
          (eat-kill-process)))))

  (add-hook 'kill-emacs-hook #'kill-eat-processes)
  (with-eval-after-load 'eat
    (setq eat-eshell-emacs-mode-map
          (let ((map (make-sparse-keymap)))
            (define-key map [remap eshell-toggle-direct-send]
			#'eat-eshell-char-mode)
            (define-key map [remap undo] #'undefined)
            (define-key map [remap insert-char] #'eat-input-char)
            (define-key map [remap mouse-yank-primary] #'eat-mouse-yank-primary)
            (define-key map [remap mouse-yank-secondary]
			#'eat-mouse-yank-secondary)
            (define-key map [remap quoted-insert] #'eat-quoted-input)
            (define-key map [remap yank] #'eat-yank)
            (define-key map [remap yank-pop] #'eat-yank-from-kill-ring)
            (define-key map [xterm-paste] #'eat-xterm-paste)
            map)
          eat-eshell-char-mode-map
          (let ((map (eat-term-make-keymap
                      #'eat-self-input
                      '(:ascii :arrow :navigation :function)
                      '([?\C-c]))))
            (define-key map [?\C-c ?\C-c] #'eat-self-input)
            (define-key map [?\C-c ?\e] #'eat-self-input)
            (define-key map [remap mouse-yank-primary] #'eat-mouse-yank-primary)
            (define-key map [remap mouse-yank-secondary]
			#'eat-mouse-yank-secondary)
            (define-key map [xterm-paste] #'eat-xterm-paste)
            map))
    (setcdr (assoc 'eat--eshell-process-running-mode minor-mode-map-alist)
            eat-eshell-emacs-mode-map)
    (setcdr (assoc 'eat--eshell-char-mode minor-mode-map-alist)
            eat-eshell-char-mode-map))


  (defun meow-eat-eshell-setup-hooks ()
    "Ensure non-char-mode keybindings outside of insert mode."
    (add-hook 'meow-insert-enter-hook #'eat-eshell-char-mode nil t)
    (add-hook 'meow-insert-exit-hook #'eat-eshell-emacs-mode nil t))

  (add-hook 'eat-eshell-mode-hook #'meow-eat-eshell-setup-hooks))

;; (use-package term-toggle
;;   :vc (:url "https://github.com/amno1/emacs-term-toggle")
;;   :config
;;   (setq term-toggle-no-confirm-exit t))

;; (defun term-toggle-eat ()
;;   "Toggle `term'."
;;   (interactive) (term-toggle 'eat))

(defun poly/eat-buffer-list()
  "Return all eat buffer list."
  (let ((eat-buffer-list))
    (dolist (buf (buffer-list))
      (when (buffer-live-p buf)
	(with-current-buffer buf
	  (when (or (eq major-mode 'eat-mode)
		    ;; (and (boundp 'local-minor-modes)
		    ;; 	 (memq 'eat--eshell-local-mode local-minor-modes))
		    )
	    (add-to-list 'eat-buffer-list buf)))))
    eat-buffer-list))

(defun poly/eat-buffer(path)
  "Get eat buffer by PATH."
  (unless (poly/eat-buffer-list) ;; create eat while not exist
    (let ((default-directory path))
      (call-interactively 'eat)))
  (when-let* ((eat-buffer-list (poly/eat-buffer-list)))
    (when eat-buffer-list
      (let* ((pwd)
	     (buf (cl-find-if
		   (lambda (b)
		     (setq pwd (with-current-buffer b default-directory))
		     (equal pwd path)) eat-buffer-list)))
	(if buf (list buf pwd)
	  (let ((buf (car eat-buffer-list)))
	    (list buf (with-current-buffer buf default-directory))))))))

(defun poly/buffer-frame-same-p(buf1 buf2)
  (when-let* ((win1 (get-buffer-window buf1))
	      (frame1 (window-frame win1))
	      (win2 (get-buffer-window buf2))
	      (frame2 (window-frame win2)))
    (equal frame1 frame2)))

(defun poly/eat-toggle ()
  "Minimal hack to toggle eat."
  (interactive)
  (cond
   ((derived-mode-p 'eat-mode)
    (if (one-window-p)
	(switch-to-prev-buffer)
      (delete-window)))
   (t;; (one-window-p)
    (progn
      (let ((eat-buffer-list (poly/eat-buffer-list)))
	(if (equal (length eat-buffer-list) 1)
	    (switch-to-buffer (car eat-buffer-list))))
      ;; (split-window-below)
      ;; (other-window 1) ;; (eat-project)
      ;; (shrink-window 7)
      ))
   ;; (t (progn (other-window 1)
   ;;           (if (derived-mode-p 'eat-mode)
   ;; 		 (delete-window)
   ;;             (progn
   ;; 		 (other-window -1)
   ;; 		 (split-window-below)
   ;; 		 (other-window 1) ;; (eat-project)
   ;; 		 (shrink-window 7)))))
   ))

(defun +eat/here (arg)
  "Open a terminal buffer in the current window at project root.

    If prefix ARG is non-nil, cd into `default-directory' instead of project root.

    Returns the vterm buffer."
  (interactive "P")
  (let* ((project-root  (if (and (fboundp 'project-root) (project-current))
			    (project-root (project-current))
			  default-directory))
	 (dir
	  (if arg
	      default-directory
	    project-root))
	 (result (poly/eat-buffer dir))
	 (cd-cmd (concat "cd " (shell-quote-argument (expand-file-name dir)) "\n"))
	 (curr-buffer (current-buffer))
	 (eat-buffer-list (poly/eat-buffer-list))
	 (eat-buffer)
	 (eat-win)
	 (eat-pwd)
	 (enter-meow-insert-mode-fn (lambda() (unless (meow-insert-mode-p)
						(meow-insert-mode t)))))
    (when result
      (setq eat-buffer (car result))
      (setq eat-pwd (expand-file-name (car (cdr result)))))

    (if eat-buffer
	(progn
	  (setq eat-win (get-buffer-window eat-buffer))
	  (if (equal eat-pwd (expand-file-name (file-truename dir)))
	      (progn
		;; (message "path is equal")
		(if (and (poly/buffer-frame-same-p eat-buffer curr-buffer) (window-live-p eat-win))
		    (select-window eat-win nil)
		  (if (equal (length eat-buffer-list) 1)
		      (poly/eat-toggle)
		    (switch-to-buffer eat-buffer)
		    (funcall enter-meow-insert-mode-fn))))
	    (with-current-buffer eat-buffer
	      (eat-term-send-string eat-terminal cd-cmd)
	      ;; (eat-term-send-string eat-terminal "\n")
	      ))
	  (if (and (poly/buffer-frame-same-p eat-buffer curr-buffer) (window-live-p eat-win))
	      (select-window eat-win nil)
	    (switch-to-buffer eat-buffer)
	    (goto-char (point-max))
	    (funcall enter-meow-insert-mode-fn)))
      (if (equal (file-truename default-directory) (file-truename dir))
	  (call-interactively 'eat)
	(progn
	  (setq result (poly/eat-buffer dir))
	  (when result
	    (setq eat-buffer (car result))
	    (setq eat-pwd (expand-file-name (car (cdr result))))
	    (funcall enter-meow-insert-mode-fn)
	    (unless (equal eat-pwd (expand-file-name (file-truename dir)))
	      (with-current-buffer eat-buffer
		(eat-term-send-string eat-terminal cd-cmd)
		;; (eat-term-send-string eat-terminal "\n")
		))))))))

(defun poly/eat-right-here ()
  (interactive)
  (if (derived-mode-p 'eat-mode)
      (call-interactively #'poly/eat-toggle)
    (call-interactively #'+eat/here)))
#+end_src

** Integration with Meow
Use ~char~ mode in ~INSERT~ state, and ~emacs~ mode in ~NORMAL~ state.  When
switching to ~INSERT~ state, move the cursor to the end of buffer.

#+begin_src emacs-lisp
;; (defun meomacs-eat-meow-setup ()
;;   (add-hook 'meow-normal-mode-hook 'eat-emacs-mode nil t)
;;   (add-hook 'meow-insert-mode-hook
;;             (lambda ()
;;               (goto-char (point-max))
;;               (eat-char-mode))
;;             nil
;;             t))

;; (with-eval-after-load "eat"
;;   ;; Replace semi-char mode with emacs mode
;;   (advice-add 'eat-semi-char-mode :after 'eat-emacs-mode)
;;   (add-hook 'eat-mode-hook 'eat-emacs-mode)
;;   (add-hook 'eat-mode-hook 'meomacs-eat-meow-setup))

(defun meomacs-eat-meow-setup ()
  (add-hook 'meow-normal-mode-hook 'eat-emacs-mode nil t)
  (add-hook 'meow-insert-mode-hook 'eat-char-mode nil t))

;; (with-eval-after-load "eat"
;;   (define-key eat-char-mode-map (kbd "C-y") 'eat-yank)
;;   ;; Replace semi-char mode with emacs mode
;;   (advice-add 'eat-semi-char-mode :after 'eat-emacs-mode)
;;   (add-hook 'eat-mode-hook 'meomacs-eat-meow-setup))
#+end_src

* Hideshow

 text folding minor mode

#+begin_src emacs-lisp
(use-package hideshow
  :ensure nil
  :diminish hs-minor-mode
  ;; :bind (("C-`" . hs-toggle-hiding)
  ;; 	 ("C-c <left>" . hs-hide-block)
  ;;        ("C-c <right>" . hs-show-block)
  ;;        ("C-c <up>" . hs-hide-all)
         ;; ("C-c <down>" . hs-show-all)
	 ;; )
  ;; Nicer code-folding overlays (with fringe indicators)
  :hook (prog-mode . hs-minor-mode)
  :custom
  (hs-hide-comments-when-hiding-all nil)
  (hs-set-up-overlay #'hideshow-folded-overlay-fn)
  :config
  (defvar hs-special-modes-alist
    (mapcar 'purecopy
	    '((c-mode "{" "}" "/[*/]" nil nil)
	      (c++-mode "{" "}" "/[*/]" nil nil)
	      (dart-mode "{" "}" "/[*/]" nil nil)
	      (mint-mode "{" "}" "/[*/]" nil nil)
	      (go-mode "{" "}" "/[*/]" nil nil)
	      (ruby-mode
	       "\\(def\\|do\\|{\\)" "\\(end\\|end\\|}\\)" "#" nil nil)
	      (enh-ruby-mode
	       "\\(def\\|do\\|{\\)" "\\(end\\|end\\|}\\)" "#" (lambda (arg) (enh-ruby-forward-sexp)) nil)
	      (bibtex-mode ("@\\S(*\\(\\s(\\)" 1))
	      (java-mode "{" "}" "/[*/]" nil nil)
	      (js-mode "{" "}" "/[*/]" nil)
              (js-mode "`" "`" "/[*/]" nil))))

  (defconst hideshow-folded-face '((t (:inherit 'font-lock-comment-face :box t))))

  (defface hideshow-border-face
    '((((background light))
       :background "rosy brown" :extend t)
      (t
       :background "sandy brown" :extend t))
    "Face used for hideshow fringe."
    :group 'hideshow)

  (define-fringe-bitmap 'hideshow-folded-fringe
    (vector #b00000000
            #b00000000
            #b00000000
            #b11000011
            #b11100111
            #b01111110
            #b00111100
            #b00011000))

  (defun hideshow-folded-overlay-fn (ov)
    "Display a folded region indicator with the number of folded lines."
    (when (eq 'code (overlay-get ov 'hs))
      (let* ((nlines (count-lines (overlay-start ov) (overlay-end ov)))
             (info (format " ... [#%d] " ;; " (%d)..."
			   nlines)))
        ;; fringe indicator
        (overlay-put ov 'before-string
		     (propertize " "
                                 'display '(left-fringe hideshow-folded-fringe
                                                        hideshow-border-face)))
        ;; folding indicator
        (overlay-put ov 'display (propertize info 'face hideshow-folded-face))))))
#+end_src

* gpg

#+begin_src emacs-lisp
;; enable EasyPG handling
;; gpg-agent confuses epa when getting passphrase
(defun my-squash-gpg (&rest ignored-frame)
  "Kill any GPG_AGENT_INFO in our environment."
  (setenv "GPG_AGENT_INFO" nil))

(use-package epa-file
    :ensure nil
    ;; :if (string-match "socrates" (system-name))
    :commands epa-file-enable
    ;; :init (epa-file-enable)
    ;; :custom
    :config
    (setq     epa-file-name-regexp "\\.gpg\\(~\\|\\.~[0-9]+~\\)?\\'\\|\\.asc"
	      ;; (epa-file-name-regexp "\\.\\(gpg\\|asc\\)$")
	      epa-file-cache-passphrase-for-symmetric-encryption t
	      epa-file-select-keys nil
	      epg-gpg-program "/opt/local/bin/gpg2")
    (add-hook 'after-make-frame-functions 'my-squash-gpg t)
    (my-squash-gpg)
    (epa-file-name-regexp-update)
    (epa-file-enable))


(use-package auth-source-pass
    :ensure nil
    ;; :if (file-exists-p "~/.password-store")
    :config (auth-source-pass-enable))

(use-package pinentry
    :config
    (pinentry-start)
    (setq epa-pinentry-mode 'loopback))
#+end_src

* Mail


** view mail

#+begin_src emacs-lisp
(require 'gnus-art)
(require 'mm-util)

(defun poly--get-mail-filename(&optional msg)
  (if (derived-mode-p 'mu4e-view-mode
		      'mu4e-headers-mode)
      (mu4e-message-field msg ;; (mu4e-message-at-point)
			  :path)
    (notmuch-show-get-filename)))

(defun poly-view-html-in-browser (&optional msg)
  "Show current MSG in browser if it includes an HTML-part.
The variables `browse-url-browser-function',
`browse-url-handlers', and `browse-url-default-handlers'
determine which browser function to use.

MSG is the email(only mu4e)."
  (interactive)
  (let* ((filename (poly--get-mail-filename msg))
	 (gnus-article-buffer "*gnus-view-article*")
	 (max-specpdl-size 4096)
         (mm-decrypt-option 'known)
	 ;; (ct (mail-fetch-field "Content-Type"))
         ;; (ct (and ct (mail-header-parse-content-type ct)))
         ;; (charset (mail-content-type-get ct 'charset))
         ;; (charset (and charset (intern charset)))
         (mu4e~view-rendering t); Needed if e.g. an ics file is buttonized
         (gnus-article-emulate-mime t)
         (gnus-unbuttonized-mime-types '(".*/.*"))
         (gnus-buttonized-mime-types
          (append (list "multipart/signed" "multipart/encrypted")
                  gnus-buttonized-mime-types))
         ;; (gnus-newsgroup-charset
         ;;  (if (and charset (coding-system-p charset)) charset
         ;;    (detect-coding-region (point-min) (point-max) t)))
	 (parts)
	 (header)
	 (contain-html-parts)
	 (text-part)
	 (is-mu4e (derived-mode-p 'mu4e-view-mode
				  'mu4e-headers-mode)))

    (when (and (not is-mu4e) (not (file-exists-p filename)))
      (notmuch-refresh-this-buffer)
      (setq filename (notmuch-show-get-filename)))
    ;; (unless is-mu4e
    ;;   (unless (file-exists-p filename)
    ;; 	(notmuch-refresh-this-buffer)
    ;; 	(setq filename (notmuch-show-get-filename))))

    ;; if article buffer exist, kill it then create a new one
    (when (bufferp gnus-article-buffer)
      (kill-buffer gnus-article-buffer))

    (with-current-buffer (get-buffer-create gnus-article-buffer)
      (let ((inhibit-read-only t))
	(erase-buffer)
	(insert-file-contents-literally
	 filename nil nil nil t))
      ;; (mm-enable-multibyte)
      (run-hooks 'gnus-article-decode-hook)
      (gnus-article-prepare-display)
      ;; (setq header (cl-loop for field in '("from" "to" "cc" "date" "subject")
      ;; 			    when (message-fetch-field field)
      ;; 			    concat (format "%s: %s\n" (capitalize field) it)))
      ;; (setq parts (mm-dissect-buffer t t))
      (with-temp-buffer
	(insert-file-contents-literally
	 filename nil nil nil t)
	(mm-enable-multibyte)
	(run-hooks 'gnus-article-decode-hook)
	(setq header (cl-loop for field in '("from" "to" "cc" "date" "subject")
			      when (message-fetch-field field)
			      concat (format "%s: %s\n" (capitalize field) it)))
	(setq parts (mm-dissect-buffer t t)))
      (when (and (bufferp (car parts))
		 (stringp (car (mm-handle-type parts))))
	(setq parts (list parts)))
      (dolist (part parts)
	(when (and (listp part) (equal (car (mm-handle-type part)) "text/plain"))
	  (setq text-part t))
	(when (and (listp part) (equal (car (mm-handle-type part)) "text/html"))
	  (setq contain-html-parts t))))

    ;; ;; kill temp article buffer
    ;; (mm-destroy-parts gnus-article-mime-handles)
    ;; ;; (kill-buffer gnus-article-buffer)

    (when (and (not contain-html-parts) text-part)
      ;; (when (get-buffer gnus-article-buffer)
      ;; 	(kill-buffer gnus-article-buffer)) 	;; kill old buffer first
      (dolist (part parts)
	(with-current-buffer (get-buffer-create gnus-article-buffer)
	  (when (and (listp part) (equal (car (mm-handle-type part)) "text/plain"))
	    (let* ((type (mm-handle-type part))
		   (encoding (mm-handle-encoding part))
		   (txt (mm-get-part part)))

	      (when encoding
		(save-restriction
		  (save-restriction
		    (article-narrow-to-head)
		    (goto-char (point-max)))
		  (forward-line 1)
		  (save-restriction
		    (narrow-to-region (point) (point-max))
		    (setq txt (buffer-string)))))

	      (with-temp-buffer
		(let ((inhibit-read-only t)
		      (tmp-parts)
		      (buffer-txt (new-html-buffer txt)))
		  (insert buffer-txt)
		  ;; (with-temp-buffer
		  ;;   (insert buffer-txt)
		  ;;   (delete-file "/tmp/html.txt")
		  ;;   (write-region (point-min) (point-max) "/tmp/html.txt" t 'silent))
		  (mm-enable-multibyte)
		  (run-hooks 'gnus-article-decode-hook)
		  (setq tmp-parts (mm-dissect-buffer t t))
		  (when tmp-parts
		    ;; (message "success dissect buffer")
		    ;; (princ (type-of tmp-parts))
		    ;; (princ (mm-get-part tmp-parts))
		    (setq parts tmp-parts)
		    (when (and (bufferp (car parts))
			       (stringp (car (mm-handle-type parts))))
		      (setq parts (list parts)))))))

	    ;; (when (get-buffer gnus-article-buffer)
	    ;;   (mm-destroy-parts gnus-article-mime-handles))
	    ))))

    (when (and parts header)
      (unless (gnus-article-browse-html-parts parts (concat "\n" header))
        (message "Message does not contain a \"text/html\" part"))
      (mm-destroy-parts parts))
    (when (get-buffer gnus-article-buffer)
      (kill-buffer gnus-article-buffer))))

;; (defun text-newline-to-br (text)
;;  "Convert plain TEXT newline to <br/>."
;;  (with-temp-buffer
;;    (insert text)
;;    (goto-char (point-min))
;;    (while (re-search-forward "\n" nil t) (replace-match "<br/>" nil t))
;;    (buffer-string)))

(defun new-html-buffer(txt)
  (with-temp-buffer
    (erase-buffer)
    (insert "Content-Type: text/html; charset=utf-8\n")
    (insert "Content-Transfer-Encoding: base64\n\n")
    (insert (base64-encode-string
	     (encode-coding-string
	      (let ((new-tmp (copy-sequence htmlize-basic-character-table))
		    (htmlize-basic-character-table))
		(aset new-tmp ?\n "<br/>")
		(setq htmlize-basic-character-table new-tmp)
		(htmlize-string-to-html txt))
	      'utf-8)))
    (buffer-string)))

(defun mu4e-views--convert-charset (charset)
  "Translate email coding system CHARSET into Emacs coding system."
  (let* ((cs (or charset "utf-8"))
	 (downc (downcase cs))
	 (fixed (or (alist-get downc '(("utf8" . "utf-8")))
		    downc)))
    (unless (coding-system-p (intern fixed))
      (warn "Unkown coding system %s in email" fixed)
      (setq fixed  "utf-8"))
    (message "translate coding system %s into %s" charset fixed)
    fixed))
#+end_src

** mu4e

#+begin_src emacs-lisp
(defun no-auto-fill ()
  "Turn off 'auto-fill-mode'."
  (auto-fill-mode -1))


;; build mu4e
;; meson setup build
;; meson compile -C build

;; delete trashed files
;; mu find 'flag:trashed' --fields=l | gxargs -l grm
(use-package mu4e
  :vc nil
  ;; :ensure nil
  :load-path "/Users/jiya/workspace/mu4e/build/mu4e";; (expand-file-name "workspace/mu4e/build/mu4e" "~")
  ;; :vc (:url "https://github.com/djcb/mu" :lisp-dir "mu4e/" :main-file "mu4e/mu4e.el")
  ;; :vc (:url "https://github.com/djcb/mu" lisp-dir "mu4e/"  :branch "release/1.6" :rev :newest)
  :custom
  ;; (mu4e-mu-binary "/opt/local/bin/mu")
  (mu4e-mu-binary "/Users/jiya/workspace/mu4e/build/mu/mu")
  (mu4e-update-interval (* 60 2))
  (mu4e-get-mail-command "/usr/local/bin/fdm fetch")
  (mu4e-view-show-addresses t)
  (mu4e-context-policy 'pick-first)
  (mu4e-maildir "~/Mail")
  (mu4e-attachment-dir "~/Downloads")
  (mu4e-headers-skip-duplicates t)
  (mu4e-headers-visible-lines 20)
  (mu4e-view-show-addresses 'long)
  (mu4e-compose-in-new-frame t)
  (mu4e-index-cleanup t)
  (mu4e-compose-complete-only-personal t)
  (mu4e-compose-dont-reply-to-self t)
  (mu4e-change-filenames-when-moving t)
  (mu4e-index-lazy-check nil)
  (mu4e-main-hide-personal-addresses t)
  (message-kill-buffer-on-exit t)
  (mu4e-hide-index-messages t)
  (mu4e-view-show-images t)
  (mu4e-view-image-max-width 800)
  (mu4e-confirm-quit nil)
  (mu4e-completing-read-function 'completing-read)
  (mu4e-compose-format-flowed t)
  (mu4e-view-use-gnus t)
  (mu4e-headers-results-limit 2048)
  (mu4e-headers-advance-after-mark t)
  (mu4e-headers-auto-update t)
  (mu4e-headers-include-related nil)
  (mu4e-headers-show-threads nil)
  (mu4e-modeline-support nil)
  (mu4e-split-view nil)
  (mu4e-headers-date-format "%Y-%m-%d %H:%M")
  ;; (mu4e-headers-date-format "%y-%m-%d")
  ;; (mu4e-headers-time-format " %R")
  ;; (message-send-mail-function 'message-send-mail-with-sendmail)
  :hook ((mu4e-view-mode . visual-line-mode)
	 (mu4e-compose-mode . (lambda ()
				(visual-line-mode)
				(use-hard-newlines -1)
				(flyspell-mode)))
	 (mu4e-view-mode . (lambda() ;; try to emulate some of the eww key-bindings
			     (local-set-key (kbd "<tab>") 'shr-next-link)
			     (local-set-key (kbd "<backtab>") 'shr-previous-link)))
	 (mu4e-headers-mode . (lambda ()
				(interactive)
				(setq mu4e-headers-fields
                                      `((:human-date . 25) ;; alternatively, use :date
					(:flags . 6)
					(:from . 22)
					(:thread-subject . ,(- (window-body-width) 70)) ;; alternatively, use :subject
					(:size . 7))))))
  :bind (("C-c m" . mu4e)
	 (:map mu4e-headers-mode-map
	       ("." . mu4e-view-action)
	       ("o" . my:mu4e-toggle-headers-include-related)
	       ("R" . bergheim/mu4e-reply-email)
	       ("C" . bergheim/mu4e-compose-email))
	 (:map mu4e-view-mode-map
	       ("." . mu4e-view-action)
	       ("R" . bergheim/mu4e-reply-email)
	       ("C" . bergheim/mu4e-compose-email)))
  :config
  (require 'mu4e)
  (require 'mu4e-vars)
  (require 'mu4e-contrib)
  (require 'mu4e-icalendar)
  (require 'mu4e-view)
  (require 'mu4e-compose)
  (require 'mu4e-org)
  (setq mu4e-org-link-query-in-headers-mode nil)
  (setq mh-mime-save-parts-directory (expand-file-name "Mail/attachments/" "~"))
  (setq mm-default-directory mh-mime-save-parts-directory)
  (setq
   mu4e-bookmarks '(("flag:unread"                       "Unread messages"                  ?u)
		    ("NOT flag:trashed"                  "All messages"                     ?a)
		    ("date:today..now"                   "Today's messages"                 ?t)
		    ("date:7d..now"                      "Last 7 days"                      ?w)
		    ("maildir:/Work"                     "work"                             ?W)
		    ("date:1d..now"                      "Last 1 days"                      ?y)
		    ;; ("list:emacs-orgmode.gnu.org"        "Org mode"                         ?o)
		    ;; ("list:emacs-devel.gnu.org"          "Emacs Devel"                      ?e)
		    ;; ("flag:f"                            "starred"                          ?m)
		    ;; ("maildir:/sent"                     "sent"                             ?s)
		    ;; ("maildir:/drafts"                   "drafts"                           ?d)
		    ;; ("mime:image/*"                      "Messages with images"             ?p)
		    ;; ("maildir:/trash"                    "Trash"                            ?g)
		    ))

  (add-hook 'mu4e-compose-mode-hook 'epa-mail-mode)
  (add-hook 'mu4e-compose-mode-hook 'visual-line-mode)
  (add-hook 'mu4e-view-mode-hook 'epa-mail-mode)
  (add-hook 'mu4e-view-mode-hook 'visual-line-mode)
  (add-hook 'mu4e-view-mode-hook 'variable-pitch-mode)
  ;; (add-hook 'mu4e-view-mode-hook 'olivetti-mode)
  (add-hook 'mu4e-compose-mode-hook #'no-auto-fill)
  (add-to-list 'mu4e-view-actions
	       '("View In Browser" . (lambda(msg &optional skip-headers) (poly-view-html-in-browser msg) )) t)

  (with-eval-after-load 'org
    (setq gnus-icalendar-org-capture-file +org-mu4e-icalendar-org-capture-file
	  gnus-icalendar-org-capture-headline '("Meetings")
	  mu4e-icalendar-diary-file +org-mu4e-icalendar-org-capture-file
	  mu4e-icalendar-trash-after-reply t))
  (setq gnus-icalendar-org-enabled-p t)

  ;; use imagemagick, if available
  (when (fboundp 'imagemagick-register-types)
    (imagemagick-register-types))

  (defun poly/mu4e-icalendar-setup ()
    "Perform the necessary initialization to use mu4e-icalendar."
    (gnus-icalendar-setup)
    (cl-defmethod gnus-icalendar-event:inline-reply-buttons :around
      ((event gnus-icalendar-event) handle)
      (if (and (boundp 'mu4e~view-rendering)
	       (gnus-icalendar-event:rsvp event))
	  (let ((method (gnus-icalendar-event:method event)))
	    (when (or (string= method "REQUEST") (string= method "PUBLISH") (string= method "CANCEL"))
	      `(("Accept" mu4e-icalendar-reply (,handle accepted ,event))
		("Tentative" mu4e-icalendar-reply (,handle tentative ,event))
		("Decline" mu4e-icalendar-reply (,handle declined ,event)))))
	(cl-call-next-method event handle))))
  (mu4e-icalendar-setup)

  (poly/mu4e-icalendar-setup)
  (gnus-icalendar-org-setup)

  ;; from https://github.com/fgallina/dotemacs/blob/master/init.el
  (defun my:mu4e-toggle-headers-include-related ()
    "Toggle `mu4e-headers-include-related' and refresh."
    (interactive)
    (setq mu4e-headers-include-related
	  (not mu4e-headers-include-related))
    (mu4e-headers-rerun-search))

  (setq mail-user-agent 'mu4e-user-agent)

  (setq-default mu4e-html2text-command 'mu4e-shr2text)

  (unless (fboundp 'mu4e--main-action-str)
    (defalias 'mu4e--main-action-str 'mu4e~main-action-str))

  (add-to-list 'mu4e-header-info-custom
	       '(:mail-directory . (:name "Mail Directory"
					  :shortname "Dir"
					  :help "Mail Storage Directory"
					  :function (lambda (msg)
						      (or (mu4e-message-field msg :maildir) "")))))
  (setq mu4e-headers-fields '(;; (:mail-directory . 20)
			      (:human-date    .   12)
			      (:flags         .    6)
			      (:mailing-list  .   10)
			      (:from          .   22)
			      (:subject       .   nil)))
  )

;;   ;;;###autoload
;; (define-mail-user-agent 'mu4e-user-agent
;;   'mu4e~compose-mail
;;   'message-send-and-exit
;;   'message-kill-buffer
;;   'message-send-hook)
;; Without this `mail-user-agent' cannot be set to `mu4e-user-agent'
;; through customize, as the custom type expects a function.  Not
;; sure whether this function is actually ever used; if it is then
;; returning the symbol is probably the correct thing to do, as other
;; such functions suggest.
;; (defun mu4e-user-agent ()
;;   "Return the `mu4e-user-agent' symbol."
;;   'mu4e-user-agent)

;; (use-package mu4e-alert
;;   :after mu4e
;;   :hook (after-init . mu4e-alert-enable-notifications)
;;   :custom
;;   (mu4e-alert-notify-repeated-mails nil)
;;   :config
;;   (mu4e-alert-enable-notifications)
;;   ;; (setq mu4e-enable-notifications t)
;;   (setq mu4e-alert-set-default-style 'notifier)
;;   ;; (setq mu4e-alert-set-default-style (if (eq system-type 'darwin)
;;   ;;                                        'notifier '(notifications)))
;;   (mu4e-alert-enable-mode-line-display)
;;   (defun gjstein-refresh-mu4e-alert-mode-line ()
;;     (interactive)
;;     (mu4e~proc-kill)
;;     (mu4e-alert-enable-mode-line-display))
;;   (run-with-timer 0 60 'gjstein-refresh-mu4e-alert-mode-line)
;;   (setq mu4e-alert-interesting-mail-query
;; 	(concat "(maildir:/Work ) AND flag:unread "
;; 		;; "OR "
;; 		)))

(use-package olivetti)

(require 'epg-config)

(setq-default mml2015-use 'epg
	      mml2015-encrypt-to-self t
	      mml2015-sign-with-sender t)

(use-package mu4e-marker-icons
  :after mu4e
  :init (mu4e-marker-icons-mode 1)
  (defcustom v/message-attachment-intent-re
    (regexp-opt '("I attach"
		  "I have included"
		  "I've included"
                  "attached"
                  "attachment"
                  "pdf"))
    "A regex which - if found in the message, and if there is no
attachment - should launch the no-attachment warning.")

  (defcustom v/message-attachment-reminder
    "Are you sure you want to send this message without any attachment? "
    "The default question asked when trying to send a message
containing `v/message-attachment-intent-re' without an
actual attachment.")

  (defun v/message-warn-if-no-attachments ()
    "Ask the user if s?he wants to send the message even though
there are no attachments."
    (when (and (save-excursion
	         (save-restriction
		   (widen)
		   (goto-char (point-min))
		   (re-search-forward v/message-attachment-intent-re nil t)))
	       (not (v/message-attachment-present-p)))
      (unless (y-or-n-p v/message-attachment-reminder)
        (keyboard-quit))))(defcustom v/message-attachment-intent-re
    (regexp-opt '("I attach"
		  "I have included"
		  "I've included"
                  "attached"
                  "attachment"
                  "pdf"))
    "A regex which - if found in the message, and if there is no
attachment - should launch the no-attachment warning.")

  (defcustom v/message-attachment-reminder
    "Are you sure you want to send this message without any attachment? "
    "The default question asked when trying to send a message
containing `v/message-attachment-intent-re' without an
actual attachment.")

  (defun v/message-warn-if-no-attachments ()
    "Ask the user if s?he wants to send the message even though
there are no attachments."
    (when (and (save-excursion
	         (save-restriction
		   (widen)
		   (goto-char (point-min))
		   (re-search-forward v/message-attachment-intent-re nil t)))
	       (not (v/message-attachment-present-p)))
      (unless (y-or-n-p v/message-attachment-reminder)
        (keyboard-quit))))  (setq mu4e-headers-flagged-mark   '("F" . "🚩 "))
  (setq mu4e-headers-unread-mark    '("u" . "✉️ "))
  (setq mu4e-headers-draft-mark     '("D" . "🚧 "))
  (setq mu4e-headers-new-mark       '("N" . "✨ "))
  (setq mu4e-headers-passed-mark    '("P" . "↪ "))
  (setq mu4e-headers-replied-mark   '("R" . "↩ "))
  (setq mu4e-headers-seen-mark      '("S" . " "))
  (setq mu4e-headers-trashed-mark   '("T" . "🗑️"))
  (setq mu4e-headers-attach-mark    '("a" . "📎 "))
  (setq mu4e-headers-encrypted-mark '("x" . "🔑 "))
  (setq mu4e-headers-signed-mark    '("s" . "🖊 ")))

;; (use-package validate)

;; (use-package message
;;   :ensure nil
;;   :hook ((message-send . v/message-warn-if-no-attachments)
;;          (message-mode . turn-on-orgtbl))
;;   :after mu4e
;;   :config
;;   ;; (setq message-send-mail-function 'smtpmail-send-it)
;;   ;; (require 'validate)
;;   ;; (validate-setq mail-user-agent 'mu4e-user-agent)
;;   ;; (validate-setq read-mail-command 'mu4e)
;;   ;; From http://mbork.pl/2016-02-06_An_attachment_reminder_in_mu4e
;;   (defun v/message-attachment-present-p ()
;;     "Return t if an attachment is found in the current message."
;;     (save-excursion
;;       (save-restriction
;;         (widen)
;;         (goto-char (point-min))
;;         (when (search-forward "<#part" nil t) t))))

;;   (defcustom v/message-attachment-intent-re
;;     (regexp-opt '("I attach"
;; 		  "I have included"
;; 		  "I've included"
;;                   "attached"
;;                   "attachment"
;;                   "pdf"))
;;     "A regex which - if found in the message, and if there is no
;; attachment - should launch the no-attachment warning.")

;;   (defcustom v/message-attachment-reminder
;;     "Are you sure you want to send this message without any attachment? "
;;     "The default question asked when trying to send a message
;; containing `v/message-attachment-intent-re' without an
;; actual attachment.")

;;   (defun v/message-warn-if-no-attachments ()
;;     "Ask the user if s?he wants to send the message even though
;; there are no attachments."
;;     (when (and (save-excursion
;; 	         (save-restriction
;; 		   (widen)
;; 		   (goto-char (point-min))
;; 		   (re-search-forward v/message-attachment-intent-re nil t)))
;; 	       (not (v/message-attachment-present-p)))
;;       (unless (y-or-n-p v/message-attachment-reminder)
;;         (keyboard-quit))))
;;   )


(defun bergheim/mu4e-compose-email (arg)
  "Compose an email. Use universal argument to compose in only plain text mode."
  (interactive "P")
  (let ((org-msg-default-alternatives (if arg
                                          '((new           . (text))
                                            (reply-to-html . (text))
                                            (reply-to-text . (text)))
                                        '((new           . (text html))
                                          (reply-to-html . (text html))
                                          (reply-to-text . (text))))))
    (mu4e-compose-new)))

(defun bergheim/mu4e-reply-email (arg)
  "Compose a reply to an email. Use universal argument to compose in only plain text mode."
  (interactive "P")
  (call-interactively 'org-store-link)
  (let ((org-msg-default-alternatives (if arg
                                          '((new           . (text))
                                            (reply-to-html . (text))
                                            (reply-to-text . (text)))
                                        '((new           . (text html))
                                          (reply-to-html . (text html))
                                          (reply-to-text . (text))))))
    (mu4e-compose-reply)))
#+end_src

** notmuch
#+begin_src emacs-lisp :tangle no
(use-package notmuch
  :vc (:url "https://git.notmuchmail.org/git/notmuch"
	    :lisp-dir "emacs"
	    :rev :newest
	    :branch "release")
  :commands notmuch
  :bind (("C-c m" . notmuch)
         :map notmuch-show-mode-map (("D" . apm-notmuch-toggle-deleted)
                                     ("J" . apm-notmuch-toggle-spam))
         :map notmuch-search-mode-map (("D" . apm-notmuch-toggle-deleted)
                                       ("J" . apm-notmuch-toggle-spam)
				       ("z" . #'notmuch-search-tree-current-thread)
				       ("A" . #'notmuch-search-show-all)
				       ;; ("D" . #'notmuch-search-delete-all)
				       ("f" . #'notmuch-search-filter-for-domain)
				       ("F" . #'notmuch-search-filter-for-sender)
				       ("d" . #'my/notmuch-search-delete-mail)
				       ("<mouse-1>" . nil))
         :map notmuch-tree-mode-map (("D" . apm-notmuch-toggle-deleted)
                                     ("J" . apm-notmuch-toggle-spam)
				     ("<tab>" . #'notmuch-tree-explore-here)
				     ("<down>" . #'notmuch-tree-next-message)
				     ("<up>" . #'notmuch-tree-prev-message)
				     ("U" . #'notmuch-tree-unfold-all)
				     ("u" . #'notmuch-tree-up-thread)
				     ("N" . #'notmuch-tree-next-sibling)
				     ("P" . #'notmuch-tree-prev-sibling)
				     ("t" . #'notmuch-tree-toggle-folding-thread)
				     ("/" . #'notmuch-tree-undo-read)
				     ("F" . #'notmuch-tree-focus)
				     ("S-SPC" . #'notmuch-tree-scroll-message-window-back))
	 :map notmuch-show-part-map (("V" . poly-view-html-in-browser))
	 )
  :init
  (setenv "XAPIAN_CJK_NGRAM" "1")
  :custom
  (notmuch-show-logo nil)
  (notmuch-command "/opt/local/bin/notmuch")
  (notmuch-show-indent-messages-width 0)
  (notmuch-show-single-message t)
  ;; (notmuch-wash-wrap-lines-length 150)
  (notmuch-search-oldest-first nil)
  (mail-user-agent 'message-user-agent)
  ;; (notmuch-wash-wrap-lines-length 80)
  (notmuch-tree-show-out nil)
  (notmuch-hello-thousands-separator ",")
  ;; (notmuch-address-command "notmuch-addrlookup")
  ;; (notmuch-address-command nil)
  ;; (notmuch-address-use-company nil)
  (notmuch-address-internal-completion '(received nil))
  ;; (notmuch-mua-hidden-headers nil)
  ;; (notmuch-column-control t)
  ;;; Email composition
  ;; (notmuch-mua-compose-in 'current-window)
  ;; (notmuch-mua-hidden-headers nil) ; TODO 2021-05-12: Review hidden headers
  ;; (notmuch-address-command nil)    ; FIXME 2021-05-13: Make it work with EBDB
  ;; (notmuch-address-internal-completion '(received nil))
  ;; (notmuch-always-prompt-for-sender t)
  ;; (notmuch-mua-cite-function 'message-cite-original-without-signature)
  (notmuch-mua-reply-insert-header-p-function 'notmuch-show-reply-insert-header-p-never)
  ;; (notmuch-mua-user-agent-function #'notmuch-mua-user-agent-full)
  (notmuch-mua-user-agent-function #'notmuch-mua-user-agent-notmuch)
  (notmuch-maildir-use-notmuch-insert t)
  (notmuch-crypto-process-mime t)
  (notmuch-crypto-get-keys-asynchronously t)
;;; Reading messages
  (notmuch-show-relative-dates t)
  (notmuch-show-all-multipart/alternative-parts nil)
  (notmuch-show-indent-multipart nil)
  (notmuch-show-part-button-default-action 'notmuch-show-save-part)
  (notmuch-wash-citation-lines-prefix 6)
  (notmuch-wash-citation-lines-suffix 6)
  (notmuch-wash-wrap-lines-length 100)
  (shr-use-colors nil)
  (notmuch-show-text/html-blocked-images nil)  ; enable images
  ;; (notmuch-show-text/html-blocked-images ".") ; block everything
  ;; (notmuch-unthreaded-show-out nil)
  (notmuch-message-headers '("Subject" "To" "Cc" "Bcc" "Date" "Reply-To" "User-Agent"))
  ;; (notmuch-message-headers '("To" "Cc" "Subject" "Date"))
  ;; (notmuch-message-headers-visible t)
  (notmuch-hello-sections '(notmuch-hello-insert-header
                            notmuch-hello-insert-saved-searches
                            notmuch-hello-insert-search
                            notmuch-hello-insert-recent-searches
                            notmuch-hello-insert-alltags
                            notmuch-hello-insert-footer))
  (notmuch-show-all-tags-list t)
  ;;   '(notmuch-draft-folder "top/Drafts")
  ;; '(notmuch-fcc-dirs "top/Sent")
  :config
  ;; (require 'notmuch-mode-line)
  ;; (require 'notmuch-nav)
  ;; (require 'notmuch-tree-hide)
  ;; (require 'notmuch-tree)
  ;; (require 'notmuch-fold)

  ;; (custom-set-faces
  ;;  '(notmuch-tree-match-tree-face ((t (:family "Source Code Pro"))) t)
  ;;  '(notmuch-tree-no-match-tree-face ((t (:family "Source Code Pro"))) t))
  ;; (set-face-attribute 'notmuch-search-unread-face nil :foreground "white")
  ;; (set-face-attribute 'notmuch-message-summary-face nil :background "steel blue" :foreground "snow")
  (add-to-list 'notmuch-search-line-faces
               '("deleted" . font-lock-comment-face))

  ;; (unless (string= (system-name) "spicy")
  ;;   (setq notmuch-command "remote-notmuch.sh"))
  ;;; remote-notmuch should look like:

  (define-key notmuch-show-mode-map "d"
	      (lambda ()
		"toggle deleted tag for message"
		(interactive)
		(if (member "deleted" (notmuch-show-get-tags))
		    (notmuch-show-tag (list "-deleted"))
		  (notmuch-show-tag (list "+deleted")))))

  ;; (eval-after-load 'notmuch-show
  ;;   '(define-key notmuch-show-mode-map "`" 'notmuch-show-apply-tag-macro))
  ;; (setq notmuch-show-tag-macro-alist
  ;; 	(list
  ;; 	 '("m" "+notmuch::patch" "+notmuch::moreinfo" "-notmuch::needs-review")))

  (setq notmuch-search-result-format
        '(("date" . "%12s  ")
          ("count" . "%-7s  ")
          ("authors" . "%-20s  ")
          ("subject" . "%-80s  ")
          ("tags" . "(%s)")))

  (setq notmuch-tree-result-format
        '(("date" . "%12s  ")
          ("authors" . "%-20s  ")
          ((("tree" . "%s")
            ("subject" . "%s"))
           . " %-80s  ")
          ("tags" . "(%s)")))

  (setq notmuch-search-line-faces
        '(("unread" . notmuch-search-unread-face)
          ("flag" . notmuch-search-flagged-face)))
  (setq notmuch-show-empty-saved-searches t)

  (setq notmuch-draft-tags '("+draft")
	notmuch-show-mark-read-tags '("-unread")
	notmuch-message-forwarded-tags '("+forwarded")
	notmuch-message-replied-tags '("+replied")
	notmuch-archive-tags '("-inbox" "+archived"))

  ;; (add-to-list 'corfu-excluded-modes 'notmuch-message-mode)
  ;; (add-to-list 'corfu-excluded-modes 'org-msg-edit-mode)

  (defun notmuch-show-apply-tag-macro (key)
    (interactive "k")
    (let ((macro (assoc key notmuch-show-tag-macro-alist)))
      (apply 'notmuch-show-tag-message (cdr macro))))

  (define-key notmuch-show-mode-map "r" 'notmuch-show-reply)
  (define-key notmuch-show-mode-map "R" 'notmuch-show-reply-sender)

  (define-key notmuch-search-mode-map "r" 'notmuch-search-reply-to-thread)
  (define-key notmuch-search-mode-map "R" 'notmuch-search-reply-to-thread-sender)

  (defun apm-notmuch-toggle-tag (tag)
    "Toggle TAG for the current message returning t if we set it."
    (let ((gettagsfun nil)
          (tagfun nil))
      (pcase major-mode
        ('notmuch-search-mode
         (setq gettagsfun #'notmuch-search-get-tags)
         (setq tagfun #'notmuch-search-tag))
        ('notmuch-show-mode
         (setq gettagsfun #'notmuch-show-get-tags)
         (setq tagfun #'notmuch-show-tag))
        ('notmuch-tree-mode
         (setq gettagsfun #'notmuch-tree-get-tags)
         (setq tagfun #'notmuch-tree-tag))
        (_
         (user-error "Must be called from notmuch mode")))
      (if (member tag (funcall gettagsfun))
          (funcall tagfun (list (concat "-" tag)))
        (funcall tagfun (list (concat "+" tag))))
      ;; return whether it is now set or not
      (member tag (funcall gettagsfun))))
  (defun apm-notmuch-toggle-deleted ()
    "Toggle the deleted tag for the current message."
    (interactive)
    (apm-notmuch-toggle-tag "deleted"))
  (defun apm-notmuch-toggle-spam ()
    "Toggle the spam tag for the current message."
    (interactive)
    (if (apm-notmuch-toggle-tag "spam")
        (when-let* ((url (notmuch-show-get-header :X-MailControl-ReportSpam)))
          (and (y-or-n-p "Do you also want to report this message as spam to mailcontrol? ")
               (eww-browse-url url)))))

  (setq mail-user-agent 'notmuch-user-agent)
  ;; (define-key notmuch-tree-mode-map "r" (notmuch-tree-close-message-pane-and #'notmuch-show-reply))
  ;; (define-key notmuch-tree-mode-map "R" (notmuch-tree-close-message-pane-and #'notmuch-show-reply-sender))
  ;;;
  ;;; #!/usr/bin/env bash
  ;;; printf -v ARGS "%q " "$@"
  ;;; exec ssh notmuch notmuch ${ARGS}

  ;; ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
  (when (boundp 'read-extended-command-predicate)
    (setq read-extended-command-predicate
          #'command-completion-default-include-p))

  ;; In non-programming-buffers, we don't want `pcomplete-completions-at-point'
  ;; or 't' which seems to complete everything.
  (defun ash/fix-completion-for-nonprog-buffers ()
    (setq completion-at-point-functions
          (-remove-item t (append (-remove-item #'pcomplete-completions-at-point completion-at-point-functions)
                                  '(cape-file cape-abbrev cape-rfc1345)))))
  (add-hook 'org-mode-hook #'ash/fix-completion-for-nonprog-buffers)
  (add-hook 'notmuch-message-mode-hook #'ash/fix-completion-for-nonprog-buffers)

  ;;; Hooks and key bindings
  (add-hook 'notmuch-mua-send-hook #'notmuch-mua-attachment-check)
  (remove-hook 'notmuch-show-hook #'notmuch-show-turn-on-visual-line-mode)
  (add-hook 'notmuch-show-hook (lambda () (setq-local header-line-format nil))))

;; (use-package notmuch-capf
;;   :vc (:url "https://github.com/tpeacock19/notmuch-capf"))

;; (use-package notmuch-labeler
;;   :commands notmuch-labeler-rename
;;   :defer t
;;   :after notmuch
;;   )

;; (use-package notmuch-bookmarks
;;   :after notmuch
;;   :config
;;   (notmuch-bookmarks-mode))

;; (use-package notmuch-alert
;; :vc (:url "https://github.com/publicimageltd/notmuch-alerts" :rev :newest)
;;   :after notmuch-bookmarks
;;   :config
;;   (notmuch-alert-mode)
;;   (defun notmuch-alert-unread-attachment ()
;;     "Create a new alert object for unread mails with attachment."
;;     (make-notmuch-alert :filter "date:today"
;; 			:description "Check for mails from today"
;; 			:format-string "%d mails from today"))
;;   (defun notmuch-alert-unread-attachment ()
;;     "Create a new alert object for unread mails with attachment."
;;     (make-notmuch-alert :filter "date:today"
;; 			:description "Check for mails from today"
;; 			:format-string "%d mails from today"))
;;   :bind*
;;   (:map global-map
;; 	("<f3>" . notmuch-alert-visit))
;;   )

(use-package notmuch-notify
  :ensure t
  :disabled
  :vc (:url "https://github.com/firmart/notmuch-notify" :branch "master" :rev :newest)
  ;; (Recommended) activate stats message when refreshing `notmuch-hello' buffer
  :hook (notmuch-hello-refresh . notmuch-notify-hello-refresh-status-message)
  :custom
  ;; (notmuch-notify-excluded-tags '("Org-Mode" "FromMe"))
  (notmuch-notify-refresh-interval 300)
  (alert-default-style 'notifier)
  (notmuch-notify-alert-profiles
   `((:name "inbox"
	    :search-term "tag:inbox"
	    :severity urgent
	    :title "Notmuch inbox:"
	    :icon "/Applications/MacPorts/EmacsMac.app/Contents/Resources/Emacs.icns"
	    ;; :icon ,(expand-file-name "straight/build/notmuch-notify/notmuch-logo.png" straight-base-dir)
	    :audio ,(expand-file-name "straight/build/notmuch-notify/emailreceived.wav" straight-base-dir))
     (:name "default")))
  :config
  ;; (Recommended) activate system-wise notification timer
  (notmuch-notify-set-refresh-timer))

(use-package notmuch-update
  :vc (:url "https://github.com/shuxiao9058/notmuch-update" :branch "main" :rev :newest)
  :disabled
  :custom
  (notmuch-update-command "/opt/local/bin/fdm fetch && notmuch new")
  (notmuch-update-interval (* 5 60))
  :config
  (defun splinter-notmuch-refresh-non-show-buffers ()
    "Invoke `notmuch-refresh-this-buffer' on all notmuch major-mode buffers
except for `notmuch-show-mode' buffers."
    (interactive)
    (dolist (buffer (buffer-list))
      (let ((buffer-mode (buffer-local-value 'major-mode buffer)))
        (when (memq buffer-mode '(notmuch-tree-mode notmuch-search-mode notmuch-hello-mode))
	  (with-current-buffer buffer
	    (notmuch-refresh-this-buffer))))))
  (add-hook 'notmuch-hello-mode-hook  #'notmuch-update-start)
  :bind
  (:map notmuch-common-keymap (("u" . notmuch-update))))

(use-package notmuch-indicator
  :disabled
  :init
  (setq notmuch-indicator-args
        '((:terms "tag:unread and tag:inbox" :label "Ⓤ" :face (variable-pitch success))
          (:terms "tag:unread and tag:package" :label "Ⓟ" :face (variable-pitch warning))
          (:terms "tag:unread and tag:coach" :label "Ⓒ" :face (variable-pitch error)))
        notmuch-indicator-refresh-count (* 60 3)
        notmuch-indicator-hide-empty-counters t
        notmuch-indicator-force-refresh-commands '(notmuch-refresh-this-buffer))
  (notmuch-indicator-mode))
#+end_src

** GNUS

#+begin_src emacs-lisp :tangle no
(use-package gnus
  :ensure nil
  ;; :bind (("C-c m" . 'gnus))
  ;; :bind (:map gnus-article-mode-map
  ;;             ("o" . gnus-mime-copy-part)
  ;;             :map gnus-topic-mode-map
  ;;             ("<tab>" . gnus-topic-select-group))
  :commands gnus
  :hook
  (gnus-select-group-hook . gnus-group-set-timestamp)
  (gnus-summary-exit-hook . gnus-topic-sort-groups-by-alphabet)
  (gnus-summary-exit-hook . gnus-group-sort-groups-by-rank)
  (gnus-group-mode . gnus-topic-mode)
  ((gnus-browse-mode gnus-server-mode gnus-group-mode gnus-summary-mode) . hl-line-mode)
  (gnus-started-hook . gnus-group-list-all-groups)
  :custom
  (gnus-use-cache nil)
  (gnus-use-scoring nil)
  (gnus-keep-backlog 10)
  (gnus-suppress-duplicates t)
  (gnus-novice-user nil)
  (gnus-expert-user t)
  (gnus-interactive-exit 'quiet)
  (gnus-dbus-close-on-sleep t)
  (gnus-use-cross-reference nil)
  (gnus-inhibit-startup-message nil)
  ;; (gnus-select-method '(nnmaildir "" (directory "~/Mail/")))
  ;; (gnus-home-directory (expand-file-name "gnus/" poly-cache-dir))
  ;; (gnus-select-method '(nnfolder ""))
  ;; (gnus-secondary-select-methods
  ;;  '(
  ;;    (nnfolder "")
  ;;    ;; (nnmaildir ""
  ;;    ;; 		(directory "~/Mail/"))
  ;;    )
  ;;  )
  ;; (gnus-select-method
  ;;  '(nnmaildir "MyMail"
  ;;              (directory "~/Mail/")))
  ;; (gnus-secondary-select-methods nil)

  ;; (gnus-secondary-select-methods
  ;;  '((nnmaildir "MyMail"
  ;;               (directory "~/Mail/"))))
  ;; (gnus-secondary-select-methods
  ;;  '((nnmaildir ""
  ;;               (directory "~/Mail/"))))
  ;; Render HTML content using gnus-w3m
  (mm-text-html-renderer 'gnus-w3m)
  (browse-url-browser-function #'w3m-browse-url)
  (gnus-inhibit-images nil);; Keep images displayed
  (gnus-blocked-images nil)
  (mm-inline-text-html-with-images t)
  :config
  (auto-image-file-mode t)

  ;; (setq ;; mail-sources
  ;;  mail-sources '((maildir :path "~/Mail/" :subdirs ("cur" "new")))
  ;;  ;; '((maildir :path "~/Mail/Inbox/")
  ;;  ;;   (maildir :path "~/Mail/archive/"))
  ;;  )
  ;; (setq gnus-select-method '(nnnil ""))
  ;; (setq gnus-select-method
  ;; 	'(nnmaildir "" (directory "~/Mail")))
  ;; (setq gnus-secondary-select-methods nil)

  ;; (setq mail-sources
  ;; 	'((maildir :path "~/Mail/work/"  :subdirs ("cur" "new" "tmp"))))
  ;; (setq mail-sources nil)
  (setq poly/mail-root-dir (expand-file-name "Mail" "~"))
  ;; (let ((gmail (expand-file-name "Gmail"  poly/mail-root-dir))
  ;; 	(work (expand-file-name "Work"  poly/mail-root-dir)))
  ;;   (setq mail-sources nil)
  ;;   ;; (message "work is: %s" work)
  ;;   (when (file-directory-p gmail)
  ;;     (add-to-list 'mail-sources `(maildir :path ,gmail  :subdirs ("cur" "new" "tmp"))))
  ;;   (when (file-directory-p work)
  ;;     (message "directory is exist")
  ;;     (add-to-list 'mail-sources `(maildir :path ,work  :subdirs ("cur" "new" "tmp"))))

  ;;   ;; (setq gnus-secondary-select-methods
  ;;   ;;   `((nnmaildir "gmail" (directory ,gmail))
  ;;   ;; 	(nnmaildir "work" (directory ,work))))
  ;;   ;; (setq gnus-select-method
  ;;   ;;   '(nnmaildir "Local"
  ;;   ;;               (directory "~/Maildir")
  ;;   ;;               (nnir-search-engine notmuch)
  ;;   ;;   ))

  ;;   ;; (setq gnus-select-method
  ;;   ;; 	  `(nnmaildir "gmail"
  ;;   ;; 		      (directory ,gmail)
  ;;   ;; 		      (expire-age never))
  ;;   ;; 	  ;; `((nnmaildir "gmail" (directory ,gmail))
  ;;   ;; 	  ;;   (nnmaildir "work" (directory ,work)))
  ;;   ;; 	  )

  ;;   (setq gnus-secondary-select-methods
  ;; 	  `((nnmaildir  "gmail" (directory ,gmail)
  ;; 			(directory-files nnheader-directory-files-safe)
  ;; 			(expire-age never)
  ;; 			(get-new-mail nil))
  ;; 	    (nnmaildir  "work" (directory ,poly/mail-root-dir)
  ;; 			(directory-files nnheader-directory-files-safe)
  ;; 			(expire-age never)
  ;; 			(get-new-mail nil)))))

  (setq gnus-secondary-select-methods
	  `(;; (nnmaildir  "gmail" (directory ,gmail)
	    ;; 		(directory-files nnheader-directory-files-safe)
	    ;; 		(expire-age never)
	    ;; 		(get-new-mail nil))
	    (nnmaildir  "Mail" (directory "/Users/jiya/Mail/")
			(directory-files nnheader-directory-files-safe)
			(expire-age never)
			(get-new-mail nil))))

  (setq mail-source-delete-incoming nil)
  ;; (setq gnus-message-archive-group "nnmaildir+Work:archive")
  ;; (setq gnus-secondary-select-methods nil)
  ;; (setq gnus-select-method nil)
  (setq gnus-select-method '(nnnil))
  ;; (setq gnus-select-method '(nnml ""))
  (add-hook 'gnus-group-mode-hook 'gnus-topic-mode)
  (setq gnus-use-trees nil)
  (setq gnus-gcc-mark-as-read t)
  (setq gnus-asynchronous t)

  (setq gnus-check-new-newsgroups nil)
  ;; (setq gnus-select-method '(nnnil ""))

  ;; (setq gnus-permanently-visible-groups ".*")
  ;; (setq gnus-message-archive-group "nnmaildir+gmail:outbox")

  (setq gnu-fetch-old-headers t)
  (setq  mail-source-delete-incoming nil)
  ;; (setq gnus-thread-sort-functions
  ;; 	'(gnus-thread-sort-by-number
  ;;         gnus-thread-sort-by-most-recent-date))

  ;; (setq gnus-secondary-select-methods nil)
  ;; (setq gnus-secondary-select-methods
  ;; 	'((nnmaildir "Gmail"
  ;; 		     (directory "~/Mail/Inbox"))
  ;; 	  (nnmaildir "QQMail"
  ;; 		     (directory "~/Mail/QQMail"))
  ;; 	  (nnmaildir "Work"
  ;; 		     (directory "~/Mail/work"))
  ;; 	  ))

  ;; (setq mh-mime-save-parts-directory (expand-file-name "Mail/attachments" "~"))

  ;; set default attachement download directory
  (setq mm-default-directory (expand-file-name "Mail/attachments" "~"))

  (setq message-forward-as-mime nil)

  ;; prevent ask "Gnus auto-save file exists"
  (setq gnus-always-read-dribble-file t)

  ;; (setq gnus-select-method
  ;; 	'(nnmaildir ""
  ;; 		    (directory "~/Mail/Inbox")
  ;; 		    (get-new-mail nil)))

  ;; ;; Sent mail
  ;; (setq gnus-message-archive-method gnus-select-method)
  ;; (setq gnus-message-archive-oroup "Sent")

  ;; (setq gnus-secondary-select-methods
  ;; 	'((nnml ""))
  ;; 	mail-user-agent 'gnus-user-agent
  ;; 	read-mail-command 'gnus)

  ;; (setq gnus-secondary-select-methods nil)

  ;; (setq group-name-map '(
  ;; 			 ;; 	 ("nnmaildir+OldEmail:INBOX" . "Gmail-Inbox")
  ;; 			 ("nnmaildir+Work:inbox" . "Work-Inbox")
  ;; 			 ;; ("nnmaildir+Work:Archive" . "Work-Archive")
  ;; 			 ;; ("nnmaildir+Work:Backlog" . "Work-Backlog")
  ;; 			 ;; ("nnmaildir+Work:Sent Mail" . "Work-Sent")
  ;; 			 ;; ("nnmaildir+Work:org-archive" . "Work-Org-Archive")
  ;; 			 ;; ("nnmaildir+Gmail:INBOX" . "Gmail: Inbox")
  ;; 			 ;; ("Inbox" . "Gmail: Inbox")
  ;; 			 ;; ("QQMail" . "Gmail: QQMail")
  ;; 			 ))

  ;; (setq group-name-map '(
  ;; 			 ;; 	 ("nnmaildir+OldEmail:INBOX" . "Gmail-Inbox")
  ;; 			 ;; ("nnmaildir+Work:INBOX" . "Work-Inbox")
  ;; 			 ;; ("nnmaildir+Work:Archive" . "Work-Archive")
  ;; 			 ;; ("nnmaildir+Work:Backlog" . "Work-Backlog")
  ;; 			 ;; ("nnmaildir+Work:Sent Mail" . "Work-Sent")
  ;; 			 ;; ("nnmaildir+Work:org-archive" . "Work-Org-Archive")
  ;; 			 ;; ("nnmaildir+Gmail:INBOX" . "Gmail: Inbox")
  ;; 			 ("Inbox" . "nnmaildir+Gmail:Inbox")
  ;; 			 ("QQMail" . "Gmail: QQMail")
  ;; 			 ))
  (setq gnus-group-line-format "%ue%uM %S%p[%5t][%L]\t%P%5y:%B%(%uG%)%O\n")


  ;; You need to replace this key ID with your own key ID!
  (setq mml2015-signers '("FC6BDB92CD5BEB22")
	mml2015-encrypt-to-self t)
  (add-hook 'message-send-hook 'mml-secure-message-sign-pgpmime)

  (setq mm-inline-text-html-with-images t)

  (require 'browse-url)
  ;; (require 'gnus-dired)
  ;; (require 'gnus-topic)

  (setq nnmail-expiry-wait 30)
  (setq mm-encrypt-option 'guided)
  (setq mml-secure-openpgp-encrypt-to-self t)
  (setq mml-secure-openpgp-sign-with-sender t)
  (setq mml-secure-smime-encrypt-to-self t)
  (setq mml-secure-smime-sign-with-sender t)

  ;; gnus article
  (setq gnus-article-browse-delete-temp 'ask)
  (setq gnus-article-over-scroll nil)
  (setq gnus-article-show-cursor t)
  (setq gnus-article-sort-functions
        '((not gnus-article-sort-by-number)
          (not gnus-article-sort-by-date)))
  (setq gnus-article-truncate-lines nil)
  (setq gnus-html-frame-width 80)
  (setq gnus-html-image-automatic-caching t)
  (setq gnus-inhibit-images t)
  (setq gnus-max-image-proportion 0.3)
  (setq gnus-treat-display-smileys nil)
  (setq gnus-article-mode-line-format "%G %S %m")
  ;; (setq gnus-visible-headers
  ;;       '("^From:" "^To:" "^Cc:" "^Newsgroups:" "^Subject:" "^Date:"
  ;;         "Followup-To:" "Reply-To:" "^Organization:" "^X-Newsreader:"
  ;;         "^X-Mailer:"))
  ;; (setq gnus-sorted-header-list gnus-visible-headers)

  ;; Gnus group
  (setq gnus-level-subscribed 6)
  (setq gnus-level-unsubscribed 7)
  (setq gnus-level-zombie 8)
  (setq gnus-list-groups-with-ticked-articles nil)
  )

(use-package gnus-group
  :after gnus
  :ensure nil
  :custom
  (gnus-group-sort-function 'gnus-group-sort-by-server)
  (gnus-level-subscribed 6)
  (gnus-level-unsubscribed 7)
  (gnus-level-zombie 8)
  (gnus-activate-level 2)
  (gnus-list-groups-with-ticked-articles nil)
  (gnus-group-line-format "%M%p%P%5y:%B%(%g%)\n")
  (gnus-group-mode-line-format "%%b")
  :config
  ;; (setq gnus-group-sort-function
  ;;       '((gnus-group-sort-by-unread)
  ;;         (gnus-group-sort-by-alphabet)
  ;;         (gnus-group-sort-by-rank)))
  (defun my-gnus-group-list-subscribed-groups ()
    "List all subscribed groups with or without un-read messages"
    (interactive)
    (gnus-group-list-all-groups 5))

  (define-key gnus-group-mode-map
	      ;; list all the subscribed groups even they contain zero un-read messages
	      (kbd "o") 'my-gnus-group-list-subscribed-groups)
  :hook ((gnus-group-mode-hook . hl-line-mode)
         (gnus-select-group-hook . gnus-group-set-timestamp))
  :bind (:map gnus-group-mode-map
	      ("M-n" . gnus-topic-goto-next-topic)
	      ("M-p" . gnus-topic-goto-previous-topic)))

(use-package gnus-topic
  :after (gnus gnus-group)
  :ensure nil
  :config
  (setq gnus-message-archive-group '((format-time-string "sent.%Y")))
  (setq gnus-topic-topology '(("Gnus" visible)
                              (("misc" visible))
                              (("Work" visible nil nil))
                              (("Gmail" visible nil nil))))
  ;; key of topic is specified in my sample ".gnus.el"
  (setq gnus-topic-alist '(("Gmail" ; the key of topic
                            "nnmaildir+Mail:Gmail")
			   ("Work" ; the key of topic
                            "nnmaildir+Mail:Work")
                           ("misc" ; the key of topic
                            "nndraft:drafts")
                           ("Gnus")))

  (setq gnus-topic-display-empty-topics t)
  (add-hook 'gnus-group-mode-hook #'gnus-topic-mode)
  )

(use-package gnus-async
  :after gnus
  :ensure nil
  :defer t
  :config
  (setq gnus-asynchronous t)
  (setq gnus-use-article-prefetch 15))

(use-package gnus-sum
  :after gnus
  :defer t
  :ensure nil
  :config
  (setq gnus-auto-select-first nil)
  (setq gnus-summary-ignore-duplicates t)
  (setq gnus-suppress-duplicates t)
  (setq gnus-save-duplicate-list t)
  (setq gnus-summary-goto-unread nil)
  (setq gnus-summary-make-false-root 'adopt)
  (setq gnus-summary-thread-gathering-function
        'gnus-gather-threads-by-subject)
  (setq gnus-summary-gather-subject-limit 'fuzzy)
  (setq gnus-thread-sort-functions '(gnus-thread-sort-by-most-recent-date (not gnus-thread-sort-by-number)))
  ;; (setq gnus-thread-sort-functions
  ;;       '(gnus-thread-sort-by-most-recent-date
  ;; 	  gnus-thread-sort-by-date
  ;;         (not gnus-thread-sort-by-number)
  ;; 	  (not gnus-thread-sort-by-most-recent-date)))
  (setq gnus-subthread-sort-functions
        'gnus-thread-sort-by-date)
  (setq gnus-thread-hide-subtree nil)
  (setq gnus-thread-ignore-subject nil)
  (setq gnus-user-date-format-alist
        '(((gnus-seconds-today) . "Today at %R")
          ((+ (* 60 60 24) (gnus-seconds-today)) . "Yesterday, %R")
          (t . "%Y-%m-%d %R")))
  (setq gnus-face-1 'gnus-header-content)
  (setq gnus-face-2 'gnus-header-from)
  (setq gnus-face-3 'gnus-header-subject)
  (setq gnus-summary-line-format "%U%R  %1{%-16,16&user-date;%}  %2{%-25,25f%}  %3{%B%S%}\n")
  (setq gnus-summary-mode-line-format "%p")
  ;; (setq gnus-sum-thread-tree-false-root ""
  ;;       gnus-sum-thread-tree-indent " "
  ;;       gnus-sum-thread-tree-leaf-with-other "├► "
  ;;       gnus-sum-thread-tree-root ""
  ;;       gnus-sum-thread-tree-single-leaf "╰► "
  ;;       gnus-sum-thread-tree-vertical "│")
  (setq gnus-sum-thread-tree-false-root "─┬> ")
  (setq gnus-sum-thread-tree-indent " ")
  (setq gnus-sum-thread-tree-single-indent "")
  (setq gnus-sum-thread-tree-leaf-with-other "├─> ")
  (setq gnus-sum-thread-tree-root "")
  (setq gnus-sum-thread-tree-single-leaf "└─> ")
  (setq gnus-sum-thread-tree-vertical "│"))

(use-package gnus-dired
  :ensure nil
  :after gnus
  :hook (dired-mode . gnus-dired-mode)
  )

(use-package gnus-art
  :ensure nil
  :after gnus
  :config
  (setq
   gnus-article-browse-delete-temp 'ask
   gnus-article-over-scroll nil
   gnus-article-show-cursor t
   gnus-article-sort-functions
   '((not gnus-article-sort-by-number)
     (not gnus-article-sort-by-date))
   gnus-article-truncate-lines nil
   gnus-html-frame-width 80
   gnus-html-image-automatic-caching t
   gnus-inhibit-images t
   gnus-max-image-proportion 0.7
   gnus-treat-display-smileys nil
   gnus-article-mode-line-format "%G %S %m"
   gnus-visible-headers
   '("^From:" "^Subject:" "^To:" "^Cc:" "^Newsgroups:" "^Date:"
     "Followup-To:" "Reply-To:" "^Organization:" "^X-Newsreader:"
     "^X-Mailer:")
   gnus-sorted-header-list gnus-visible-headers
   )
  :hook (gnus-article-mode-hook . (lambda () (setq-local fill-column 80))))
#+end_src


** Others

*** mm

#+begin_src emacs-lisp :tangle no
;; You need to replace this key ID with your own key ID!
(setq mml2015-signers '("FC6BDB92CD5BEB22")
      mml2015-encrypt-to-self t)
(add-hook 'message-send-hook 'mml-secure-message-sign-pgpmime)
(setq mm-inline-text-html-with-images t)

(setq mm-text-html-renderer 'w3m)
;; (setq browse-url-browser-function #'w3m-browse-url)
;; (setq browse-url-browser-function 'xwidget-webkit-browse-url)
(setq browse-url-browser-function 'browse-url-default-macosx-browser)
(setq gnus-inhibit-images nil);; Keep images displayed
(setq gnus-blocked-images nil)
(setq mm-inline-text-html-with-images t)

(setq mm-coding-system-priorities '(iso-8859-1 gbk gb18030 utf-8))
(setq mm-use-ultra-safe-encoding t)

  ;; use imagemagick, if available
  (when (fboundp 'imagemagick-register-types)
    (imagemagick-register-types))

(require 'epg-config)

(setq-default mml2015-use 'epg
              mml2015-encrypt-to-self t
              mml2015-sign-with-sender t)

(setq mm-inlined-types (remove "application/zip" mm-inlined-types))
#+end_src

*** w3m

#+begin_src emacs-lisp :tangle no
(use-package w3m
  :config
  (with-eval-after-load 'notmuch
    (notmuch-show-setup-w3m)))
#+end_src

*** ebdb

#+begin_src emacs-lisp :tangle no
(use-package ebdb
  :config
  (require 'ebdb-message)
  (require 'ebdb-notmuch) ; FIXME 2021-05-13: does not activate the corfu-mode UI
  ;; (setq ebdb-sources (locate-user-emacs-file "ebdb"))
  (setq ebdb-sources (expand-file-name "ebdb/ebdb" poly-cache-dir))
  (setq ebdb-permanent-ignores-file (expand-file-name "ebdb/ebdb-permanent-ignores" poly-cache-dir))

  (setq ebdb-mua-pop-up nil)
  (setq ebdb-default-window-size 0.25)
  (setq ebdb-mua-default-formatter ebdb-default-multiline-formatter)

  ;; (setq ebdb-mua-auto-update-p 'existing)
  ;; (setq ebdb-mua-reader-update-p 'existing)
  ;; (setq ebdb-mua-sender-update-p 'create)
  ;; (setq ebdb-message-auto-update-p 'create)

  ;; (setq ebdb-mua-auto-update-p nil)
  ;; (setq ebdb-mua-reader-update-p nil)
  ;; (setq ebdb-mua-sender-update-p nil)
  ;; (setq ebdb-message-auto-update-p nil)

  (setq ebdb-message-try-all-headers t)
  (setq ebdb-message-headers
        '((sender "From" "Resent-From" "Reply-To" "Sender")
          (recipients "Resent-To" "Resent-Cc" "Resent-CC" "To" "Cc" "CC" "Bcc" "BCC")))
  (setq ebdb-message-all-addresses t)

  (setq ebdb-complete-mail 'capf)
  (setq ebdb-mail-avoid-redundancy t)
  (setq ebdb-completion-display-record nil)
  (setq ebdb-complete-mail-allow-cycling nil)

  ;; (setq ebdb-record-self "ace719a4-61f8-4bee-a1ca-2f07e2292305")
  (setq ebdb-user-name-address-re 'self) ; match the above
  (setq ebdb-save-on-exit t)

  ;; (add-hook 'message-setup-hook #'prot-mail-ebdb-message-setup)
  ;; (with-eval-after-load 'prot-mail ; check my `prot-mail.el'
  ;;   (add-hook 'message-setup-hook #'prot-mail-ebdb-message-setup))
  (let ((map ebdb-mode-map))
    (define-key map (kbd "D") #'ebdb-delete-field-or-record)
    (define-key map (kbd "M") #'ebdb-mail) ; disables `ebdb-mail-each'
    (define-key map (kbd "m") #'ebdb-toggle-record-mark)
    (define-key map (kbd "t") #'ebdb-toggle-all-record-marks)
    (define-key map (kbd "T") #'ebdb-toggle-records-format) ; disables `ebdb-toggle-all-records-format'
    (define-key map (kbd "U") #'ebdb-unmark-all-records))

  (remove-hook 'message-send-hook 'ebdb-message-auto-update)
  (remove-hook 'mail-send-hook 'ebdb-message-auto-update)

  ;; (add-hook 'gnus-message-setup-hook #'poly/org-msg-post)
  ;; (advice-add 'org-msg-post-setup :after 'poly/org-msg-post)
  ;; (advice-add 'org-msg-post-setup--if-not-reply :after 'poly/org-msg-post)

  ;;   (advice-add 'org-msg-post-setup :around 'poly/org-msg-post)
  ;; (advice-add 'org-msg-post-setup--if-not-reply :around 'poly/org-msg-post)
  ;; (add-hook 'notmuch-mua-reply #'poly/org-msg-post)
  ;; (add-hook 'notmuch-mua-mail #'poly/org-msg-post)
  )
#+end_src

** Marking Articles
 https://github.com/cofi/dotfiles/blob/master/gnus.el
 https://github.com/fniessen/gnus-leuven

#+begin_src emacs-lisp :tangle no
  ;; Unread Articles
  (when (char-displayable-p ?\u2691)
    (setq gnus-ticked-mark ?⚑))

  (when (char-displayable-p ?\u2690)
    (setq gnus-dormant-mark ?⚐))

  (when (char-displayable-p ?\u2709)
    (setq gnus-unread-mark ?✉))

  ;; Read Articles
  (when (char-displayable-p ?\u2717)
    (setq gnus-del-mark ?✗))

  (when (char-displayable-p ?\u2713)
    (setq gnus-read-mark ?✓))

  (setq gnus-ancient-mark ? )

  (when (char-displayable-p ?\u2620)
    (setq gnus-killed-mark ?☠))

  (when (char-displayable-p ?\u2197)
    (setq gnus-canceled-mark ?↗))

  (when (char-displayable-p ?\u267B)
    (setq gnus-expirable-mark ?♻))
  ;; Other marks

  (when (char-displayable-p ?\u21BA)
    (setq gnus-replied-mark ?↺))

  (when (char-displayable-p ?\u21AA)
    (setq gnus-forwarded-mark ?↪))

  (when (char-displayable-p ?\u260D)
    (setq gnus-cached-mark ?☍))

  (when (char-displayable-p ?\u2729)
    (setq gnus-unseen-mark ?✩))

  (when (char-displayable-p ?\u2699)
    (setq gnus-process-mark ?⚙))

  (when (char-displayable-p ?\u2605)
    (setq gnus-recent-mark ?★))

  ;; score variables
  (when (char-displayable-p ?\u2191)
    (setq gnus-score-over-mark ?↑))

  (when (char-displayable-p ?\u2193)
    (setq gnus-score-below-mark ?↓))
#+end_src


** outline

#+begin_src emacs-lisp :tangle no
(use-package outline
  :ensure nil
  :diminish outline-minor-mode
  :commands outline-minor-mode
  :init
  (add-hook 'prog-mode-hook 'outline-minor-mode)
  (add-hook 'TeX-mode-hook 'outline-minor-mode)
  (add-hook 'message-mode-hook 'outline-minor-mode)
  ;; (defvar outline-minor-mode-prefix "\M-O")
  :config
  (dolist (buf (buffer-list))
    (with-current-buffer buf
      (when (derived-mode-p 'prog-mode 'tex-mode 'message-mode)
        (outline-minor-mode))))
  ;; (smartrep-define-key outline-minor-mode-map "M-s"
  ;;   '(("p" . outline-previous-visible-heading)
  ;;     ("n" . outline-next-visible-heading)
  ;;     ("u" . outline-up-heading)
  ;;     ("b" . outline-backward-same-level)
  ;;     ("f" . outline-forward-same-level)))
  (define-key outline-minor-mode-map (kbd "<M-S-return>") 'outline-insert-heading)
  (define-key outline-minor-mode-map (kbd "<backtab>") 'outshine-cycle-buffer)
  (define-key outline-minor-mode-map (kbd "C-M-i") nil)
  (add-hook 'outline-insert-heading-hook (lambda ()
                                           (if (string-equal "" head)
                                               (progn (call-interactively 'comment-dwim)
                                                      (insert "* "))
                                             (when (memq major-mode '(c++-mode
                                                                      c-mode
                                                                      arduino-mode))
                                               (save-excursion (insert " */"))))))
  (add-hook 'TeX-mode-hook
            (lambda ()
              (define-key outline-minor-mode-map (kbd "\C-i") '(menu-item "maybe-latex/hide-show" nil :filter
                                                                          (lambda (&rest _)
                                                                            (when (latex//header-at-point)
                                                                              #'outline-cycle))))))
  ;; Copied from latex-extra.
  (defcustom latex/section-hierarchy
    '("\\\\headerbox\\_>"
      "\\\\subparagraph\\*?\\_>"
      "\\\\paragraph\\*?\\_>"
      "\\\\subsubsection\\*?\\_>"
      "\\\\subsection\\*?\\_>"
      "\\\\section\\*?\\_>"
      "\\\\chapter\\*?\\_>"
      "\\\\part\\*?\\_>"
      ;; "\\\\maketitle\\_>"
      "\\\\appendix\\_>\\|\\\\\\(begin\\|end\\){document}"
      "\\\\documentclass\\_>")
    "List of regexps which define what a section can be.Ordered from deepest to highest level."
    :group 'outlines
    :type '(repeat (choice regexp function)))
  (defun latex/section-regexp ()
    "Return a regexp matching anything in `latex/section-hierarchy'."
    (format "^\\(%s\\)" (mapconcat 'identity latex/section-hierarchy "\\|")))
  (defun latex//header-at-point ()
    "Return header under point or nil, as per `latex/section-hierarchy'."
    (save-match-data
      (save-excursion
        (goto-char (line-beginning-position))
        (when (looking-at (latex/section-regexp))
          (match-string-no-properties 0))))))
#+end_src

** outshine

#+begin_src emacs-lisp
(use-package outshine
  :diminish outshine-mode
  :commands (outshine-mode
             outshine-cycle-buffer
             outshine-calc-outline-regexp)
  :init
  (add-hook 'outline-minor-mode-hook
            (lambda () ;; 在latex-mode和org-mode中不开启outshine。
              (unless (derived-mode-p 'latex-mode 'org-mode)
                (outshine-mode))))
  :config
  ;; Heading格式随mode不同，通常是M-;加*加空格
  (setq outshine-use-speed-commands t)
  (setq outshine-imenu-show-headlines-p nil)
  (define-key outshine-mode-map (kbd "M-TAB") nil))
#+end_src

** outorg

#+begin_src emacs-lisp
(use-package outorg
  ;; M-O # current heading.
  ;; C-u M-O # current buffer.
  ;; M-# outorg-copy-edits-and-exit.
  :after outshine)
#+end_src

** org-download

org-download-paste for clipboard images

#+begin_src emacs-lisp
(use-package org-download)
#+end_src

** org-msg send mail
#+begin_src emacs-lisp
(use-package org-msg
  :hook (org-msg-edit-mode . (lambda ()
			       (wakatime-mode -1)
			       (poly/set-mail-capf)
			       ;; (set-fill-column 100)
			       ;; (turn-on-auto-fill)
			       (electric-indent-local-mode -1)
			       ;; (turn-on-flyspell)
			       ))
  :config
  (org-msg-mode-notmuch)
  (setq org-msg-options "html-postamble:nil H:5 num:nil ^:{} toc:nil author:nil email:nil num:t \\n:t"
	org-msg-startup "hidestars indent inlineimages"
	org-msg-greeting-fmt "\nHi%s,\n\n"
	org-msg-greeting-name-limit 3
	org-export-global-macros  '(("color" . "@@html:<span style=\"color: $1\">$2</span>@@@@latex:\textcolor{$1}{$2}@@@@odt:<text:span text:style-name=\"$1\">$2</text:span>@@"))
	org-msg-convert-citation t
	org-msg-default-alternatives '((new		. (text html))
				       (reply-to-html	. (text html))
				       (reply-to-text	. (text)))
	)

  (setq org-msg-enforce-css
	(let* ((font-family '(font-family . "\"PingFang SC Regular\",\"PingFang SC\",\"Microsoft YaHei Regular\",\"Microsoft YaHei\",\"Arial\",\"Helvetica\", \"sans-serif\""))
	       (font-size '(font-size . "10pt"))
	       (font `(,font-family ,font-size))
	       (line-height '(line-height . "10pt"))
	       (bold '(font-weight . "bold"))
	       (theme-color "#0071c5")
	       (color `(color . ,theme-color)))
	  `((del nil
		 (,@font
		  (color . "grey")
		  (border-left . "none")
		  (text-decoration . "line-through")
		  (margin-bottom . "0px")
		  (margin-top . "10px")
		  (line-height . "11pt")))
	    (a nil
               (,color))
	    (a reply-header
               ((color . "black")
		(text-decoration . "none")))
	    (div reply-header
		 ((padding . "3.0pt 0in 0in 0in")
		  (border-top . "solid #e1e1e1 1.0pt")
		  (margin-bottom . "20px")))
	    (span underline
		  ((text-decoration . "underline")))
	    (li nil
		(,@font
		 (margin . " 0 0 0 0")
		 ))
	    (ul nil
		(,@font
		 (margin . "0 0 0 10px")
		 (padding-left . "5px")))
	    (nil org-ul
		 ((list-style-type . "square")))
	    (nil org-ol
		 (,@font
		  (margin-bottom . "0px")
		  (margin-top . "0px")
		  (margin-left . "30px")
		  (padding-top . "0px")
		  (padding-left . "5px")))
	    (nil signature
		 (,@font
		  (line-height . "25pt")
		  (margin-bottom . "20px")))
	    (blockquote quote0
			((padding-left . "5px")
			 (margin-left . "10px")
			 (margin-top . "10px")
			 (margin-bottom . "0")
			 (font-style . "italic")
			 (background . "#f9f9f9")
			 (border-left . "3px solid #ccc")))
	    (blockquote quote1
			((padding-left . "5px")
			 (margin-left . "10px")
			 (margin-top . "10px")
			 (margin-bottom . "0")
			 (font-style . "italic")
			 (background . "#f9f9f9")
			 (color . "#324e72")
			 (border-left . "3px solid #557fb4")))
	    (blockquote quote2
			((padding-left . "5px")
			 (margin-left . "10px")
			 (margin-top . "10px")
			 (margin-bottom . "0")
			 (font-style . "italic")
			 (background . "#f9f9f9")
			 (color . "#6a3a4c")
			 (border-left . "3px solid #a8617c")))
	    (blockquote quote3
			((padding-left . "5px")
			 (margin-left . "10px")
			 (margin-top . "10px")
			 (margin-bottom . "0")
			 (font-style . "italic")
			 (background . "#f9f9f9")
			 (color . "#7a4900")
			 (border-left . "3px solid #e08600")))
	    (blockquote quote4
			((padding-left . "5px")
			 (margin-left . "10px")
			 (margin-top . "10px")
			 (margin-bottom . "0")
			 (font-style . "italic")
			 (background . "#f9f9f9")
			 (color . "#ff34ff")
			 (border-left . "3px solid #ff9afe")))
	    (blockquote quote5
			((padding-left . "5px")
			 (margin-left . "10px")
			 (margin-top . "10px")
			 (margin-bottom . "0")
			 (font-style . "italic")
			 (background . "#f9f9f9")
			 (color . "#ff4a46")
			 (border-left . "3px solid #ffadab")))
	    (blockquote quote6
			((padding-left . "5px")
			 (margin-left . "10px")
			 (margin-top . "10px")
			 (margin-bottom . "0")
			 (font-style . "italic")
			 (background . "#f9f9f9")
			 (color . "#008941")
			 (border-left . "3px solid #00ef71")))
	    (blockquote quote7
			((padding-left . "5px")
			 (margin-left . "10px")
			 (margin-top . "10px")
			 (margin-bottom . "0")
			 (font-style . "italic")
			 (background . "#f9f9f9")
			 (color . "#006fa6")
			 (border-left . "3px solid #0daefe")))
	    (blockquote quote8
			((padding-left . "5px")
			 (margin-left . "10px")
			 (margin-top . "10px")
			 (margin-bottom . "0")
			 (font-style . "italic")
			 (background . "#f9f9f9")
			 (color . "#a30059")
			 (border-left . "3px solid #ff098f")))
	    (blockquote quote9
			((padding-left . "5px")
			 (margin-left . "10px")
			 (margin-top . "10px")
			 (margin-bottom . "0")
			 (font-style . "italic")
			 (background . "#f9f9f9")
			 (color . "#ffdbe5")
			 (border-left . "3px solid #ffffff")))
	    (blockquote quote10
			((padding-left . "5px")
			 (margin-left . "10px")
			 (margin-top . "10px")
			 (margin-bottom . "0")
			 (font-style . "italic")
			 (background . "#f9f9f9")
			 (color . "#000000")
			 (border-left . "3px solid #333333")))
	    (blockquote quote11
			((padding-left . "5px")
			 (margin-left . "10px")
			 (margin-top . "10px")
			 (margin-bottom . "0")
			 (font-style . "italic")
			 (background . "#f9f9f9")
			 (color . "#0000a6")
			 (border-left . "3px solid #0d0dfe")))
	    (blockquote quote12
			((padding-left . "5px")
			 (margin-left . "10px")
			 (margin-top . "10px")
			 (margin-bottom . "0")
			 (font-style . "italic")
			 (background . "#f9f9f9")
			 (color . "#63ffac")
			 (border-left . "3px solid #c8ffe2")))
	    (code nil
		  ((font-size . "10pt")
		   (font-family . "monospace")
		   (background . "#f9f9f9")))
	    (code src\ src-asl
		  ((color . "#ffffff")
		   (background-color . "#000000")))
	    (code src\ src-c
		  ((color . "#ffffff")
		   (background-color . "#000000")))
	    (code src\ src-c++
		  ((color . "#ffffff")
		   (background-color . "#000000")))
	    (code src\ src-conf
		  ((color . "#ffffff")
		   (background-color . "#000000")))
	    (code src\ src-cpp
		  ((color . "#ffffff")
		   (background-color . "#000000")))
	    (code src\ src-csv
		  ((color . "#ffffff")
		   (background-color . "#000000")))
	    (code src\ src-diff
		  ((color . "#ffffff")
		   (background-color . "#000000")))
	    (code src\ src-ditaa
		  ((color . "#ffffff")
		   (background-color . "#000000")))
	    (code src\ src-emacs-lisp
		  ((color . "#ffffff")
		   (background-color . "#000000")))
	    (code src\ src-fundamental
		  ((color . "#ffffff")
		   (background-color . "#000000")))
	    (code src\ src-ini
		  ((color . "#ffffff")
		   (background-color . "#000000")))
	    (code src\ src-json
		  ((color . "#ffffff")
		   (background-color . "#000000")))
	    (code src\ src-makefile
		  ((color . "#ffffff")
		   (background-color . "#000000")))
	    (code src\ src-man
		  ((color . "#ffffff")
		   (background-color . "#000000")))
	    (code src\ src-org
		  ((color . "#ffffff")
		   (background-color . "#000000")))
	    (code src\ src-plantuml
		  ((color . "#ffffff")
		   (background-color . "#000000")))
	    (code src\ src-python
		  ((color . "#ffffff")
		   (background-color . "#000000")))
	    (code src\ src-sh
		  ((color . "#ffffff")
		   (background-color . "#000000")))
	    (code src\ src-xml
		  ((color . "#ffffff")
		   (background-color . "#000000")))
	    (nil linenr
		 ((padding-right . "1em")
		  (color . "black")
		  (background-color . "#aaaaaa")))
	    (pre nil
		 ((line-height . "12pt")
		  (color . "#ffffff")
		  (background-color . "#000000")
		  (margin . "0px")
		  (font-size . "9pt")
		  (font-family . "monospace")))
	    (div org-src-container
		 ((margin-top . "10px")))
	    (nil figure-number
		 (,@font
		  (color . "#0071c5")
		  (font-weight . "bold")
		  (text-align . "left")))
	    (nil table-number)
	    (caption nil
		     ((text-align . "left")
		      (background . "#0071c5")
		      (color . "white")
		      (font-weight . "bold")))
	    (nil t-above
		 ((caption-side . "top")))
	    (nil t-bottom
		 ((caption-side . "bottom")))
	    (nil listing-number
		 (,@font
		  (color . "#0071c5")
		  (font-weight . "bold")
		  (text-align . "left")))
	    (nil figure
		 (,@font
		  ,color
		  (font-weight . "bold")
		  (text-align . "left")))
	    (nil org-src-name
		 (,@font
		  ,color
		  (font-weight . "bold")
		  (text-align . "left")))
	    (table nil
		   (,@font
		    (margin-top . "0px")
		    (line-height . "10pt")
		    (border-collapse . "collapse")))
	    (th nil
		((border . "1px solid white")
		 (background-color . "#0071c5")
		 (color . "white")
		 (padding-left . "10px")
		 (padding-right . "10px")))
	    (td nil
		(,@font
		 (margin-top . "0px")
		 (padding-left . "0px")
		 (padding-right . "20px")
		 (border . "1px solid white")))
	    (td org-left
		((text-align . "left")))
	    (td org-right
		((text-align . "right")))
	    (td org-center
		((text-align . "center")))
	    (div outline-text-4
		 ((margin-left . "15px")))
	    (div outline-4
		 ((margin-left . "10px")))
	    (h4 nil
		((margin-bottom . "0px")
		 (font-size . "11pt")
		 ,font-family))
	    (h3 nil
		((margin-bottom . "15px")
		 ;; (text-decoration . "underline")
		 (font-size . "12pt")
		 ,font-family
		 ,color))
	    (h2 nil
		((margin-top . "20px")
		 (margin-bottom . "20px")
		 ;; (font-style . "italic")
		 ,color
		 (font-size . "13pt")
		 ,font-family))
	    (h1 nil
		((margin-top . "20px")
		 (margin-bottom . "20px")
		 (font-size . "16pt")
		 ("border-bottom" . "1px solid lighten(#304860, 30%)")
		 ,font-family
		 ,color))
	    (span tag ((background-color . "eee")
		       (font-family . "monospace")
		       (padding . "2px")
		       (font-size . "80%")
		       (font-weight . "normal")))
	    (p nil
               ((text-decoration . "none")
		(margin-bottom . "0px")
		(margin-top . "10px")
		(line-height . "18pt")
		(font-size . "10pt")
		,font-family))
	    (div nil
		 (,@font
		  (line-height . "18pt"))))))
  (org-msg-mode))

(use-package org-mime
  :defer t
  :ensure t
  :after org
  :commands (org-mime-htmlize org-mime-edit-mail-in-org-mode))
#+end_src

* macOS package

** osx-trash

#+begin_src emacs-lisp
(use-package osx-trash
  :commands osx-trash-move-file-to-trash
  :init
  ;; Delete files to trash on macOS, as an extra layer of precaution against
  ;; accidentally deleting wanted files.
  (setq delete-by-moving-to-trash t)

  ;; Lazy load `osx-trash'
  (and IS-MAC
       (not (fboundp 'system-move-file-to-trash))
       (defalias #'system-move-file-to-trash #'osx-trash-move-file-to-trash)))
#+end_src

* Writing

Configuration for writing with Emacs, specifically for Markdown and Org mode.

 pdf-tools - Emacs support library for PDF files.

 https://github.com/politza/pdf-tools
http://pragmaticemacs.com/emacs/view-and-annotate-pdfs-in-emacs-with-pdf-tools/

#+begin_src emacs-lisp :tangle no
(use-package pdf-tools
  :defer t
  :config
  ;; initialize
  (setenv "PKG_CONFIG_PATH" "/opt/local/lib/pkgconfig:/opt/X11/lib/pkgconfig")

  (pdf-tools-install)

  ;; open pdfs scaled to fit page
  (setq-default pdf-view-display-size 'fit-page)

  ;; automatically annotate highlights
  (setq pdf-annot-activate-created-annotations t)

  ;; enable imenu outline
  (pdf-outline-imenu-enable)

  ;; use normal isearch
  (define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward)
  )

;; repo archived
;; (use-package pdf-continuous-scroll-mode
;;   :defer t
;;   :disabled
;;   :vc (:url "https://github.com/dalanicolai/pdf-continuous-scroll-mode.el" :branch "master" :rev :newest)
;;   :after pdf-tools
;;   :config
;;   (add-hook 'pdf-view-mode-hook 'pdf-continuous-scroll-mode))

;; remember pdf position
;; https://github.com/politza/pdf-tools/issues/18
;; Save place in pdf-view buffers for Emacs
;; https://github.com/nicolaisingh/saveplace-pdf-view
(use-package saveplace-pdf-view
  :after pdf-tools
  :defer t
  :config
  (save-place-mode 1))

(use-package mixed-pitch
  :hook
  (text-mode . mixed-pitch-mode))

(use-package org-analyzer
  :after org
  :custom
  (org-analyzer-org-directory org-beorg-directory))

;; devonthink
(use-package org-devonthink
  :vc (:url "https://github.com/lasvice/org-devonthink" :branch "master" :rev :newest))
#+end_src

*** open with vscode

#+begin_src emacs-lisp
(defun poly/open-in-vscode (&optional arg)
  "Open current file or dir in vscode.

URL `http://xahlee.info/emacs/emacs/emacs_dired_open_file_in_ext_apps.html'
Version: 2020-02-13 2021-01-18 2022-08-04"
  ;; (interactive)
  (interactive "P")
  (let* ((file-directory (expand-file-name default-directory))
	 (project-root-directory
	  (if (fboundp 'project-root)
	      (project-root (project-current t)) file-directory))
	 (file-path (if buffer-file-name buffer-file-name file-directory))
	 (xpath (if arg file-path project-root-directory))
	 (line (line-number-at-pos))
	 (character (max 0 (- (point) (line-beginning-position))))
	 (shell-cmd-str))
    (message "path is %s" xpath)
    (cond
     ((string-equal system-type "darwin")
      ;; VSCODE_CWD="$PWD" open -n -b "com.microsoft.VSCode" --args $*
      (setq shell-cmd-str (format "VSCODE_CWD=\"%s\" open -n -b \"com.microsoft.VSCode\" %s"
				  (shell-quote-argument project-root-directory)
				  (if buffer-file-name
				      (format "--args -g %s:%d:%d %s"
					      (shell-quote-argument buffer-file-name)
					      line
					      (1+ character)
					      (shell-quote-argument project-root-directory)) "")))
      ;; (message shell-cmd-str)
      (shell-command shell-cmd-str))
     ((string-equal system-type "windows-nt")
      (shell-command (format "code.cmd %s" (shell-quote-argument xpath))))
     ((string-equal system-type "gnu/linux")
      (shell-command (format "code %s" (shell-quote-argument xpath)))))))
#+end_src


*** open with tower

#+begin_src emacs-lisp
(defun poly/open-with-tower (&optional arg)
  "Open current file or dir in vscode.

URL `http://xahlee.info/emacs/emacs/emacs_dired_open_file_in_ext_apps.html'
Version: 2020-02-13 2021-01-18 2022-08-04"
  ;; (interactive)
  (interactive "P")
  (let* ((file-directory (expand-file-name default-directory))
	 (project-root-directory
	  (if (fboundp 'project-root)
	      (project-root (project-current t)) file-directory))
	 (file-path (if buffer-file-name buffer-file-name file-directory))
	 (xpath (if arg file-path project-root-directory))
	 (line (line-number-at-pos))
	 (character (max 0 (- (point) (line-beginning-position))))
	 (shell-cmd-str))
    (if (poly/git-repo? project-root-directory)
	(cond
	 ((string-equal system-type "darwin")
	  ;; VSCODE_CWD="$PWD" open -n -b "com.microsoft.VSCode" --args $*
	  ;; PWD=\"%s\"
	  (setq shell-cmd-str (format "open \"%s\" -b \"com.fournova.Tower3\""
				      (shell-quote-argument (expand-file-name project-root-directory))))
	  (message shell-cmd-str)
	  (shell-command shell-cmd-str))
	 (t (message "Unsupport system type %s" system-type))
	 ;; ((string-equal system-type "windows-nt")
	 ;;  (shell-command (format "code.cmd %s" (shell-quote-argument xpath))))
	 ;; ((string-equal system-type "gnu/linux")
	 ;;  (shell-command (format "code %s" (shell-quote-argument xpath))))
	 )
      (message "Not Git project."))))
#+end_src


*** buf generate


#+begin_src emacs-lisp
(defun poly/buf-generate ()
  "Do buf generate."
  (interactive)
  (let ((dir (poly/project-root)))
    (if dir
	(poly/run-shell-command-in-dir dir (list '("buf" "generate")))
      (message "Project directory is not exist!"))))
#+end_src

*** pair

https://github.com/kzinmr/dotfiles/blob/db2c1a2578cec94a134d9f9483c315945a52c3f7/.emacs.d/inits/programming.el#L68

#+begin_src emacs-lisp
;; paired input
(defvar poly/insert-bracket-pair-inhibit-modes-list
  '(scheme-mode
    ;; lisp-mode
    ;; emacs-lisp-mode
    clojure-mode cider-repl-mode
    eval-expression-minibuffer-setup
    lisp-interaction-mode
    ielm-mode
    slime-repl-mode)
  "Disable bracket pair in specific mode."
  )

(defun insert-bracket-pair (leftBracket rightBracket)
  (if (memq major-mode poly/insert-bracket-pair-inhibit-modes-list)
      (insert leftBracket)
    (if (region-active-p)
	(let ((p1 (region-beginning))
	      (p2 (region-end)))
	  (goto-char p2)
	  (insert rightBracket)
	  (goto-char p1)
	  (insert leftBracket)
	  (goto-char (+ p2 2)))
      (progn
	(insert leftBracket rightBracket)
	(backward-char 1)))))

(defun insert-pair-brace () (interactive) (insert-bracket-pair "{" "}"))
(defun insert-pair-paren () (interactive) (insert-bracket-pair "(" ")"))
(defun insert-pair-double-straight-quote () (interactive) (insert-bracket-pair "\"" "\""))
(defun insert-pair-single-straight-quote () (interactive) (insert-bracket-pair "'" "'"))
(defun insert-pair-bracket () (interactive) (insert-bracket-pair "[" "]") )
(defun insert-pair-angle-bracket () (interactive) (insert-bracket-pair "<" ">") )

(defun set-pair-key-map(mode-map)
  ;; set bracket pair in particular mode
  (define-key mode-map "{" 'insert-pair-brace)
  (define-key mode-map "(" 'insert-pair-paren)
  (define-key mode-map "\"" 'insert-pair-double-straight-quote)
  ;; (define-key global-map "'" 'insert-pair-single-straight-quote)
  (define-key mode-map "[" 'insert-pair-bracket)
  (define-key mode-map "<" 'insert-pair-angle-bracket))

;; set pair key map global
(set-pair-key-map global-map)
;; (with-eval-after-load 'go-ts-mode
;;   (set-pair-key-map go-ts-mode-map))

;; (with-eval-after-load 'python-ts-mode
;;   (set-pair-key-map python-ts-mode-map))
#+end_src


*** proxy

#+begin_src emacs-lisp :tangle no
(use-package proxy-mode
  :ensure t
  :custom ((proxy-mode-emacs-socks-proxy '("Default server" "127.0.0.1" 7891 5))
           (proxy-mode-emacs-http-proxy
            '(("http"  . "127.0.0.1:7890") ; Privoxy
              ("https" . "127.0.0.1:7890")
              ;; NOTE: don't use `localhost', avoid local server like robe no response
              ;; ("no_proxy" . "127.0.0.1")
              )))
  :commands (proxy-mode))

;;; [ use-proxy ] -- Easy way to enable/disable proxies in Emacs and Elisp.

(use-package use-proxy
  :ensure t
  :commands (use-proxy-mode
             use-proxy-toggle-proxies-global
             use-proxy-toggle-proto-proxy
             use-proxy-with-custom-proxies
             use-proxy-with-specified-proxies)
  :custom ((use-proxy-http-proxy "localhost:7890")
           (use-proxy-https-proxy "localhost:7890")
           (use-proxy-no-proxy (regexp-opt '("localhost" "baidu.com")))))
#+end_src

*** help emacs-devel collect gc stats

#+begin_src emacs-lisp :tangle no
(use-package emacs-gc-stats
  :vc (emacs-gc-stats :url "https://git.sr.ht/~yantar92/emacs-gc-stats" :branch "main" :rev :newest)
  :config
  (setq emacs-gc-stats-gc-defaults 'emacs-defaults)
  (emacs-gc-stats-mode +1))
#+end_src

*** restclient

#+begin_src emacs-lisp
(use-package restclient
  :mode ("\\.http\\'" . restclient-mode)
  :config
  (use-package restclient-test
    :diminish
    :hook (restclient-mode . restclient-test-mode)))
#+end_src

*** dash-doc

#+begin_src emacs-lisp
(use-package dumb-jump
  :commands dumb-jump-result-follow
  :config
  (add-hook 'xref-backend-functions #'dumb-jump-xref-activate))

(use-package dash-docs
  :config
  (setq dash-docs-docsets-path (expand-file-name "Library/Application Support/Zeal/Zeal/docsets" "~"))
  ;; (setq dash-docs-browser-func 'eww)
  (setq dash-docs-browser-func 'poly/docs-browse-url))

(use-package counsel-dash
  :commands (counsel-dash counsel-dash-at-point counsel-dash-install-docset)
  :custom
  (counsel-dash-docsets-url "https://raw.github.com/Kapeli/feeds/master")
  (counsel-dash-min-length 3)
  (counsel-dash-candidate-format "%d %n (%t)")
  (counsel-dash-browser-func 'poly/docs-browse-url)
  ;; (counsel-dash-browser-func 'browse-url)
  (counsel-dash-ignored-docsets nil)
  (dash-docs-common-docsets '("Django"  "Go" "Flask" "NumPy" "Pandas" "Scala" "Rust" "Python 3" "Java_SE17"))
  :init
  (add-hook 'emacs-lisp-mode-hook (lambda () (setq-local counsel-dash-docsets '("Emacs_Lisp"))))
  (add-hook 'scala-mode-hook (lambda () (setq-local counsel-dash-docsets '("Scala" "Akka" "Play_Scala" "Java"))))
  (add-hook 'java-ts-mode-hook (lambda () (setq-local counsel-dash-docsets '("Java_SE17" "Play_Java"))))
  (add-hook 'rust-mode-hook (lambda () (setq-local counsel-dash-docsets '("Rust"))))
  (add-hook 'rustic-mode-hook (lambda () (setq-local counsel-dash-docsets '("Rust"))))
  (add-hook 'rustic-ts-mode-hook (lambda () (setq-local counsel-dash-docsets '("Rust"))))
  (add-hook 'clojure-mode-hook (lambda () (setq-local counsel-dash-docsets '("Clojure"))))
  (add-hook 'haskell-mode-hook (lambda () (setq-local counsel-dash-docsets '("Haskell"))))
  (add-hook 'sh-mode-hook (lambda () (setq-local counsel-dash-docsets '("Bash"))))
  (add-hook 'c-mode-hook (lambda () (setq-local counsel-dash-docsets '("C"))))
  (add-hook 'c++-mode-hook (lambda () (setq-local counsel-dash-docsets '("C++"))))
  (add-hook 'js2-mode-hook (lambda () (setq-local counsel-dash-docsets '("JavaScript"))))
  (add-hook 'js-mode-hook (lambda () (setq-local counsel-dash-docsets '("JavaScript"))))
  (add-hook 'go-mode-hook (lambda () (setq-local counsel-dash-docsets '("Go"))))
  (add-hook 'go-ts-mode-hook (lambda () (setq-local counsel-dash-docsets '("Go"))))
  (add-hook 'lua-mode-hook (lambda () (setq-local counsel-dash-docsets '("Lua_5.4"))))
  (add-hook 'html-mode-hook (lambda () (setq-local counsel-dash-docsets '("HTML" "Javascript"))))
  (add-hook 'python-mode-hook (lambda () (setq-local counsel-dash-docsets '("python_3"))))
  (add-hook 'python-ts-mode-hook (lambda () (setq-local counsel-dash-docsets '("python_3"))))
  :config
  (setq counsel-dash-docsets-path (expand-file-name "Library/Application Support/Zeal/Zeal/docsets" "~"))
  (setq counsel-dash-enable-debugging nil)
  :bind
  ( ("M-s-l" . counsel-dash)
   ("C-c C-d d" . counsel-dash-at-point)
   ("M-s-." . counsel-dash-at-point)
   ("M-g d" . counsel-dash-at-point)
   ("M-g D" . counsel-dash)))

(defun poly/docs-browse-url (url &optional _new-window)
  (set-process-sentinel
   (start-process "docs-brower" "*docs brower*" "osascript" "-e"  (format "tell application \"Safari\"\n activate\n open location \"%s\"\n end tell" url) ;; (format "tell application \"Firefox\"\n activate\n open location \"%s\"\n end tell" url)
		  )
   (lambda (proc _)
     (let ((status (process-exit-status proc)))
       (if (= 0 status)
	   (message "Open docset success")
	 (message "Open docset failed")
	 )))))
#+end_src

** package-lint
#+begin_src emacs-lisp
(use-package package-lint
  :commands package-lint-current-buffer)
#+end_src

#+begin_src emacs-lisp :tangle no
(use-package replace-regexp-list
  :vc (:url "https://github.com/emacsattic/replace-regexp-list" :branch "master" :rev :newest))

(use-package text-to-html
  :vc (:url "https://github.com/emacsattic/text-to-html" :branch "master" :rev :newest))
#+end_src


** gif-screencast

#+begin_src emacs-lisp :tangle no
;; sudo port install gifsicle
(use-package gif-screencast
  :init
  (when IS-MAC
    (setq gif-screencast-args '("-x")
          gif-screencast-cropping-program "mogrify"
          gif-screencast-capture-format "ppm"
          ;; gif-screencast-output-directory "~/Downloads"
          )
    (let ((tmp (expand-file-name "~/Documents/gif-screencast")))
      (setq gif-screencast-screenshot-directory (concat tmp "/sceenshot")
            gif-screencast-output-directory  tmp)))
  :config
  (advice-add
   #'gif-screencast--cropping-region
   :around
   (lambda (oldfun &rest r)
     (apply #'format "%dx%d+%d+%d"
            (mapcar
             (lambda (x) (* 2 (string-to-number x)))
             (split-string (apply oldfun r) "[+x]")))))
  :bind
  ( :map gif-screencast-mode-map
    ("<f8>". gif-screencast-toggle-pause)
    ("<f9>". gif-screencast-stop)))
#+end_src


** keycast

#+begin_src emacs-lisp :tangle no
(use-package keycast
  ;; :bind ("C-c t k" . +toggle-keycast)
  :config
  (setq keycast-mode-line-insert-after '(:eval (doom-modeline-format--main)))
  (add-to-list 'global-mode-string '("" keycast-mode-line))
  :hook
  (doom-modeline-mode . keycast-mode-line-mode)
  ;; (defun +toggle-keycast()
  ;;    (interactive)
  ;;    (if (member '("" mode-line-keycast " ") global-mode-string)
  ;;        (progn (setq global-mode-string (delete '("" mode-line-keycast " ") global-mode-string))
  ;;               (remove-hook 'pre-command-hook 'keycast--update)
  ;;               (message "Keycast disabled"))
  ;;      (add-to-list 'global-mode-string '("" mode-line-keycast " "))
  ;;      (add-hook 'pre-command-hook 'keycast--update t)
  ;;      (message "Keycast enabled")))
  )
#+end_src

** beancount

#+begin_src emacs-lisp :tangle no
(use-package beancount
:vc (:url "https://github.com/beancount/beancount-mode" :branch "main" :rev :newest)
  ;; :mode "\\.bean\\'"
    :mode (;; ("CMakeLists\\.txt\\'" . cmake-mode)
         ("\\.bean\\'" . beancount-mode))
  :init
  (add-hook 'beancount-mode-hook #'outline-minor-mode)
  :custom
  (beancount-use-ido nil))

;; (rx-define dgc/date (seq (= 4 digit) "-" (= 2 digit) "-" (= 2 digit)))
;; (rx-define dgc/quoted (seq "\"" (+ (or "\\\"" (not "\""))) "\""))

;; (defun dgc/beancount-find-trans (term)
;;   "Find all matching transactions"
;;   (interactive "MPattern: ")
;;   (let ((regex (rx bol dgc/date (+ blank) "*" (+ blank) (* nonl) (literal term) (* nonl) "\n"
;;                    (+ (seq (+ blank) (* nonl) "\n")))))
;;     (occur regex)))
#+end_src

** kdl-mode

#+begin_src emacs-lisp :tangle no
(use-package kdl-ts-mode
  :vc (:url "https://github.com/dataphract/kdl-ts-mode" :branch "main" :rev :newest)
  :mode (("\\.kdl\\'" . kdl-ts-mode)))

(use-package kdl-mode
  :vc (:url "https://github.com/bobuk/kdl-mode" :branch "main" :rev :newest)
  :mode (("\\.kdl\\'" . kdl-mode)))
#+end_src

* Network settings

#+begin_src emacs-lisp
(defvar poly-http-proxy-host "localhost")
(defvar poly-http-proxy-port 6153)
;; (defvar poly-socks5-proxy-host "localhost")
;; (defvar poly-socks5-proxy-port 6152)

;; (setq url-proxy-services
;;       `(("http" . ,(format "%s:%s" poly-http-proxy-host  poly-http-proxy-port))
;;         ("https" . ,(format "%s:%s" poly-http-proxy-host poly-http-proxy-port))
;;        ("no_proxy" . "\\(localhost\\)")))
#+end_src


** spell check

#+begin_src emacs-lisp :tangle no
(use-package jinx
  :hook ((emacs-startup . global-jinx-mode)
	 (markdown-ts-mode . jinx-mode))
  :delight
  :config
  ;; To excludes CJK characters
  ;; See issue https://github.com/minad/jinx/issues/4
  ;; This is the syntax table approach. It changes CJK characters from "w" (
  ;; word constituent) to "_" (symbol constituent). You can use `describe-char'
  ;; to view a characters' specific syntax category (from major mode syntax table).
  ;; Emacs 29 supports Unicode 15, the code charts of which can be found at
  ;; http://www.unicode.org/charts/ (use mouse hover to show the specific range)
  (let ((st jinx--base-syntax-table))  ; this code block actually adds 0.14s to my Emacs startup time...
    (modify-syntax-entry '(#x4E00 . #x9FFF) "_" st)   ; CJK Unified Ideographs
    (modify-syntax-entry '(#x3400 . #x4DBF) "_" st)   ; CJK Unified Ideographs Extension A
    (modify-syntax-entry '(#x20000 . #x2A6DF) "_" st) ; CJK Unified Ideographs Extension B
    (modify-syntax-entry '(#x2A700 . #x2B73F) "_" st) ; CJK Unified Ideographs Extension C
    (modify-syntax-entry '(#x2B740 . #x2B81F) "_" st) ; CJK Unified Ideographs Extension D
    (modify-syntax-entry '(#x2B820 . #x2CEAF) "_" st) ; CJK Unified Ideographs Extension E
    (modify-syntax-entry '(#x2CEB0 . #x2EBEF) "_" st) ; CJK Unified Ideographs Extension F
    (modify-syntax-entry '(#x30000 . #x3134F) "_" st) ; CJK Unified Ideographs Extension G
    (modify-syntax-entry '(#x31350 . #x323AF) "_" st) ; CJK Unified Ideographs Extension H
    (modify-syntax-entry '(#x2EBF0 . #x2EE5F) "_" st) ; CJK Unified Ideographs Extension I
    )

  (add-to-list
   'jinx-exclude-faces
   '(typst-ts-mode
     ;; not included font lock faces
     ;; `font-lock-comment-face', `font-lock-string-face', `font-lock-doc-face'
     ;; `font-lock-doc-markup-face'
     font-lock-warning-face font-lock-function-name-face font-lock-function-call-face
     font-lock-variable-name-face font-lock-variable-use-face font-lock-keyword-face
     font-lock-comment-delimiter-face font-lock-type-face font-lock-constant-face
     font-lock-builtin-face font-lock-preprocessor-face
     font-lock-negation-char-face font-lock-escape-face font-lock-number-face
     font-lock-operator-face font-lock-property-use-face font-lock-punctuation-face
     font-lock-bracket-face font-lock-delimiter-face font-lock-misc-punctuation-face
     ;; typst-ts-mode created faces
     typst-ts-markup-item-indicator-face typst-ts-markup-term-indicator-face
     typst-ts-markup-rawspan-indicator-face typst-ts-markup-rawspan-blob-face
     typst-ts-markup-rawblock-indicator-face typst-ts-markup-rawblock-lang-face
     typst-ts-markup-rawblock-blob-face
     typst-ts-error-face typst-ts-shorthand-face typst-ts-markup-linebreak-face
     typst-ts-markup-quote-face typst-ts-markup-url-face typst-ts-math-indicator-face))
  :bind (("M-$" . jinx-correct)
         ("C-M-$" . jinx-languages)))
#+end_src


#+begin_src emacs-lisp :tangle no
(use-package buffer-name-relative
  :vc (buffer-name-relative :url "https://codeberg.org/ideasman42/emacs-buffer-name-relative" :branch "main" :rev :newest)
  :hook (after-init . buffer-name-relative-mode)
  :config
  (setq buffer-name-relative-prefix '("" . "/")))
#+end_src


** safari tab jump

https://gist.github.com/bunnylushington/e4b8ca6cdec28aa5eccf2875ac1f3518

#+begin_src emacs-lisp :tangle no
(defun ii/safari-retrieve-open-tabs ()
  "Use applescript to retrieve string representing open safari tabs."
  (do-applescript "
      tell application \"Safari\"
      	set windowList to windows
      	set tabList to {}
      	repeat with aWindow in windowList
      		set tabList to tabList & (tabs of aWindow)
      	end repeat
      	set output to \"\"
      	repeat with aTab in tabList
      		set tabTitle to name of aTab
      		set tabURL to URL of aTab
      		set output to output & tabTitle & \"::-::\" & tabURL & \"
      \"
      	end repeat
      end tell
      return output"))

(defun ii/safari-tab-format (tab)
  "Format safari tab from applescript for display"
  (let ((title (car tab))
        (url (cadr tab)))
    (format "%s    [%s]" title url)))

(defun ii/safari-open-tab-completion ()
  "Completion list for `ii/safari-jump-to-tab'"
  (let* ((output (ii/safari-retrieve-open-tabs))
         (tabs (mapcar (lambda (s) (s-split "::-::" s))
                       (s-split "\n" output)))
         (tablist (-zip (mapcar #'ii/safari-tab-format tabs)
                        (mapcar #'cadr tabs))))
    tablist))

(defun ii/safari-jump-to-tab (&optional make-active)
  "Foreground an existing Safari tab, focus with prefix arg."
  (interactive "p")
  (let* ((completions (ii/safari-open-tab-completion))
         (choice (completing-read "Tab: " completions))
         (tab-url (cdr (assoc choice completions))))
    (message "Opening Safari Tab: %s" choice)
    (ii/safari-foreground-tab tab-url make-active)))

(defun ii/safari-foreground-tab (url make-active)
  "Run the applescript to foreground a Safari tab."
  (do-applescript (format "
      tell application \"Safari\"
          set windowList to windows
          repeat with aWindow in windowList
              set tabList to tabs of aWindow
              repeat with aTab in tabList
                  if (URL of aTab) is \"%s\" then
                      set index of aWindow to 1
                      set current tab of aWindow to aTab
                      return
                  end if
              end repeat
          end repeat
      end tell
      " url))
  (if (> make-active 1)
      (do-applescript "
    tell application \"System Events\" to tell application process \"Safari\"
        set frontmost to true
    end tell")))

(keymap-global-set "C-c t" #'ii/safari-jump-to-tab)
#+end_src
