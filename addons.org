#+title: Addons

Configuration for addons, additional features provided by individual packages.

#+begin_src emacs-lisp
  ;;; -*- lexical-binding: t -*-
#+end_src

* Line numbers with display-line-numbers-mode

#+begin_src emacs-lisp

(defun should-use-minimum-resource ()
  (and buffer-file-name
       (string-match-p "\.\\(mock\\|min\\)\.js" buffer-file-name)))

;; http://stackoverflow.com/questions/3875213/turning-on-linum-mode-when-in-python-c-mode
(setq linum-mode-inhibit-modes-list
      '(eshell-mode
	shell-mode
	profiler-report-mode
	ffip-diff-mode
	dictionary-mode
	erc-mode
	dired-mode
	help-mode
	text-mode
	fundamental-mode
	jabber-roster-mode
	jabber-chat-mode
	inferior-js-mode
	inferior-python-mode
	ivy-occur-grep-mode ; better performance
	ivy-occur-mode ; better performance
	twittering-mode
	compilation-mode
	weibo-timeline-mode
	woman-mode
	Info-mode
	calc-mode
	calc-trail-mode
	comint-mode
	gnus-group-mode
	gud-mode
	;; org-mode
	markdown-mode
	vc-git-log-edit-mode
	log-edit-mode
	vterm-mode
	term-mode
	w3m-mode
	speedbar-mode
	mu4e-main-mode
	mu4e-headers-mode
	mu4e-view-mode
	mu4e-compose-mode
	gnus-summary-mode
	mu4e-article-mode
	gnus-article-mode
	notmuch-show-mode
	notmuch-hello-mode
	notmuch-search-mode
	company-mode
	magit-status-mode
	messages-buffer-mode
	calendar-mode
	treemacs-mode
	telega-chat-mode
	telega-root-mode))

(cond
 ;; ((fbounp 'linum-mode))
 (;; nil
  (fboundp 'global-display-line-numbers-mode)
  (defun display-line-numbers-mode-hook-setup ()
    (setq display-line-numbers (if (or (memq major-mode linum-mode-inhibit-modes-list)
				       ;; don't show line number for certain file extensions
				       (should-use-minimum-resource))
				   nil
				 t)))
  (add-hook 'display-line-numbers-mode-hook 'display-line-numbers-mode-hook-setup)
  (global-display-line-numbers-mode t))
 (t
  ;; (global-linum-mode t)

  (defadvice linum-on (around linum-on-inhibit-for-modes)
    "Stop the load of linum-mode for some major modes."
    (unless (member major-mode linum-mode-inhibit-modes-list)
      ad-do-it))
  (ad-activate 'linum-on)

  ;; update line number every second so `linum-mode' won't slow down Emacs
  ;; @see https://lists.gnu.org/archive/html/bug-gnu-emacs/2013-04/msg00577.html
  ;; package like `nlinum-mode' has better performance but `git-gutter' is dependent
  ;; on `linum-mode'.
  ;; So we have to use `linum-mode'.
  (setq linum-delay t)
  (defadvice linum-schedule (around my-linum-schedule () activate)
    (run-with-idle-timer 2 nil #'linum-update-current))))
#+end_src


* completion

** selectrum

#+begin_src emacs-lisp :tangle no
(use-package selectrum
  :disabled t
  :straight t
  :hook (after-init . selectrum-mode)
  :custom
  (selectrum-fix-vertical-window-height t)
  (selectrum-extend-current-candidate-highlight t)
  (selectrum-count-style 'current/matches)
  (selectrum-highlight-candidates-function #'orderless-highlight-matches)
  (selectrum-refine-candidates-function #'orderless-filter)
  ;; (selectrum-num-candidates-displayed 15)
  (selectrum-max-window-height 15)
  :config
  (selectrum-mode t)
  :bind (;; ([remap yank-pop] . my/selectrum-yank-kill-ring)
	 :map selectrum-minibuffer-map
	 ;; ("DEL" . selectrum-backward-kill-sexp)
	 ("<S-backspace>" . selectrum-backward-kill-sexp)
	 ("<down>" . selectrum-next-candidate)
	 ("C-j"  .  selectrum-next-candidate)
	 ("<up>" .  selectrum-previous-candidate)
	 ("C-k"  .  selectrum-previous-candidate)
	 ("<backtab>" . selectrum-previous-candidate)))
#+end_src

** marginalia

#+begin_src emacs-lisp
  (use-package marginalia
    ;; :disabled t
    :straight t
    ;; :after selectrum
    :ensure t
    :demand t
    :defer 1
    :custom
    (marginalia-annotators '(marginalia-annotators-heavy
			     marginalia-annotators-light))
    :init
    (setq marginalia-command-categories
	  '((imenu . imenu)
	    (projectile-find-file . project-file)
	    ;; (projectile-find-file . project)
	    (projectile-find-dir . project-file)
	    ;; (projectile-find-dir . project)
	    ;; (projectile-switch-project . project)
	    (projectile-switch-project . file)
	    (projectile-switch-open-project . file)
	    (projectile-recentf . project-file)
	    (projectile-display-buffer . project-buffer)
	    (projectile-switch-to-buffer . project-buffer)
	    ;; (projectile-commander . project)
	    ))
    :bind (;; ("M-A" . marginalia-cycle)
	   :map minibuffer-local-map
	   ("M-A" . marginalia-cycle))
    :config
    (marginalia-mode)

    ;; Display more annotations - e.g. docstring with M-x
    (setq marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))

    ;; ;; When using Selectrum, ensure that Selectrum is refreshed when cycling annotations.
    ;; (advice-add #'marginalia-cycle :after
    ;; 	       (lambda () (when (bound-and-true-p selectrum-mode) (selectrum-exhibit))))
    )

  ;; -----------------------------------------------------------------------------
  ;; Marginalia doesn't remember the this-command when switching projects using
  ;; projectile, since it uses multiple minibuffers. In order to classify project
  ;; completions properly, we keep track of when we're in the process of switching
  ;; projects and make sure to return the correct category

  (defvar c/switching-project? nil)
  (defun c/projectile-before-switch-project ()
    (setq c/switching-project? t))
  (defun c/projectile-after-switch-project ()
    (setq c/switching-project? nil))

  (after-load (projectile marginalia)
    (add-hook 'projectile-before-switch-project-hook #'c/projectile-before-switch-project)
    (add-hook 'projectile-after-switch-project-hook #'c/projectile-after-switch-project)

    (advice-add 'marginalia-classify-by-prompt :around
		(lambda (orig-fun &rest args)
		  (if c/switching-project?
		      'project
		    (apply orig-fun args)))))
#+end_src

** all-the-icons-completion

#+begin_src emacs-lisp
(use-package all-the-icons-completion
  :straight t
  :after marginalia
  :commands all-the-icons-completion-marginalia-setup
  :hook (marginalia-mode . all-the-icons-completion-marginalia-setup)
  :init
  (all-the-icons-completion-mode))
#+end_src

** Orderless

This is a completion style, it's a back-end for completion and is used by a  front-end that provides a completion UI.

#+begin_src emacs-lisp :tangle no
(use-package orderless
  :straight t
  :after selectrum
  :config
  (setq completion-styles '(orderless))
  (setq orderless-skip-highlighting (lambda () selectrum-is-active))
  (defun my/match-components-literally ()
    "Components match literally for the rest of the session."
    (interactive)
    (setq-local
     orderless-matching-styles '(orderless-literal)
     completion-styles '(orderless)
     ;; orderless-matching-styles '(orderless-strict-initialism)
     orderless-style-dispatchers nil))
  :bind
  (:map minibuffer-local-completion-map
	("C-l" . my/match-components-literally))
  )

;; (use-package orderless
;;   :straight t
;;   :ensure t
;;   :after icomplete
;;   :custom
;;   (orderless-component-separator " +")
;;   (orderless-matching-styles
;;    '(;; The characters of the component should appear in that order in the
;;      ;; candidate, but not necessarily consecutively. This maps 'abc' to
;;      ;; 'a.*b.*c'.
;;      orderless-flex
;;      ;; orderless-initialism = each character of the component should
;;      ;; appear as the beginning of a word in the candidate, in order. This
;;      ;; maps 'abc' to '\<a.*\<b.*\c'.
;;      ;; orderless-strict-initialism = like initialism but only allow
;;      ;; non-letters in between the matched words. 'fb' would match
;;      ;; 'foo-bar' but not 'foo-qux-bar'.
;;      ;; orderless-strict-leading-initialism = like strict-initialism but
;;      ;; require the first initial to match the candidate’s first word. 'bb'
;;      ;; would match 'bar-baz' but not 'foo-bar-baz'.
;;      ;; orderless-strict-full-initialism = like strict-initialism but
;;      ;; require the first initial to match the candidate’s first word. 'bb'
;;      ;; would match 'bar-baz' but not 'foo-bar-baz'.
;;      orderless-strict-leading-initialism
;;      ;; The component is treated as a regexp that must match somewhere in
;;      ;; the candidate.
;;      orderless-regexp
;;      ;; The component is split at word endings and each piece must match at
;;      ;; a word boundary in the candidate, occurring in that order.
;;      orderless-prefixes
;;      ;; The component is treated as a literal string that must occur in the
;;      ;; candidate.
;;      orderless-literal))
;;   (orderless-skip-highlighting (lambda () selectrum-is-active))
;;   :config
;;   (defun my/match-components-literally ()
;;     "Components match literally for the rest of the session."
;;     (interactive)
;;     (setq-local
;;      orderless-matching-styles '(orderless-literal)
;;      completion-styles '(orderless)
;;      ;; orderless-matching-styles '(orderless-strict-initialism)
;;      orderless-style-dispatchers nil))
;;   :bind
;;   (:map minibuffer-local-completion-map
;;	("C-l" . my/match-components-literally)))

;; ;; '=' at the end of a component will make this component match as a literal.
;; (defun my/orderless-literal-dispatcher (pattern _index _total)
;;   (when (string-suffix-p "=" pattern)
;;     `(orderless-literal . ,(substring pattern 0 -1))))

;; ;; ',' at the end of a component will make this component match as a strict
;; ;; leading initialism.
;; (defun my/orderless-initialism-dispatcher (pattern _index _total)
;;   (when (string-suffix-p "," pattern)
;;     `(orderless-strict-leading-initialism . ,(substring pattern 0 -1))))

;; (setq orderless-style-dispatchers
;;       '(my/orderless-literal-dispatcher
;;         my/orderless-initialism-dispatcher))
#+end_src

** selectrum-prescient

#+begin_src  emacs-lisp :tangle no
(use-package selectrum-prescient
  :straight t
  :after selectrum
  :config
  (selectrum-prescient-mode t)
  (prescient-persist-mode))
#+end_src

** Consult without consultation fees

#+begin_src emacs-lisp :tangle no
(use-package consult
  :disabled t
  :straight t
  :ensure t
  :demand t
  :after selectrum
  :defer 1
  :custom
  (consult-preview-key nil)
  (consult-project-root-function #'projectile-project-root)
  :hook
  (completion-list-mode . consult-preview-at-point-mode)
  :init (bind-key "TAB"
		  (lambda ()
		    (interactive)
		    (isearch-exit)
		    (consult-line isearch-string))
		  isearch-mode-map)
  :config
  (require 'consult)
  (require 'consult-imenu)
  (with-eval-after-load 'org
    (require 'consult-org))
  (declare-function consult--customize-set "consult")
  (progn
    (setq consult-project-root-function #'vc-root-dir)
    (consult-customize
     consult-ripgrep consult-grep
     consult-buffer consult-recent-file
     :preview-key (kbd "M-."))
    ;; Disable consult-buffer project-related capabilities as
    ;; they are very slow in TRAMP.
    (setq consult-buffer-sources
	  (delq 'consult--source-project-buffer
		(delq 'consult--source-project-file consult-buffer-sources)))

    (setq consult--source-hidden-buffer
	  (plist-put consult--source-hidden-buffer :narrow ?h)))

  (advice-add #'completing-read-multiple :override #'consult-completing-read-multiple)
  (advice-add #'multi-occur :override #'consult-multi-occur)
  (setq consult-narrow-key "<"
	consult-line-numbers-widen t)
  :bind (
	 ("M-s f" . consult-line)
	 ("M-g g" . consult-line)
	 ("M-g o" . consult-outline)
	 ("M-g i" . consult-imenu)
	 ("M-g r" . consult-ripgrep)
	 ("C-x C-r" . consult-recent-file)
	 ([remap apropos]  . consult-apropos)
	 ([remap bookmark-jump] . consult-bookmark)
	 ([remap goto-line]  . consult-goto-line)
	 ([remap imenu]         . consult-imenu)
	 ([remap recentf-open-files] . consult-recent-file)
	 ([remap yank-pop] . consult-yank-pop)
	 ([remap switch-to-buffer]          . consult-buffer)
	 ([remap switch-to-buffer-other-window] . consult-buffer-other-window)
	 ([remap switch-to-buffer-other-frame]  . consult-buffer-other-frame)
	 ([remap man]      . consult-man)
	 ;; ([remap yank-pop] . consult-yank-from-kill-ring)
	 ([remap switch-to-buffer] . consult-buffer)
	 ([remap goto-line] . consult-goto-line)))
#+end_src

#+begin_src emacs-lisp
(use-package deadgrep
  :ensure t
  :commands (deadgrep--read-search-term)
  :bind (("C-c s" . deadgrep)))
#+end_src

** vertico
#+begin_src emacs-lisp
(use-package vertico
  :straight (vertico
	     :files (:defaults "extensions/*")
	     :includes (vertico-buffer
			vertico-directory
			vertico-flat
			vertico-indexed
			vertico-mouse
			vertico-quick
			vertico-repeat
			vertico-reverse))
  ;; :straight t
  :init
  (vertico-mode)
  :custom
  ;; Different scroll margin
  (vertico-scroll-margin 0)

  ;; Show more candidates
  (vertico-count 12)

  ;; Grow and shrink the Vertico minibuffer
  (vertico-resize t)
  ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
  (vertico-cycle t)
  :bind
  (:map vertico-map
	;; ("DEL" . selectrum-backward-kill-sexp)
	;; ("<S-backspace>" . vertico-backward-kill-sexp)
	("<down>" . vertico-next)
	("C-j"  .  vertico-next)
	("<up>" .  vertico-previous)
	("C-k"  .  vertico-previous)
	("<backtab>" . vertico-previous)))

;; Configure directory extension.
(use-package vertico-directory
  :straight nil
  :after vertico
  :ensure nil
  ;; More convenient directory navigation commands
  :bind (:map vertico-map
	      ("RET" . vertico-directory-enter)
	      ("DEL" . vertico-directory-delete-char)
	      ("M-DEL" . vertico-directory-delete-word)
	      ("<S-backspace>" . vertico-directory-delete-word))
  ;; Tidy shadowed file names
  :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))


;; Optionally use the `orderless' completion style. See
;; `+orderless-dispatch' in the Consult wiki for an advanced Orderless style
;; dispatcher. Additionally enable `partial-completion' for file path
;; expansion. `partial-completion' is important for wildcard support.
;; Multiple files can be opened at once with `find-file' if you enter a
;; wildcard. You may also give the `initials' completion style a try.
(use-package orderless
  :straight t
  :init
  ;; Configure a custom style dispatcher (see the Consult wiki)
  ;; (setq orderless-style-dispatchers '(+orderless-dispatch)
  ;;       orderless-component-separator #'orderless-escapable-split-on-space)
  (setq completion-styles '(orderless basic) ;; basic
	completion-category-defaults nil
	completion-category-overrides '((file (styles partial-completion)))))

;; A few more useful configurations...
(use-package emacs
  :straight nil
  :init
  ;; Add prompt indicator to `completing-read-multiple'.
  ;; Alternatively try `consult-completing-read-multiple'.
  (defun crm-indicator (args)
    (cons (concat "[CRM] " (car args)) (cdr args)))
  (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
	'(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

  ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
  ;; Vertico commands are hidden in normal buffers.
  ;; (setq read-extended-command-predicate
  ;;       #'command-completion-default-include-p)

  ;; Enable recursive minibuffers
  (setq enable-recursive-minibuffers t))

(define-key vertico-map "?" #'minibuffer-completion-help)
(define-key vertico-map (kbd "M-RET") #'minibuffer-force-complete-and-exit)
(define-key vertico-map (kbd "M-TAB") #'minibuffer-complete)
#+end_src

** corfu

#+begin_src emacs-lisp
(use-package corfu
  :straight (:files (:defaults "extensions/*")
		    :includes (corfu-history))
  :bind (:map corfu-map
	      ;; ("TAB" . corfu-next)
	      ;; ("C-n" . corfu-next)
	      ;; ("<tab>" . corfu-next)
	      ;; ("S-TAB" . corfu-previous)
	      ;; ("C-p" . corfu-previous)
	      ;; ("<backtab>" . corfu-previous)
	      ("RET"     . corfu-insert)
	      ("<return>"  . corfu-insert)
	      ("<escape>" . corfu-quit)
	      ;; ("ESC"    . corfu-reset)
	      ;; ("SPC" . corfu-move-to-minibuffer)
	      ;; ("<space>" . corfu-move-to-minibuffer)
	      ;; ([remap completion-at-point] . corfu-next)
	      )
  :custom
  (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
  (corfu-auto t)                 ;; Enable auto completion
  (corfu-count 10) ;; Max # of candidates to show
  (corfu-commit-predicate nil)
  (corfu-auto-delay 0.5)
  (corfu-auto-prefix 2)
  (corfu-quit-at-boundary nil)
  (corfu-separator ?\s)          ;; Orderless field separator
  ;; (corfu-preview-current t)
  (corfu-preview-current 'insert)       ; First candidate as overlay. Insert on input if only one
  (corfu-quit-at-boundary 'separator)   ; Boundary: stay alive if separator inserted
  (corfu-quit-no-match 'separator)      ; No match: stay alive if separator inserted
  (corfu-preselect-first t)
  (corfu-on-exact-match nil)     ;; Configure handling of exact matches
  ;; (corfu-echo-documentation nil) ;; Disable documentation in the echo area
  (corfu-echo-documentation '(1.0 . 0.2))
  (corfu-min-width 30)
  ;; (corfu-min-width 99)
  ;; hide scroll-bar
  (corfu-bar-width 0)
  ;; (corfu-right-margin-width 0)
  (corfu-scroll-margin 5)        ;; Use scroll margin
  ;; :hook (after-init-hook . global-corfu-mode)
  :init
  (global-corfu-mode)
  :config
  (unbind-key (kbd "TAB") corfu-map)
  (unbind-key (kbd "<tab>") corfu-map))

;; Icon support
(use-package kind-icon
  :ensure t
  :straight t
  :after corfu
  :custom
  (kind-icon-default-face 'corfu-default)
  (kind-icon-use-icon t)
  (kind-icon-blend-background nil)
  (kind-icon-blend-frac 0.08)
  (svg-lib-icons-dir (expand-file-name "svg-lib" poly-cache-dir))
  :config
  (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter)
  (setq kind-icon-mapping
	'((array "a" :icon "code-brackets" :face font-lock-type-face)
	  (boolean "b" :icon "circle-half-full" :face font-lock-builtin-face)
	  (class "c" :icon "view-grid-plus-outline" :face font-lock-type-face)
	  (color "#" :icon "palette" :face success)
	  (constant "co" :icon "lock-remove-outline" :face font-lock-constant-face)
	  (constructor "cn" :icon "table-column-plus-after" :face font-lock-function-name-face)
	  (enum-member "em" :icon "format-list-checks" :face font-lock-builtin-face)
	  (enum "e" :icon "format-list-bulleted-square" :face font-lock-builtin-face)
	  (event "ev" :icon "lightning-bolt-outline" :face font-lock-warning-face)
	  (field "fd" :icon "application-braces-outline" :face font-lock-variable-name-face)
	  (file "f" :icon "file-document-outline" :face font-lock-string-face)
	  (folder "d" :icon "folder" :face font-lock-doc-face)
	  (interface "if" :icon "application-brackets-outline" :face font-lock-type-face)
	  (keyword "kw" :icon "key-variant" :face font-lock-keyword-face)
	  (macro "mc" :icon "lambda" :face font-lock-keyword-face)
	  (method "m" :icon "function-variant" :face font-lock-function-name-face)
	  (function "f" :icon "function" :face font-lock-function-name-face)
	  (module "{" :icon "file-code-outline" :face font-lock-preprocessor-face)
	  (numeric "nu" :icon "numeric" :face font-lock-builtin-face)
	  (operator "op" :icon "plus-minus" :face font-lock-comment-delimiter-face)
	  (param "pa" :icon "cog" :face default)
	  (property "pr" :icon "application-parentheses-outline" :face font-lock-variable-name-face)
	  (reference "rf" :icon "variable-box" :face font-lock-variable-name-face)
	  (snippet "S" :icon "note-text-outline" :face font-lock-string-face)
	  (string "s" :icon "sticker-text-outline" :face font-lock-string-face)
	  (struct "%" :icon "code-braces" :face font-lock-variable-name-face)
	  (text "tx" :icon "script-text-outline" :face shadow)
	  (type-parameter "tp" :icon "format-list-bulleted-type" :face font-lock-type-face)
	  (unit "u" :icon "ruler-square" :face shadow)
	  (value "v" :icon "plus-circle-outline" :face font-lock-builtin-face)
	  (variable "va" :icon "variable" :face font-lock-variable-name-face)
	  (tabnine "tn" :icon "cloud" :face tabnine-face) ;; tabnine
	  (t "." :icon "crosshairs-question" :face shadow)))
  )

;; A few more useful configurations...
(use-package emacs
  :custom
  ;; Resize the compilation window so that it doesn't take up half the frame
  (compilation-window-height 16)
  ;;  Always scroll the compilation window
  (compilation-scroll-output t)
  :init
  ;; If there were no errors, there's not much to look at in a compilation
  ;; buffer, so make it go away in 2 seconds.
  (setq compilation-finish-functions
	(lambda (buf str)
          (if (or (string-match "exited abnormally" str)
                  (string-match (buffer-name buf) "*grep*"))
              ;; There were errors.
              (message "Compilation errors, press C-x ` to visit.")
            ;; No errors; make the compilation window go away in 2 seconds.
            (run-at-time 2 nil 'delete-windows-on buf)
            (message "Build Succeeded."))))
  ;; Follow the compilation buffer scroll instead of remaining at the top line.
  (setq compilation-scroll-output t)
  ;; (setq compilation-scroll-output 'first-error)
  (setq auto-revert-check-vc-info t)
  ;; TAB cycle if there are only few candidates
  (setq completion-cycle-threshold 3)

  ;; Emacs 28: Hide commands in M-x which do not apply to the current mode.
  ;; Corfu commands are hidden, since they are not supposed to be used via M-x.
  ;; (setq read-extended-command-predicate
  ;;       #'command-completion-default-include-p)

  ;; Enable indentation+completion using the TAB key.
  ;; `completion-at-point' is often bound to M-TAB.
  (setq tab-always-indent 'complete))


    ;;; Emacs bookmarks
;; C-x r m: create new bookmark
;; C-x r b: navigate to bookmark
;; C-x r l: list bookmarks.
(setq
 bookmark-default-file "~/.emacs.d/bookmarks" ; Moved from ~.
 bookmark-save-flag 1)                        ; Autosave each change.

(use-package corfu-history
  :after corfu
  :init (corfu-history-mode))


;; https://github.com/50ways2sayhard/.emacs.d/blob/1158200665431cc336c868ad1f9ecb43c249fc31/elisp/init-complete.el
(defun poly/convert-super-capf (arg-capf)
  (list
   #'cape-file
   ;; #'cape-dabbrev
   ;; #'cape-keyword
   ;; #'cape-symbol
   (cape-capf-buster
    (cape-super-capf
     arg-capf
     ;; #'ebdb-complete-mail
     #'tempel-expand)
    'equal)
   ;; #'cape-dabbrev
   ))

(defun poly/set-basic-capf ()
  (interactive)
  (setq completion-category-defaults nil)
  (setq-local completion-at-point-functions
	      (poly/convert-super-capf
	       (car completion-at-point-functions))))

(defun poly/set-mail-capf ()
  (interactive)
  (setq completion-category-defaults nil)
  (setq-local completion-at-point-functions
	      (list
	       #'cape-file
	       (cape-capf-buster
		(cape-super-capf
		 ;; #'notmuch-capf
		 ;; #'ebdb-mail-dwim-completion-at-point-function
		 ;; #'ebdb-complete-mail
		 ;; #'tabnine-completion-at-point
		 ;; #'tabnine-capf
		 ;; arg-capf
		 #'tempel-expand)
		))))

(defun poly/set-lsp-capf ()
  (interactive)
  (setq completion-category-defaults nil)
  (setq-local completion-at-point-functions
	      (poly/convert-super-capf (if poly-use-lsp-mode
					   #'lsp-completion-at-point
					 #'eglot-completion-at-point))))

;; Completion At Point Extensions made for `corfu'
(use-package cape
  :straight t
  ;; ;; Bind dedicated completion commands
  ;; ;; Alternative prefix keys: C-c p, M-p, M-+, ...
  ;; :bind (("C-c p p" . completion-at-point) ;; capf
  ;;        ("C-c p t" . complete-tag)        ;; etags
  ;;        ("C-c p d" . cape-dabbrev)        ;; or dabbrev-completion
  ;;        ("C-c p h" . cape-history)
  ;;        ("C-c p f" . cape-file)
  ;;        ("C-c p k" . cape-keyword)
  ;;        ("C-c p s" . cape-symbol)
  ;;        ("C-c p a" . cape-abbrev)
  ;;        ("C-c p i" . cape-ispell)
  ;;        ("C-c p l" . cape-line)
  ;;        ("C-c p w" . cape-dict)
  ;;        ("C-c p \\" . cape-tex)
  ;;        ("C-c p _" . cape-tex)
  ;;        ("C-c p ^" . cape-tex)
  ;;        ("C-c p &" . cape-sgml)
  ;;        ("C-c p r" . cape-rfc1345))
  :init
  ;; Add `completion-at-point-functions', used by `completion-at-point'.
  ;; (add-to-list 'completion-at-point-functions #'cape-file)
  ;; (add-to-list 'completion-at-point-functions #'cape-tex)
  ;; (add-to-list 'completion-at-point-functions #'cape-dabbrev)
  ;; (add-to-list 'completion-at-point-functions #'cape-keyword)
  ;; (add-to-list 'completion-at-point-functions #'cape-sgml)
  ;; (add-to-list 'completion-at-point-functions #'cape-rfc1345)
  ;; (add-to-list 'completion-at-point-functions #'cape-ispell)
  ;; (add-to-list 'completion-at-point-functions #'cape-dict)
  ;; (add-to-list 'completion-at-point-functions #'cape-symbol)
  ;; (add-to-list 'completion-at-point-functions #'cape-line)
  :hook ((prog-mode . poly/set-basic-capf)
	 (org-mode . poly/set-basic-capf)
	 (emacs-lisp-mode . (lambda ()
			      (poly/convert-super-capf #'elisp-completion-at-point)))
	 ((lsp-completion-mode eglot-managed-mode) . poly/set-lsp-capf))
  :config
  (poly/set-basic-capf)
  (setq dabbrev-upcase-means-case-search t)
  (setq case-fold-search nil)
  ;; (setq cape-dict-file "/usr/share/dict/words")
  ;; Silence the pcomplete capf, no errors or messages!
  (advice-add 'pcomplete-completions-at-point :around #'cape-wrap-silent)
  ;; Ensure that pcomplete does not write to the buffer
  ;; and behaves as a pure `completion-at-point-function'.
  (advice-add 'pcomplete-completions-at-point :around #'cape-wrap-purify))

(defun corfu-enable-in-minibuffer ()
  "Enable Corfu in the minibuffer if `completion-at-point' is bound."
  (when (where-is-internal #'completion-at-point (list (current-local-map)))
    ;; (setq-local corfu-auto nil) Enable/disable auto completion
    (corfu-mode 1)))
(add-hook 'minibuffer-setup-hook #'corfu-enable-in-minibuffer)

(defun corfu-move-to-minibuffer ()
  (interactive)
  (let ((completion-extra-properties corfu--extra)
	completion-cycle-threshold completion-cycling)
    (apply #'consult-completion-in-region completion-in-region--data)))
(define-key corfu-map "\M-m" #'corfu-move-to-minibuffer)

(use-package corfu-doc
  :ensure t
  :straight t
  :disabled t
  :config
  ;;hook
  (add-hook 'corfu-mode-hook #'corfu-doc-mode)
  ;;bind
  (define-key corfu-map (kbd "M-p") #'corfu-doc-scroll-down) ;; corfu-next
  (define-key corfu-map (kbd "M-n") #'corfu-doc-scroll-up)  ;; corfu-previous
  (define-key corfu-map (kbd "M-d") #'corfu-doc-toggle))

;; Configure Tempel
(use-package tempel
  :straight t
  ;; Require trigger prefix before template name when completing.
  ;; :custom
  ;; (tempel-trigger-prefix "<")
  :bind (("M-+" . tempel-complete) ;; Alternative tempel-expand
	 ("M-*" . tempel-insert))
  ;; :init
  ;; ;; Setup completion at point
  ;; (defun tempel-setup-capf ()
  ;;   ;; Add the Tempel Capf to `completion-at-point-functions'.
  ;;   ;; `tempel-expand' only triggers on exact matches. Alternatively use
  ;;   ;; `tempel-complete' if you want to see all matches, but then you
  ;;   ;; should also configure `tempel-trigger-prefix', such that Tempel
  ;;   ;; does not trigger too often when you don't expect it. NOTE: We add
  ;;   ;; `tempel-expand' *before* the main programming mode Capf, such
  ;;   ;; that it will be tried first.
  ;;   (setq-local completion-at-point-functions
  ;; 		(cons #'tempel-expand
  ;; 		      completion-at-point-functions)))

  ;; (add-hook 'prog-mode-hook 'tempel-setup-capf)
  ;; (add-hook 'text-mode-hook 'tempel-setup-capf)
  ;; ;; Optionally make the Tempel templates available to Abbrev,
  ;; ;; either locally or globally. `expand-abbrev' is bound to C-x '.
  ;; ;; (add-hook 'prog-mode-hook #'tempel-abbrev-mode)
  ;; ;; (global-tempel-abbrev-mode)
  )

(use-package editorconfig
  :straight t)

(use-package tabnine
  :after (on)
  :commands (tabnine-start-process)
  :hook (prog-mode . tabnine-mode)
  :straight (tabnine :package "tabnine"
		     :type git
		     :host nil
		     :repo "ssh://git@h.jiya.net:9922/shuxiao9058/tabnine.git"
		     ;; :host github :repo "shuxiao9058/tabnine"
		     ;; :files ("*.el")
		     )
  :custom
  (tabnine-wait 1)
  (tabnine-minimum-prefix-length 0)
  :init
  (setq tabnine-executable-args (list "--log-level" "Trace" "--no-lsp" "false"))
  (setq tabnine-log-file-path "/tmp/tabnine-emacs.log")
  :hook ((on-first-input . tabnine-start-process)
	 ;; (on-first-input . (lambda () (run-with-timer 2 nil #'tabnine-capf-start-process)))
	 (kill-emacs . tabnine-kill-process))
  :config
  (add-to-list 'tabnine-disable-predicates #'meow-motion-mode-p)
  (add-to-list 'tabnine-disable-predicates #'meow-normal-mode-p)
  (add-to-list 'tabnine-disable-display-predicates #'meow-motion-mode-p)
  (add-to-list 'tabnine-disable-display-predicates #'meow-normal-mode-p)
  :bind
  (:map tabnine-mode-map
	("C-TAB" . tabnine-accept-completion-by-word)
	("C-<tab>" . tabnine-accept-completion-by-word)
	("TAB" . tabnine-accept-completion)
	("<tab>" . tabnine-accept-completion))
  (:map  tabnine-completion-map
	 ("C-g" . tabnine-clear-overlay)
	 ("C-n" . tabnine-next-completion)
	 ("C-p" . tabnine-previous-completion)))
#+end_src

*** corfu-quick

#+begin_src emacs-lisp
(use-package corfu-quick
  :after corfu
  :straight nil
  :bind
  (:map corfu-map
        ("C-q" . corfu-quick-insert)))
#+end_src

*** corfu-terminal & popon

#+begin_src emacs-lisp
(unless IS-GUI
  (use-package popon
    :straight (popon :package "popon"
		     :type git
		     :host nil
		     :repo "https://codeberg.org/akib/emacs-popon.git"))
  (use-package corfu-terminal
    :straight (corfu-terminal
	       :type git
	       :host nil
               :repo "https://codeberg.org/akib/emacs-corfu-terminal.git")
    :after popon
    :config
    (unless IS-GUI
      (corfu-popup-mode +1)))
  ;; (use-package corfu-popup
  ;; :straight (corfu-popup
  ;; 	       :type git
  ;; 	       :repo "https://codeberg.org/akib/emacs-corfu-popup.git")
  ;; :init
  ;; (corfu-popup-mode +1))
  )
#+end_src

* hydra

Quick action with hydra

#+begin_src emacs-lisp
(use-package hydra
  :straight t
  :ensure t
  ;; :after outline
  :custom
  (hydra-if-helpful t)
  :commands (defhydra)
  :bind ("M-o" . hydra-base/body))

;; (use-package hydra-posframe
;;   :straight (hydra-posframe
;;              :host github
;;              :repo "Ladicle/hydra-posframe"
;;              )
;;   :defer t
;;   :after (hydra posframe)
;; :config
;; (hydra-posframe-enable)
;;   )

(defhydra hydra-base ()
  "
_a_genda
_e_in
_f_lycheck
_n_otdeft
_o_utline & outshine
_s_traight
_t_ab
_w_indow
"
  ("a" hydra-agenda-view/body :exit t)
  ("d" dumb-jump-hydra/body :exit t)
  ("f" hydra-flycheck/body :exit t)
  ("n" notdeft-global-hydra/body :exit t)
  ("w" hydra-window/body :exit t)
  ("o" hydra-outline/body :exit t)
  ("s" hydra-straight/body :exit t)
  ("t" hydra-tab/body :exit t)
  ("e" hydra-ein/body :exit t))

(defhydra hydra-straight (:hint nil)
  "
_c_heck all       |_f_etch all     |_m_erge all      |_n_ormalize all   |p_u_sh all
_C_heck package   |_F_etch package |_M_erge package  |_N_ormlize package|p_U_sh package
----------------^^+--------------^^+---------------^^+----------------^^+------------||_q_uit||
_r_ebuild all     |_p_ull all      |_v_ersions freeze|_w_atcher start   |_g_et recipe
_R_ebuild package |_P_ull package  |_V_ersions thaw  |_W_atcher quit    |prun_e_ build"
  ("c" straight-check-all)
  ("C" straight-check-package)
  ("r" straight-rebuild-all)
  ("R" straight-rebuild-package)
  ("f" straight-fetch-all)
  ("F" straight-fetch-package)
  ("p" straight-pull-all)
  ("P" straight-pull-package)
  ("m" straight-merge-all)
  ("M" straight-merge-package)
  ("n" straight-normalize-all)
  ("N" straight-normalize-package)
  ("u" straight-push-all)
  ("U" straight-push-package)
  ("v" straight-freeze-versions)
  ("V" straight-thaw-versions)
  ("w" straight-watcher-start)
  ("W" straight-watcher-quit)
  ("g" straight-get-recipe)
  ("e" straight-prune-build)
  ("q" nil))

(defhydra hydra-window (:exit nil)
  "
Movement^^        ^Split^         ^Switch^    ^Resize^
----------------------------------------------------------------
_h_ ←          _v_ertical      _b_uffer      _q_ ←→ shrink
_j_ ↓          _x_ horizontal  _f_ind files  _w_ ←→ grow
_k_ ↑          _z_ undo        _a_ce 1       _e_ ↑↓ shrink
_l_ →          _Z_ reset       _s_wap        _r_ ↑↓ grow
_F_ollow       _D_lt Other     _S_ave        _m_aximize
_SPC_ cancel   _o_nly this     _d_elete
"
  ("h" windmove-left )
  ("j" windmove-down )
  ("k" windmove-up )
  ("l" windmove-right )
  ("q" shrink-window-horizontally)
  ("w" enlarge-window-horizontally)
  ("e" shrink-window)
  ("r" enlarge-window)
  ("b" helm-mini)
  ("f" helm-find-files)
  ("F" follow-mode)
  ("a" (lambda ()
	 (interactive)
	 (ace-window 1)
	 (add-hook 'ace-window-end-once-hook
		   'hydra-window/body))
   )
  ("v" (lambda ()
	 (interactive)
	 (split-window-right)
	 (windmove-right))
   )
  ("x" (lambda ()
	 (interactive)
	 (split-window-below)
	 (windmove-down))
   )
  ("s" (lambda ()
	 (interactive)
	 (ace-window 4)
	 (add-hook 'ace-window-end-once-hook
		   'hydra-window/body)))
  ("S" save-buffer)
  ("d" delete-window)
  ("D" (lambda ()
	 (interactive)
	 (ace-window 16)
	 (add-hook 'ace-window-end-once-hook
		   'hydra-window/body)))
  ("o" delete-other-windows)
  ("m" ace-maximize-window)
  ("z" (progn
	 (winner-undo)
	 (setq this-command 'winner-undo)))
  ("Z" winner-redo)
  ("SPC" nil))

;; (defhydra hydra-git-gutter (:body-pre (git-gutter+-mode 1)
;;              :hint nil)
;;   "
;; Git gutter:
;;   _j_: next hunk        _s_tage hunk     _q_uit
;;   _k_: previous hunk    _r_evert hunk    _Q_uit and deactivate git-gutter
;;   ^ ^                   _p_opup hunk
;;   _h_: first hunk
;;   _l_: last hunk
;; "
;;   ;; set start _R_evision
;;   ("j" git-gutter+:next-hunk)
;;   ("k" git-gutter+:previous-hunk)
;;   ("h" (progn (goto-char (point-min))
;;               (git-gutter+:next-hunk 1)))
;;   ("l" (progn (goto-char (point-min))
;;               (git-gutter+:previous-hunk 1)))
;;   ("s" git-gutter+:stage-hunks)
;;   ("r" git-gutter+:revert-hunks)
;;   ("p" git-gutter+:popup-hunk)
;;   ;;("R" git-gutter:set-start-revision)
;;   ("q" nil :color blue)
;;   ("Q" (progn (git-gutter+-mode -1)
;;               ;; git-gutter-fringe doesn't seem to
;;               ;; clear the markup right away
;;               (sit-for 0.1)
;;               ;;(git-gutter:clear)
;;               )
;;    :color blue)
;;   )

;; from https://www.reddit.com/r/emacs/comments/8of6tx/tip_how_to_be_a_beast_with_hydra/
(defhydra hydra-outline (:color blue :hint nil)
  "
    ^Hide^             ^Show^           ^Move
    ^^^^^^------------------------------------------------------
    _q_: sublevels     _a_: all         _u_: up
    _t_: body          _e_: entry       _n_: next visible
    _o_: other         _i_: children    _p_: previous visible
    _c_: entry         _k_: branches    _f_: forward same level
    _l_: leaves        _s_: subtree     _b_: backward same level
    _d_: subtree
    "
  ;; Hide
  ("q" hide-sublevels)    ; Hide everything but the top-level headings
  ("t" hide-body)         ; Hide everything but headings (all body lines)
  ("o" hide-other)        ; Hide other branches
  ("c" hide-entry)        ; Hide this entry's body
  ("l" hide-leaves)       ; Hide body lines in this entry and sub-entries
  ("d" hide-subtree)      ; Hide everything in this entry and sub-entries
  ;; Show
  ("a" show-all)          ; Show (expand) everything
  ("e" show-entry)        ; Show this heading's body
  ("i" show-children)     ; Show this heading's immediate child sub-headings
  ("k" show-branches)     ; Show all sub-headings under this heading
  ("s" show-subtree)      ; Show (expand) everything in this heading & below
  ;; Move
  ("u" outline-up-heading)                ; Up
  ("n" outline-next-visible-heading)      ; Next
  ("p" outline-previous-visible-heading)  ; Previous
  ("f" outline-forward-same-level)        ; Forward - same level
  ("b" outline-backward-same-level)       ; Backward - same level
  ("z" nil "leave")
  )

(defhydra hydra-ein (:hint nil)
  "
 Operations on Cells^^^^^^            On Worksheets^^^^              Other
 ----------------------------^^^^^^   ------------------------^^^^   ----------------------------------^^^^
 [_k_/_j_]^^     select prev/next     [_h_/_l_]   select prev/next   [_t_]^^         toggle output
 [_K_/_J_]^^     move up/down         [_H_/_L_]   move left/right    [_C-l_/_C-S-l_] clear/clear all output
 [_C-k_/_C-j_]^^ merge above/below    [_1_.._9_]  open [1st..last]   [_C-o_]^^       open console
 [_O_/_o_]^^     insert above/below   [_+_/_-_]   create/delete      [_C-s_/_C-r_]   save/rename notebook
 [_y_/_p_/_d_]   copy/paste           ^^^^                           [_x_]^^         close notebook
 [_u_]^^^^       change type          ^^^^                           [_q_]^^         quit transient-state
 [_RET_]^^^^     execute"

  ("q" nil :exit t)
  ;; ("?" spacemacs//ipython-notebook-ms-toggle-doc)
  ("h" ein:notebook-worksheet-open-prev-or-last)
  ("j" ein:worksheet-goto-next-input)
  ("k" ein:worksheet-goto-prev-input)
  ("l" ein:notebook-worksheet-open-next-or-first)
  ("H" ein:notebook-worksheet-move-prev)
  ("J" ein:worksheet-move-cell-down)
  ("K" ein:worksheet-move-cell-up)
  ("L" ein:notebook-worksheet-move-next)
  ("t" ein:worksheet-toggle-output)
  ("d" ein:worksheet-kill-cell)
  ("R" ein:worksheet-rename-sheet)
  ("y" ein:worksheet-copy-cell)
  ("p" ein:worksheet-yank-cell)
  ("o" ein:worksheet-insert-cell-below)
  ("O" ein:worksheet-insert-cell-above)
  ("u" ein:worksheet-change-cell-type)
  ("RET" ein:worksheet-execute-cell-and-goto-next)
  ;; Output
  ("C-l" ein:worksheet-clear-output)
  ("C-S-l" ein:worksheet-clear-all-output)
  ;;Console
  ("C-o" ein:console-open)
  ;; Merge and split cells
  ("C-k" ein:worksheet-merge-cell)
  ("C-j"
   (lambda ()
     (interactive)
     (ein:worksheet-merge-cell (ein:worksheet--get-ws-or-error) (ein:worksheet-get-current-cell) t t)))
  ("s" ein:worksheet-split-cell-at-point)
  ;; Notebook
  ("C-s" ein:notebook-save-notebook-command)
  ("C-r" ein:notebook-rename-command)
  ("1" ein:notebook-worksheet-open-1th)
  ("2" ein:notebook-worksheet-open-2th)
  ("3" ein:notebook-worksheet-open-3th)
  ("4" ein:notebook-worksheet-open-4th)
  ("5" ein:notebook-worksheet-open-5th)
  ("6" ein:notebook-worksheet-open-6th)
  ("7" ein:notebook-worksheet-open-7th)
  ("8" ein:notebook-worksheet-open-8th)
  ("9" ein:notebook-worksheet-open-last)
  ("+" ein:notebook-worksheet-insert-next)
  ("-" ein:notebook-worksheet-delete)
  ("x" ein:notebook-close))

;; keymap https://github.com/Timidger/dotfiles/blob/master/.emacs.d/layers/+emacs/org/packages.el
(defhydra hydra-agenda-view (:hint nil)
  "
Headline^^            Visit entry^^               Filter^^                    Date^^               Toggle mode^^        View^^             Clock^^        Other^^
--------^^---------   -----------^^------------   ------^^-----------------   ----^^-------------  -----------^^------  ----^^---------    -----^^------  -----^^-----------
[_ht_] set status     [_SPC_] in other window     [_ft_] by tag               [_ds_] schedule      [_tf_] follow        [_vd_] day         [_ci_] in      [_gr_] reload
[_hk_] kill           [_TAB_] & go to location    [_fr_] refine by tag        [_dd_] set deadline  [_tl_] log           [_vw_] week        [_co_] out     [_._]  go to today
[_hr_] refile         [_RET_] & del other windows [_fc_] by category          [_dt_] timestamp     [_ta_] archive       [_vt_] fortnight   [_ck_] cancel  [_gd_] go to date
[_hA_] archive        [_o_]   link                [_fh_] by top headline      [_+_]  do later      [_tr_] clock report  [_vm_] month       [_cj_] jump    ^^
[_hT_] set tags       ^^                          [_fx_] by regexp            [_-_]  do earlier    [_td_] diaries       [_vy_] year        ^^             ^^
[_hp_] set priority   ^^                          [_fd_] delete all filters   ^^                   ^^                   [_vn_] next span   ^^             ^^
^^                    ^^                          ^^                          ^^                   ^^                   [_vp_] prev span   ^^             ^^
^^                    ^^                          ^^                          ^^                   ^^                   [_vr_] reset       ^^             ^^
[_q_] quit
"
  ;; Entry
  ("ht" org-agenda-todo)
  ("hk" org-agenda-kill)
  ("hr" org-agenda-refile)
  ("hA" org-agenda-archive-default)
  ("hT" org-agenda-set-tags)
  ("hp" org-agenda-priority)

  ;; Visit entry
  ("SPC" org-agenda-show-and-scroll-up)
  ("<tab>" org-agenda-goto :exit t)
  ("TAB" org-agenda-goto :exit t)
  ("RET" org-agenda-switch-to :exit t)
  ("o"   link-hint-open-link :exit t)

  ;; Date
  ("ds" org-agenda-schedule)
  ("dd" org-agenda-deadline)
  ("dt" org-agenda-date-prompt)
  ("+" org-agenda-do-date-later)
  ("-" org-agenda-do-date-earlier)

  ;; View
  ("vd" org-agenda-day-view)
  ("vw" org-agenda-week-view)
  ("vt" org-agenda-fortnight-view)
  ("vm" org-agenda-month-view)
  ("vy" org-agenda-year-view)
  ("vn" org-agenda-later)
  ("vp" org-agenda-earlier)
  ("vr" org-agenda-reset-view)

  ;; Toggle mode
  ("tf" org-agenda-follow-mode)
  ("tl" org-agenda-log-mode)
  ("ta" org-agenda-archives-mode)
  ("tr" org-agenda-clockreport-mode)
  ("td" org-agenda-toggle-diary)

  ;; Filter
  ("ft" org-agenda-filter-by-tag)
  ("fr" org-agenda-filter-by-tag-refine)
  ("fc" org-agenda-filter-by-category)
  ("fh" org-agenda-filter-by-top-headline)
  ("fx" org-agenda-filter-by-regexp)
  ("fd" org-agenda-filter-remove-all)

  ;; Clock
  ("ci" org-agenda-clock-in :exit t)
  ("co" org-agenda-clock-out)
  ("ck" org-agenda-clock-cancel)
  ("cj" org-agenda-clock-goto :exit t)

  ;; Other
  ("q" nil :exit t)
  ("gr" org-agenda-redo)
  ("." org-agenda-goto-today)
  ("gd" org-agenda-goto-date))

(defhydra dumb-jump-hydra (:color blue :columns 3)
  "Dumb Jump"
  ("j" dumb-jump-go "Go")
  ("o" dumb-jump-go-other-window "Other window")
  ("e" dumb-jump-go-prefer-external "Go external")
  ("x" dumb-jump-go-prefer-external-other-window "Go external other window")
  ("i" dumb-jump-go-prompt "Prompt")
  ("l" dumb-jump-quick-look "Quick look")
  ("b" dumb-jump-back "Back"))

(defhydra hydra-flycheck (:hint nil)
  "
  _a_: list errors   _p_: prev error   _<_ : first error _w_: copy message
  _c_: check buffer  _n_: next error   _>_ : last error  _C_: clear errors    "
  ("a" flycheck-list-errors)
  ("n" flycheck-next-error)
  ("p" flycheck-previous-error)
  ("<" flycheck-first-error)
  (">" (lambda ()
	 (interactive)
	 (goto-char (point-max)) (flycheck-previous-error)))
  ("c" flycheck-buffer)
  ("C" flycheck-clear)
  ("w" flycheck-copy-errors-as-kill)
  ("q" nil "quit" :color "deep sky blue"))

;; (defhydra hydra-clock (:color blue)
;;     "
;;     ^
;;     ^Clock^             ^Do^
;;     ^─────^─────────────^──^─────────
;;     _q_ quit            _c_ cancel
;;     ^^                  _d_ display
;;     ^^                  _e_ effort
;;     ^^                  _i_ in
;;     ^^                  _j_ jump
;;     ^^                  _o_ out
;;     ^^                  _r_ report
;;     ^^                  ^^
;;     "
;;     ("q" nil)
;;     ("c" org-clock-cancel :color pink)
;;     ("d" org-clock-display)
;;     ("e" org-clock-modify-effort-estimate)
;;     ("i" org-clock-in)
;;     ("j" org-clock-goto)
;;     ("o" org-clock-out)
;;     ("r" org-clock-report)
;;   )

;; (defhydra hydra-straight-helper (:hint nil)
;;   "
;; _c_heck all       |_f_etch all     |_m_erge all      |_n_ormalize all   |p_u_sh all
;; _C_heck package   |_F_etch package |_M_erge package  |_N_ormlize package|p_U_sh package
;; ----------------^^+--------------^^+---------------^^+----------------^^+------------||_q_uit||
;; _r_ebuild all     |_p_ull all      |_v_ersions freeze|_w_atcher start   |_g_et recipe
;; _R_ebuild package |_P_ull package  |_V_ersions thaw  |_W_atcher quit    |prun_e_ build"
;;   ("c" straight-check-all)
;;   ("C" straight-check-package)
;;   ("r" straight-rebuild-all)
;;   ("R" straight-rebuild-package)
;;   ("f" straight-fetch-all)
;;   ("F" straight-fetch-package)
;;   ("p" straight-pull-all)
;;   ("P" straight-pull-package)
;;   ("m" straight-merge-all)
;;   ("M" straight-merge-package)
;;   ("n" straight-normalize-all)
;;   ("N" straight-normalize-package)
;;   ("u" straight-push-all)
;;   ("U" straight-push-package)
;;   ("v" straight-freeze-versions)
;;   ("V" straight-thaw-versions)
;;   ("w" straight-watcher-start)
;;   ("W" straight-watcher-quit)
;;   ("g" straight-get-recipe)
;;   ("e" straight-prune-build)
;;   ("q" nil))


;; (defhydra sm/smerge-hydra
;;     (:color pink :hint nil :post (smerge-auto-leave))
;;   "
;; ^Move^       ^Keep^               ^Diff^                 ^Other^
;; ^^-----------^^-------------------^^---------------------^^-------
;; _n_ext       _b_ase               _<_: upper/base        _C_ombine
;; _p_rev       _u_pper              _=_: upper/lower       _r_esolve
;; ^^           _l_ower              _>_: base/lower        _k_ill current
;; ^^           _a_ll                _R_efine
;; ^^           _RET_: current       _E_diff
;; "
;;   ("n" smerge-next)
;;   ("p" smerge-prev)
;;   ("b" smerge-keep-base)
;;   ("u" smerge-keep-upper)
;;   ("l" smerge-keep-lower)
;;   ("a" smerge-keep-all)
;;   ("RET" smerge-keep-current)
;;   ("\C-m" smerge-keep-current)
;;   ("<" smerge-diff-base-upper)
;;   ("=" smerge-diff-upper-lower)
;;   (">" smerge-diff-base-lower)
;;   ("R" smerge-refine)
;;   ("E" smerge-ediff)
;;   ("C" smerge-combine-with-next)
;;   ("r" smerge-resolve)
;;   ("k" smerge-kill-current)
;;   ("ZZ" (lambda ()
;;           (interactive)
;;           (save-buffer)
;;           (bury-buffer))
;;  "Save and bury buffer" :color blue)
;;   ("q" nil "cancel" :color blue))


(defhydra hydra-smerge (:color pink
			       :hint nil
			       :pre (unless smerge-mode (smerge-mode +1))
			       :post (smerge-auto-leave))
  "
							 [smerge]
^Move^       ^Keep^               ^Diff^                 ^Other^
  ╭─────────────────────────────────────────────────────────╯
_n_ext       _b_ase               _<_: upper/base        _C_ombine
_p_rev       _m_ine              _=_: upper/lower       _r_esolve
_C-k_        _o_ther             _>_: base/lower        _R_move
_k_ ↑       _a_ll                _R_efine
_j_ ↓       _RET_: current       _E_diff
_C-j_
"
  ("n" smerge-next)
  ("p" smerge-prev)
  ("C-j" smerge-next)
  ("C-k" smerge-prev)
  ("j" next-line)
  ("k" previous-line)
  ("b" smerge-keep-base)
  ("m" smerge-keep-upper) ;; keep mine
  ("o" smerge-keep-lower) ;; keep other
  ;; ("u" smerge-keep-upper)
  ;; ("l" smerge-keep-lower)
  ("a" smerge-keep-all)
  ("RET" smerge-keep-current)
  ("\C-m" smerge-keep-current)
  ("<" smerge-diff-base-upper)
  ("=" smerge-diff-upper-lower)
  (">" smerge-diff-base-lower)
  ("H" smerge-refine)
  ("E" smerge-ediff)
  ("C" smerge-combine-with-next)
  ("r" smerge-resolve)
  ("R" smerge-kill-current)
  ("ZZ" (lambda ()
	  (interactive)
	  (save-buffer)
	  (bury-buffer))
   "Save and bury buffer" :color blue)
  ("q" nil "cancel" :color blue))

(defhydra hydra-tab (:color red :hint nil)
  "
						^tab^
-------^^-----------------------------^^--------------------------------^^-----------------------^^-------------------
    ^Switch^                        ^Move^                        ^Create & Kill^              ^Other^
_h_:       left tab              _<_: tab to left               _n_: new tab                  _rr_: rename
_l_:       right tab             _>_: tab to right              _N_: new tab with name        _rp_: rename default
[_1_.._9_]: switch [1st..last]     [_m1_..._9_]: move [1st..last]   _x_: kill                     _U_ : undo
_t_:      select tab 											_R_ : redo
"

  ;; ("u" winner-undo)
  ;; ;; doesn't work
  ;; ;; ("C-r" winner-redo)

  ;; ;; tab-bar-mode (Emacs 27)
  ("h"  #'tab-bar-switch-to-prev-tab)
  ("l"  #'tab-bar-switch-to-next-tab)
  ("<"  #'toy/tab-move-left)
  (">"  #'toy/tab-move-right)

  ;; ;; FIXME:
  ;; ;; ("w" #'toy/hydra-window/body)
  ;; ("w" (lambda () (interactive) (hydra-disable)
  ;;           (toy/hydra-window/body)))

  ("rr" #'tab-bar-rename-tab)
  ;; rename to project name
  ("rp" #'toy/set-tab-name-default) ;; NOTE: defined in `ide.el`

  ("n" #'tab-bar-new-tab)
  ;; new tab and set name
  ("N" (lambda () (interactive)
	 (tab-bar-new-tab)
	 (call-interactively 'tab-bar-rename-tab)))
  ("x" #'tab-bar-close-tab)

  ;; select tab
  ("1" (lambda () (interactive) (tab-bar-select-tab 1)))
  ("2" (lambda () (interactive) (tab-bar-select-tab 2)))
  ("3" (lambda () (interactive) (tab-bar-select-tab 3)))
  ("4" (lambda () (interactive) (tab-bar-select-tab 4)))
  ("5" (lambda () (interactive) (tab-bar-select-tab 5)))
  ("6" (lambda () (interactive) (tab-bar-select-tab 6)))
  ("7" (lambda () (interactive) (tab-bar-select-tab 7)))
  ("8" (lambda () (interactive) (tab-bar-select-tab 8)))
  ("9" (lambda () (interactive) (tab-bar-select-tab 9)))

  ;; move tab
  ("m1" (lambda () (interactive) (tab-bar-move-tab-to 1)))
  ("m2" (lambda () (interactive) (tab-bar-move-tab-to 2)))
  ("m3" (lambda () (interactive) (tab-bar-move-tab-to 3)))
  ("m4" (lambda () (interactive) (tab-bar-move-tab-to 4)))
  ("m5" (lambda () (interactive) (tab-bar-move-tab-to 5)))
  ("m6" (lambda () (interactive) (tab-bar-move-tab-to 6)))
  ("m7" (lambda () (interactive) (tab-bar-move-tab-to 7)))
  ("m8" (lambda () (interactive) (tab-bar-move-tab-to 8)))
  ("m9" (lambda () (interactive) (tab-bar-move-tab-to 9)))

  ;; winner
  ("U" winner-undo)
  ("R" winner-redo)

  ("t" my/tab-bar-select-tab-dwim)

  ("q" nil "cancel" :color blue)
  )

(defun toy/tab-move-right ()
  (interactive)
  (let* ((ix (tab-bar--current-tab-index))
	 (n-tabs (length (funcall tab-bar-tabs-function)))
	 (next-ix (mod (+ ix 1) n-tabs)))
    ;; use 1-based index
    (tab-bar-move-tab-to (+ 1 next-ix))))

(defun toy/tab-move-left ()
  (interactive)
  (let* ((ix (tab-bar--current-tab-index))
	 (n-tabs (length (funcall tab-bar-tabs-function)))
	 (next-ix (mod (+ ix n-tabs -1) n-tabs)))
    ;; use 1-based index
    (tab-bar-move-tab-to (+ 1 next-ix))))
#+end_src

* on

#+begin_src emacs-lisp
(use-package on
  :straight (:host github :repo "ajgrf/on.el"))
#+end_src

* Git integration with magit & diff-hl & smerge

To manage the git repository, use builtin package ~vc~.

#+begin_src emacs-lisp
(use-package with-editor
  :straight t
  :ensure t)

(use-package emacsql
  :straight t
  :disabled t
  :ensure t)

(use-package magit
  :straight t
  :commands (magit-file-delete magit-status magit-checkout)
  :hook (magit-pop-mode . hide-mode-line-mode)
  :custom
  ;; (magit-refresh-verbose t) ;; debug only
  ;; (magit-display-buffer-function #'magit-display-buffer-fullframe-status-v1)
  (magit-revert-buffers 'silent)
  (git-commit-summary-max-length 50)
  (magit-log-section-commit-count 5)
  (magit-diff-options (quote ("--minimal" "--patience")))
  (magit-tag-arguments (quote ("--annotate" "--sign")))
  (magit-merge-arguments (quote ("--no-ff")))
  (magit-rebase-arguments (quote ("--autostash")))
  ;; use colored graph lines. Could be a performance issue.
  (magit-log-arguments (quote ("-n64" "--graph" "--decorate" "--color" "--stat")))
  (magit-diff-use-overlays nil)
  (magit-use-overlays nil)
  (magit-auto-revert-mode nil)
  (git-rebase-auto-advance  nil)
  (magit-stage-all-confirm nil)
  (magit-commit-squash-commit 'marked-or-curren)
  (magit-push-always-verify ni) ;; cuz it says so
  (magit-diff-refine-hunk nil)
  (git-commit-finish-query-functions nil)
  (magit-log-section-commit-count 10)
  (magit-log-section-arguments '("--graph" "--decorate" "--color"))
  ;; (magit-log-margin '(t "%Y-%m-%d %H:%M:%S" magit-log-margin-width t 18))
  (magit-log-margin  '(t "%m/%d/%Y %H:%M " magit-log-margin-width t 18))
  ;; (magit-log-margin-show-committer-date t)
  ;; (magit-git-executable "/usr/local/bin/git")
  :init
  ;; Must be set early to prevent ~/.emacs.d/transient from being created
  (setq transient-levels-file  (concat poly-etc-dir "transient/levels")
	transient-values-file  (concat poly-etc-dir "transient/values")
	transient-history-file (concat poly-etc-dir "transient/history"))

  ;; Have magit-status go full screen and quit to previous
  ;; configuration.  Taken from
  ;; http://whattheemacsd.com/setup-magit.el-01.html#comment-748135498
  ;; and http://irreal.org/blog/?p=2253
  (defadvice magit-status (around magit-fullscreen activate)
    (window-configuration-to-register :magit-fullscreen)
    ad-do-it
    (delete-other-windows))
  (defadvice magit-quit-window (after magit-restore-screen activate)
    (jump-to-register :magit-fullscreen))
  ;; (setq
  ;; ;; Use flyspell in the commit buffer
  ;; (add-hook 'git-commit-setup-hook 'git-commit-turn-on-flyspell)
  :config
  (setq magit-status-sections-hook
	'(
	  magit-insert-status-headers
	  magit-insert-merge-log
	  magit-insert-rebase-sequence
	  ;; magit-insert-am-sequence
	  ;; magit-insert-sequencer-sequence
	  ;; magit-insert-bisect-output
	  ;; magit-insert-bisect-rest
	  ;; magit-insert-bisect-log
	  magit-insert-untracked-files
	  magit-insert-unstaged-changes
	  magit-insert-staged-changes
	  magit-insert-unpushed-cherries
	  magit-insert-stashes
	  ;; magit-insert-recent-commits
	  magit-insert-unpulled-from-pushremote
	  magit-insert-unpushed-to-upstream
	  ;; magit-insert-unpushed-to-pushremote
	  ;; magit-insert-unpulled-from-upstream
	  ))

  (setq magit-status-headers-hook
	'(
	  ;; magit-insert-repo-header
	  magit-insert-remote-header
	  ;; magit-insert-error-header
	  magit-insert-diff-filter-header
	  magit-insert-head-branch-header
	  magit-insert-upstream-branch-header
	  magit-insert-push-branch-header
	  magit-insert-tags-header
	  ))

  (setq magit-refresh-status-buffer nil)
  (setq auto-revert-buffer-list-filter
	'magit-auto-revert-repository-buffer-p)
  (remove-hook 'magit-refs-sections-hook 'magit-insert-tags)
  (remove-hook 'server-switch-hook 'magit-commit-diff)

  ;; Opening repo externally
  (defun poly/parse-repo-url (url)
    "convert a git remote location as a HTTP URL"
    (if (string-match "^http" url)
	url
      (replace-regexp-in-string "\\(.*\\)@\\(.*\\):\\(.*\\)\\(\\.git?\\)"
				(concat (if (string-match "17usoft.com" url) "http" "https") "://\\2/\\3")
				url)))
  (defun poly/magit-open-repo ()
    "open remote repo URL"
    (interactive)
    (let ((url (magit-get "remote" "origin" "url")))
      (progn
	(browse-url (poly/parse-repo-url url))
	(message "opening repo %s" url))))

  (defun m/magit-display-buffer-traditional (buffer)
    "Like magit-display-buffer-traditional, but re-uses window for status mode, too."
    (display-buffer
     buffer (if (not (memq (with-current-buffer buffer major-mode)
			   '(magit-process-mode
			     magit-revision-mode
			     magit-diff-mode
			     magit-stash-mode
			     magit-status-mode)))
		'(display-buffer-same-window)
	      nil)))

  (setq magit-display-buffer-function 'm/magit-display-buffer-traditional)

  (defun m/magit-reset-author (&optional args)
    "Resets the authorship information for the last commit"
    (interactive)
    (magit-run-git-async "commit" "--amend" "--no-edit" "--reset-author"))

  ;; (magit-define-popup-action 'magit-commit-popup
  ;;   ?R "Reset author" 'm/magit-reset-author)
  (transient-append-suffix 'magit-commit
    "S"
    '("R" "Reset author" m/magit-reset-author))
  :bind
  (:map transient-base-map
	("q" . transient-quit-one)
	("<escape>" . transient-quit-one))
  (:map transient-edit-map
	("q" . transient-quit-one)
	("<escape>" . transient-quit-one))
  (:map transient-sticky-map
	("q" . transient-quit-one)
	("<escape>" . transient-quit-one)))

(use-package magit-gitflow
  :straight t
  :after magit
  :commands magit-gitflow-popup
  :hook (magit-mode . turn-on-magit-gitflow)
  )

;; ;; Show TODOs in magit
;; (use-package magit-todos
;;     :straight t
;;     :diminish
;;     :after magit
;;     :config
;;     (magit-todos-mode))

;; git-gutter-plus - View, stage and revert Git changes from the buffer (inspired by package of same name from vim)
(use-package git-gutter+
  :straight t
  :diminish "Git↓"
  :demand t
  :bind (("C-c g n" . git-gutter+-next-hunk)
	 ("C-c g p" . git-gutter+-previous-hunk))
  :config
  (defun git-gutter+-remote-default-directory (dir file)
    (let* ((vec (tramp-dissect-file-name file))
	   (method (tramp-file-name-method vec))
	   (user (tramp-file-name-user vec))
	   (domain (tramp-file-name-domain vec))
	   (host (tramp-file-name-host vec))
	   (port (tramp-file-name-port vec)))
      (tramp-make-tramp-file-name method user domain host port dir)))

  (defun git-gutter+-remote-file-path (dir file)
    (let ((file (tramp-file-name-localname (tramp-dissect-file-name file))))
      (replace-regexp-in-string (concat "\\`" dir) "" file)))
  (global-git-gutter+-mode)
  )

(use-package git-gutter-fringe+ :straight t)

;; git-messenger - Provides a function popup commit message at current line (port of package of same name from vim)
(use-package git-messenger
  :straight t
  :bind ("C-c g p" . git-messenger:popup-message)
  :init
  (custom-set-variables
   '(git-messenger:use-magit-popup t))
  (setq git-messenger:show-detail t)
  :config
  (progn
    (define-key git-messenger-map (kbd "RET") 'git-messenger:popup-close)))

;; git-timemachine - Step through historic versions of a git controlled file
(use-package git-timemachine
  :straight t
  :bind ("C-c g t" . git-timemachine-toggle))

;; gitignore-mode - Major mode for various Git configuration files
(use-package git-modes :straight t)

;; browse-at-remote - Browse target page on github/gitlab/bitbucket
(use-package browse-at-remote
  :straight t
  :bind ("C-c g b" . browse-at-remote/browse))

;; based on http://manuel-uberti.github.io/emacs/2018/02/17/magit-bury-buffer/
(defun magit-kill-buffers ()
  "Restore window configuration and kill all Magit buffers."
  (interactive)
  (let ((buffers (magit-mode-get-buffers)))
    (magit-restore-window-configuration)
    (mapc #'kill-buffer buffers)))

;; required by forge
(use-package yaml
  :straight t)

(use-package forge
  :disabled t
  :straight t
  :after (magit yaml)
  :commands forge-create-pullreq forge-create-issue
  :custom
  (forge-database-file (expand-file-name "forge/forge-database.sqlite" poly-etc-dir))
  (custom-set-variables '(forge-post-mode-hook '(visual-line-mode)))
  (forge-bug-reference-hooks
   '(git-commit-setup-hook magit-mode-hook))
  :config
  (setq forge-alist
	(append forge-alist
		'(("git.17usoft.com" "git.17usoft.com/api/v4" "git.17usoft.com" forge-gitlab-repository)
		  ("github.com" "api.github.com" "github.com" forge-github-repository))))
  ;; ;; remove some hooks for magit performance-s
  ;; (remove-hook 'magit-status-sections-hook 'forge-insert-pullreqs)
  ;; (remove-hook 'magit-status-sections-hook 'forge-insert-issues)
  )

(use-package ghub
  :straight t
  :after (magit forge)
  ;; :custom
  ;; (ghub-insecure-hosts '("git.17usoft.com/api/v4"))
  )

(use-package smerge-mode
  :straight t
  :ensure t
  :diminish
  :commands (smerge-mode
	     smerge-auto-leave
	     smerge-next
	     smerge-prev
	     smerge-keep-base
	     smerge-keep-upper
	     smerge-keep-lower
	     smerge-keep-all
	     smerge-keep-current
	     smerge-keep-current
	     smerge-diff-base-upper
	     smerge-diff-upper-lower
	     smerge-diff-base-lower
	     smerge-refine
	     smerge-ediff
	     smerge-combine-with-next
	     smerge-resolve
	     smerge-kill-current)
  :after (hydra magit)
  :hook ((find-file . (lambda ()
			(save-excursion
			  (goto-char (point-min))
			  (when (re-search-forward "^<<<<<<< " nil t)
			    (smerge-mode 1)))))

	 ( magit-diff-visit-file . (lambda ()
				     (when smerge-mode
				       (hydra-smerge/body))))))

(use-package vdiff
  :straight t)

(use-package code-review
  :disabled t
  :straight t
  :bind (:map forge-topic-mode-map
	      ("C-c r" . code-review-forge-pr-at-point)
	      :map code-review-feedback-section-map
	      ("k" . code-review-section-delete-comment)
	      :map code-review-local-comment-section-map
	      ("k" . code-review-section-delete-comment)
	      :map code-review-reply-comment-section-map
	      ("k" . code-review-section-delete-comment)
	      :map code-review-mode-map
	      ("C-c C-n" . code-review-comment-jump-next)
	      ("C-c C-p" . code-review-comment-jump-previous))
  :custom
  (code-review-db-database-file (expand-file-name "code-review-db.sqlite" poly-cache-dir))
  (code-review-log-file (expand-file-name "code-review-error.log" poly-cache-dir))
  :config
  (setq code-review-auth-login-marker 'forge)
  (setq code-review-gitlab-host "git.17usoft.com/api")
  ;; (setq code-review-gitlab-baseurl "git.17usoft.com")
  (setq code-review-gitlab-base-url "gitlab.com") ;;; default value
  (setq code-review-gitlab-graphql-host nil)
  ;; (setq code-review-gitlab-graphql-host "git.17usoft.com/api")
  )

#+end_src

****  Git sign-off line

Automatically add a git signoff line based on discovered environmental identity.

#+begin_src emacs-lisp :tangle no
(defun mb/auto-git-commit-signoff ()
  "Automatically add a git signoff line based on environmental identity"
  (beginning-of-buffer)
  (unless
      (or ;; Unless we're in a work repo or there's already a signoff line.
       (string-match-p (regexp-quote "/work/") default-directory)
       (word-search-forward "Signed-off-by" nil t))
    (apply #'git-commit-signoff (git-commit-self-ident))))

(add-hook 'git-commit-mode-hook #'mb/auto-git-commit-signoff)
#+end_src
Enable diff-hl in based on major modes.

**** WIP Commits

#+begin_src emacs-lisp
;; TODO: Unfinished. A literal WIP. Need to workaround the race that occurs due
;; to Magit git calls being async.
(defun mb/magit-wip-commit-push (msg)
  "Commit current unstaged changes and push to its upstream."
  (interactive "sCommit Message: ")
  (when (= 0 (length msg))
    (setq msg (format-time-string "WIP (Magit@%Y-%m-%d %H:%M:%S)" (current-time))))
  (when (and buffer-file-name (buffer-modified-p))
    (save-buffer))
  (magit-stage-modified)
  (magit-commit-create (list "-m" msg))
  (magit-push-current-to-pushremote nil))
#+end_src

#+begin_src emacs-lisp
  (straight-use-package 'diff-hl)
  (autoload 'diff-hl-mode "diff-hl" nil t)
  (autoload 'diff-hl-dired-mode "diff-hl-dired" nil t)

  (add-hook 'dired-mode-hook 'diff-hl-dired-mode)
  (add-hook 'prog-mode-hook 'diff-hl-mode)
  (add-hook 'conf-mode-hook 'diff-hl-mode)
#+end_src


Magit with cz

#+begin_src emacs-lisp
(use-package magit-cz
  :straight (magit-cz :host github :repo "yqrashawn/magit-cz")
  :after magit)
#+end_src

* Input method with emacs-rime

~librime~ is required for this feature.

~emacs-rime~ is the frontend of rime built with emacs input method API.

#+begin_src emacs-lisp
(defun +rime-predicate-is-back-quote-or-tilde ()
  (or (equal rime--current-input-key ?`)
      (equal rime--current-input-key ?~)))

(defun +rime-inline-predicate()
  (and (not (or (eq major-mode 'minibuffer-mode) (eq major-mode 'notdeft-mode)))
       (or (rime-predicate-space-after-cc-p)
	   (+rime-predicate-is-back-quote-or-tilde)
	   (rime-predicate-current-uppercase-letter-p))))

(defun +rime-disable-predicate()
  (and (not (or (eq major-mode 'minibuffer-mode) (eq major-mode 'notdeft-mode)))
       (or (rime-predicate-prog-in-code-p) (rime-predicate-after-alphabet-char-p)
	   (meow-normal-mode-p) (meow-motion-mode-p) (meow-keypad-mode-p))))

(use-package rime
  :straight (rime
	     :host github
	     :repo "DogLooksGood/emacs-rime"
	     :files (:defaults "lib.c" "Makefile"))
  :defer t
  :custom
  ;; Disable input method in non-insert state.
  (rime-disable-predicates '(+rime-disable-predicate))
  ;; Auto switch to inline ascii state when after a space after a non-ascii character.
  (rime-inline-predicates '(+rime-inline-predicate))
  (rime-translate-keybindings '("C-f" "C-b" "C-n" "C-p" "C-g"))
  (default-input-method "rime")
  ;; (rime-cursor "˰")
  ;; (rime-librime-root (concat user-emacs-directory "librime/dist"))
  (rime-librime-root "/opt/librime")
  (rime-emacs-module-header-root "/opt/local/include/emacs")
  (rime-show-preedit t)
  ;; (rime-show-candidate 'posframe)
  ;; (rime-show-candidate 'popup)
  (rime-show-candidate 'minibuffer)
  ;; (rime-posframe-properties (list :background-color "#202325"
  ;;				  :foreground-color "#ddddde" ;; "#dedddd"
  ;;				  :internal-border-width 6))
  ;; (rime-code-face
  ;;  '((t (:inherit default :background "#ffffff" :foreground "#000000"))))
  ;; (rime-disable-predicates
  ;;  '(evil-normal-state-p
  ;;    rime--after-alphabet-char-p
  ;;    rime--prog-in-code-p
  ;;    ))
  ;; (rime-share-data-dir "")
  (rime-user-data-dir (expand-file-name "rime" poly-local-dir))
  :bind
  (:map rime-active-mode-map
	("<tab>" . rime-inline-ascii)
	:map rime-mode-map
	("C-$" . rime-send-keybinding)
	("M-j" . rime-force-enable)))
#+end_src

** isearch-mb

deal with rime search in minibuffer

#+begin_src emacs-lisp
(use-package isearch-mb
  :straight t
  :custom
  ;; Match count next to the minibuffer prompt
  (isearch-lazy-count t)
  ;; Don't be stingy with history; default is to keep just 16 entries
  (search-ring-max 200)
  (regexp-search-ring-max 200)
  (isearch-regexp-lax-whitespace t)
  ;; Swiper style: space matches any sequence of characters in a line.
  (search-whitespace-regexp ".*?")
  ;; ;; Alternative: space matches whitespace, newlines and punctuation.
  ;; (search-whitespace-regexp "\\W+")
  ;; :bind
  ;; (("C-s" . isearch-forward-regexp)
  ;;  ("C-r" . isearch-backward-regexp))
  :config
  (isearch-mb-mode +1))
#+end_src

* Telegram client with Telega

~telegram-libtd~ is required for this feature.

Use Telega as Telegram client.

#+begin_src emacs-lisp
(use-package telega
  :straight (telega
	     :host github
	     :repo "zevlg/telega.el"
	     :branch "master"
	     :files (:defaults "contrib" "etc" "server" "Makefile"))
  :commands (telega)
  :defer t
  :custom
  ;; (telega-symbol-reply "?")
  (telega-root-show-avatars nil)
  ;; (telega-user-show-avatars nil)
  ;; (telega-avatar-factors-alist '((1 . (0.8 . 0.1))
  ;;				 (2 . (0.8 . 0.1))))
  (telega-animation-play-inline nil)
  (telega-server-libs-prefix "/usr/local")
  (telega-use-images t)
  ;; (telega-proxies
  ;;  (list
  ;;   '(:server "127.0.0.1" :port 6153 :enable nil
  ;;	:type (:@type "proxyTypeSocks5"))))
  (telega-directory (expand-file-name "telega" poly-cache-dir))
  :config
  ;; show previews for photo/video webpages
  (advice-add #'telega-ins--webpage :before-while
	      (lambda (msg &rest args)
		(let ((ht (telega--tl-get msg :content :web_page :type)))
		  (-contains? '("video" "photo") ht))))

  ;; (add-hook 'telega-chat-mode-hook
  ;;	    (lambda ()
  ;;	      (set (make-local-variable 'company-backends)
  ;;		   (append '(telega-company-emoji
  ;;			     telega-company-username
  ;;			     telega-company-hashtag)
  ;;			   (when (telega-chat-bot-p telega-chatbuf--chat)
  ;;			     '(telega-company-botcmd))))
  ;;	      ;; (company-mode 1)
  ;;	      ))
  (unbind-key (kbd "k") telega-msg-button-map)  ;; delete marked or at point (doubled with d)
  (unbind-key (kbd "e") telega-msg-button-map)  ;; msg-edit
  (define-key telega-msg-button-map (kbd "E") 'telega-msg-edit)
  (unbind-key (kbd "n") telega-msg-button-map)  ;; button-forward (seems to not differ from next link)
  (unbind-key (kbd "l") telega-msg-button-map)  ;; redisplay
  (unbind-key (kbd "h") telega-chat-button-map) ;; info (doubled with i)

  (defun +telega-open-file (file)
    (cond
     ;; ((member (downcase (file-name-extension file)) '("png" "jpg" "gif" "jpeg"))
     ;;  (start-process "telega-open-photo" nil "/sbin/imv" file))
     ((member (downcase (file-name-extension file)) '("mp4"))
      (start-process "telega-open-video" nil "/opt/local/bin/mpv" file))
     (t
      (find-file file))))
  (setq telega-open-message-as-file '(photo video)
	telega-open-file-function '+telega-open-file)
  )
#+end_src

* Directory environment support with direnv

#+begin_src emacs-lisp
  (straight-use-package 'direnv)

  (setq direnv-always-show-summary nil)

;;  (define-key toggle-map "e" 'direnv-mode)

  (autoload 'direnv-mode "direnv" nil t)
#+end_src

* saveplace
Save cursor position

#+begin_src emacs-lisp
(use-package saveplace
  :straight (:type built-in)
  :custom
  (save-place-file (expand-file-name "saveplace" poly-cache-dir))
  (save-place t)
  :config
  (save-place-mode 1))
#+end_src
* savehist

save minibuffer history

#+begin_src emacs-lisp
(use-package savehist
  :straight (:type built-in)
  :custom
  (savehist-file (expand-file-name "history" poly-cache-dir))
  :config
  (savehist-mode 1)
  (setq savehist-additional-variables
	'(kill-ring
	  log-edit-comment-ring
	  search-ring regexp-search-ring shell-command-history)))
#+end_src

* desktop
#+begin_src emacs-lisp :tangle no
(defun sanityinc/desktop-time-restore (orig &rest args)
  (let ((start-time (current-time)))
    (prog1
        (apply orig args)
      (message "Desktop restored in %.2fms"
               (sanityinc/time-subtract-millis (current-time)
                                               start-time)))))
(advice-add 'desktop-read :around 'sanityinc/desktop-time-restore)

(defun sanityinc/desktop-time-buffer-create (orig ver filename &rest args)
  (let ((start-time (current-time)))
    (prog1
        (apply orig ver filename args)
      (message "Desktop: %.2fms to restore %s"
               (sanityinc/time-subtract-millis (current-time)
                                               start-time)
               (when filename
                 (abbreviate-file-name filename))))))
(advice-add 'desktop-create-buffer :around 'sanityinc/desktop-time-buffer-create)

(use-package desktop
  :defer 2
  :straight (:type built-in)
  :init
  (setq desktop-dirname (expand-file-name "desktop/" poly-cache-dir))
  (setq desktop-save t
        desktop-load-locked-desktop t)
  (setq desktop-path                     (list desktop-dirname))
  ;; (setq desktop-path (list user-emacs-directory))
  :custom
  (desktop-auto-save-timeout 600)
  :config

  ;; https://github.com/purcell/emacs.d/blob/master/lisp/init-sessions.el
  ;; Save a bunch of variables to the desktop file.
  ;; For lists, specify the length of the maximal saved data too.
  ;; save a bunch of variables to the desktop file
  ;; for lists specify the len of the maximal saved data also
  (setq desktop-globals-to-save
	'((comint-input-ring        . 50)
          (compile-history          . 30)
          desktop-missing-file-warning
          (dired-regexp-history     . 20)
          (extended-command-history . 30)
          (face-name-history        . 20)
          (file-name-history        . 100)
          (grep-find-history        . 30)
          (grep-history             . 30)
          (ivy-history              . 100)
          (magit-revision-history   . 50)
          (minibuffer-history       . 50)
          (org-clock-history        . 50)
          (org-refile-history       . 50)
          (org-tags-history         . 50)
          (query-replace-history    . 60)
          (read-expression-history  . 60)
          (regexp-history           . 60)
          (regexp-search-ring       . 20)
          register-alist
          (search-ring              . 20)
          (shell-command-history    . 50)
          tags-file-name
          tags-table-list))

  ;; http://emacs.stackexchange.com/a/20036/115
  ;; fix warning upon restoring desktop save file
  (setq desktop-restore-frames nil)

  (defun rag/bury-star-buffers ()
    "Bury all star buffers."
    (mapc (lambda (buf)
            (when (string-match-p "\\`\\*.*\\*\\'" (buffer-name buf))
              (bury-buffer buf)))
          (buffer-list)))
  (add-hook 'desktop-after-read-hook #'rag/bury-star-buffers)

  (defun rag/restore-last-saved-desktop ()
    "Enable `desktop-save-mode' and restore the last saved desktop."
    (interactive)
    (setq desktop-path (list user-emacs-directory))
    (desktop-save-mode 1)
    (desktop-read))

  ;; (desktop-save-mode 0)
  (desktop-save-mode 1)
  ;; Add a hook when emacs is closed to we reset the desktop
  ;; modification time (in this way the user does not get a warning
  ;; message about desktop modifications)
  (add-hook 'kill-emacs-hook
            (lambda ()
              ;; Reset desktop modification time so the user is not bothered
              (setq desktop-file-modtime (nth 5 (file-attributes (desktop-full-file-name))))))
  :bind (("<S-f2>" . desktop-save-in-desktop-dir)
         ("<C-f2>" . rag/restore-last-saved-desktop)))

;; Restore histories and registers after saving
(setq-default history-length 100000)
(add-hook 'after-init-hook 'savehist-mode)
#+end_src

session

#+begin_src emacs-lisp
(use-package session
  :straight t
  :custom
  (session-save-file (expand-file-name "session" poly-cache-dir))
  (session-name-disable-regexp "\\(?:\\`'/tmp\\|\\.git/[A-Z_]+\\'\\)")
  (session-save-file-coding-system 'utf-8)
  :hook (after-init . session-initialize))
#+end_src
* embark

#+begin_src emacs-lisp
(use-package embark
  :straight t
  :ensure t
  :init
  (setq prefix-help-command #'embark-prefix-help-command)
  :bind
  (("C-." . embark-act)         ;; pick some comfortable binding
   ("C-;" . embark-dwim)        ;; good alternative: M-.
   ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'
  :config
  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
	       '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
		 nil
		 (window-parameters (mode-line-format . none)))))

(use-package embark-consult
  :straight t
  :after (embark consult)
  :demand t ; only necessary if you have the hook below
  ;; if you want to have consult previews as you move around an
  ;; auto-updating embark collect buffer
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))

(use-package docker-compose-mode
  :straight t)
#+end_src
* activity log
** activity-watch
#+begin_src emacs-lisp
(use-package activity-watch-mode
    :straight t
    :demand
    :config
    (global-activity-watch-mode))
#+end_src
** wakatime
#+begin_src emacs-lisp
(use-package wakatime-mode
    :straight t
    :init
    (setq +wakatime-hide-filenames t)
    (when IS-MAC
      (setq wakatime-cli-path "/usr/local/bin/wakatime"))
    :hook ((org-mode . wakatime-mode)
           (prog-mode . wakatime-mode))
    :config
    (global-wakatime-mode +1))
#+end_src

* vterm

#+begin_src emacs-lisp
(use-package vterm
  :straight (vterm :type git :flavor melpa
		   :files ("*" (:exclude ".dir-locals.el" ".gitignore" ".clang-format" ".travis.yml") "vterm-pkg.el")
		   :host github :repo "akermu/emacs-libvterm"
		   :no-native-compile t)
  :demand
  :commands (vterm ds/vterm)
  :custom
  (vterm-max-scrollback 10000)
  (vterm-timer-delay 0.01)
  (vterm-kill-buffer-on-exit t)
  (vterm-ignore-blink-cursor nil)
  (vterm-always-compile-module t)
  (vterm-shell "/opt/local/bin/zsh")
  (vterm-module-cmake-args "-DUSE_SYSTEM_LIBVTERM=yes")
  :init
  (defun poly/vterm-compile-auto-exit ()
    (when-let* ((vterm-build-buffer (get-buffer vterm-install-buffer-name))
		(buffer-str (with-current-buffer vterm-build-buffer (buffer-string))))
      (when (s-contains? "[100%] Built target vterm-module" buffer-str)
	(run-at-time 3 nil (lambda(buf)
			     (let ((win (get-buffer-window buf)))
			       (kill-buffer buf)
			       (delete-window win))) vterm-build-buffer))))
  (advice-add #'vterm-module-compile :after #'poly/vterm-compile-auto-exit)
  ;; (defun vterm-enter (&rest _)
  ;;   (interactive)
  ;;   (meow-insert-mode))

  ;; (defun vterm-buffer-change ()
  ;;   (when (derived-mode-p 'vterm-mode)
  ;;     (vterm-enter)))

  ;; (add-hook 'buffer-list-update-hook #'vterm-buffer-change)
  (when noninteractive
    (advice-add #'vterm-module-compile :override #'ignore)
    (provide 'vterm-module))
  :bind (:map vterm-mode-map
	      ("C-c t" . vterm-copy-mode)
	      ("C-x C-x" . ds/vterm-send-C-x)
	      ;; ("C-z" . vterm-send-C-z)
	      :map vterm-copy-mode-map
	      ("C-c t" . 'vterm-copy-mode))
  :config
  (add-to-list 'vterm-eval-cmds '("update-pwd" (lambda (path) (setq-local default-directory path))))
  (advice-add 'vterm-copy-mode-done :after
	      (lambda (&rest _) (funcall #'vterm-exit-visual-insert)))

  (defmacro poly/vterm-define-key (key)
    "Define a command that sends KEY."
    (declare (indent defun)
	     (doc-string 3))
    `(progn (defun ,(intern (format "poly/vterm-send-%s" key)) ()
	      ,(format "Sends %s to the libvterm."  key)
	      (interactive)
	      (vterm-send ,key))))

  (setq vterm-keymap-exceptions (remove "C-h" vterm-keymap-exceptions))
  (dolist (key '("C-h" "C-z" "C-s" "C-p" "C-n" "<backspace>" "DEL" "M-<left>" "M-<right>"))
    (eval `(poly/vterm-define-key ,key))
    (define-key vterm-mode-map (kbd key) (intern (format "poly/vterm-send-%s" key))))

  ;; (defun vterm-send-C-k-and-kill ()
  ;;   "Send `C-k' to libvterm, and put content in kill-ring."
  ;;   (interactive)
  ;;   (kill-ring-save (point) (vterm-end-of-line))
  ;;   (vterm-send-key "k" nil nil t))
  (add-hook 'vterm-mode-hook
	    (lambda ()
	      (global-hl-line-mode 0)
	      ;; (hide-mode-line-mode 0)
	      (setq confirm-kill-processes nil)
	      (setq hscroll-margin 0)
	      (set (make-local-variable 'buffer-face-mode-face) 'fixed-pitch)
	      (buffer-face-mode t)))
  (defun ds/vterm (&optional name)
    (interactive "MName: ")
    (if (< 0 (length name))
	(if (get-buffer name)
	    (switch-to-buffer name)
	  (vterm name))
      (vterm))))

(use-package vterm-toggle
  :straight t
  :when (memq window-system '(mac ns x))
  :bind (([f2] . mb/vterm-right-here)
	 ("C-<return>" . mb/vterm-right-here)
	 :map vterm-mode-map
	 ([f2] . mb/vterm-right-here))
  :custom
  (vterm-toggle-cd-auto-create-buffer nil)
  :config
  (defun poly/vterm-buffer(path)
    (when vterm-toggle--buffer-list
      (let* ((pwd)
	     (buf (cl-find-if
		   (lambda (b)
		     (setq pwd (with-current-buffer b default-directory))
		     (equal pwd path)) vterm-toggle--buffer-list)))
	(if buf (list buf pwd)
	  (let ((buf (car vterm-toggle--buffer-list)))
	    (list buf (with-current-buffer buf default-directory)))))))

  (defun poly/buffer-frame-same-p(buf1 buf2)
    (when-let* ((win1 (get-buffer-window buf1))
		(frame1 (window-frame win1))
		(win2 (get-buffer-window buf2))
		(frame2 (window-frame win2)))
      (equal frame1 frame2)))

  (defun +vterm/here (arg)
    "Open a terminal buffer in the current window at project root.

    If prefix ARG is non-nil, cd into `default-directory' instead of project root.

    Returns the vterm buffer."
    (interactive "P")
    (let* ((project-root (or default-directory))
	   (dir
	    (if arg
		default-directory
	      project-root))
	   (result (poly/vterm-buffer dir))
	   (cd-cmd (concat "cd " dir))
	   (curr-buffer (current-buffer))
	   (vterm-buffer)
	   (vterm-win)
	   (vterm-pwd))
      (when result
	(setq vterm-buffer (car result))
	(setq vterm-pwd (car (cdr result))))

      (if vterm-buffer
	  (progn
	    (with-current-buffer vterm-buffer
	      (when (bound-and-true-p read-only-mode)
		(read-only-mode -1)))

	    (setq vterm-win (get-buffer-window vterm-buffer))
	    (if (equal vterm-pwd (file-truename dir))
		(if (and (poly/buffer-frame-same-p vterm-buffer curr-buffer) (window-live-p vterm-win))
		    (select-window vterm-win nil)
		  (if (equal (length vterm-toggle--buffer-list) 1)
		      (vterm-toggle)
		    (switch-to-buffer vterm-buffer)))
	      (with-current-buffer vterm-buffer
		(vterm-send-string cd-cmd t)
		(vterm-send-return)))
	    (if (and (poly/buffer-frame-same-p vterm-buffer curr-buffer) (window-live-p vterm-win))
		(select-window vterm-win nil)
	      (switch-to-buffer vterm-buffer)))
	(if (equal (file-truename default-directory) (file-truename dir))
	    (vterm-toggle-insert-cd)
	  (vterm-toggle-cd dir)))
      ;; (vterm-toggle-show t)
      ))

  (defun mb/vterm-right-here ()
    (interactive)
    (if (derived-mode-p 'vterm-mode)
	(vterm-toggle)
      (let ((current-prefix-arg '-))
	(call-interactively '+vterm/here))))

  )

(use-package meow-vterm
  :straight (meow-vterm
	     :host github
	     :repo "accelbread/meow-vterm")
  :config
  (meow-vterm-enable))
#+end_src

* Hideshow

 text folding minor mode

#+begin_src emacs-lisp
;; (defconst hideshow-folded-face '((t (:inherit 'font-lock-comment-face :box t))))
;; (defun hideshow-folded-overlay-fn (ov)
;;   (when (eq 'code (overlay-get ov 'hs))
;;     (let* ((nlines (count-lines (overlay-start ov) (overlay-end ov)))
;;            (info (format " ... #%d " nlines)))
;;       (overlay-put ov 'display (propertize info 'face hideshow-folded-face)))))
;; (setq hs-set-up-overlay 'hideshow-folded-overlay-fn)

;;  (defvar my-hs-hide nil
;;       "Current state of hideshow for toggling all.")
;;  (defun my-toggle-hideshow-all ()
;;       "Toggle hideshow all."
;;       (interactive)
;;       (setq my-hs-hide (not my-hs-hide))
;;       (if my-hs-hide
;;           (hs-hide-all)
;;         (hs-show-all)))

(use-package hideshow
  :straight (:type built-in)
  :diminish hs-minor-mode
  :bind (("C-`" . hs-toggle-hiding)
	 ("C-c <left>" . hs-hide-block)
         ("C-c <right>" . hs-show-block)
         ("C-c <up>" . hs-hide-all)
         ("C-c <down>" . hs-show-all))
  ;; Nicer code-folding overlays (with fringe indicators)
  :hook (prog-mode . hs-minor-mode)
  :custom
  (hs-hide-comments-when-hiding-all nil))
#+end_src

* gpg

#+begin_src emacs-lisp
;; enable EasyPG handling
;; gpg-agent confuses epa when getting passphrase
(defun my-squash-gpg (&rest ignored-frame)
  "Kill any GPG_AGENT_INFO in our environment."
  (setenv "GPG_AGENT_INFO" nil))

(use-package epa-file
    :straight (:type built-in)
    :pdump nil
    :ensure t
    ;; :if (string-match "socrates" (system-name))
    :commands epa-file-enable
    ;; :init (epa-file-enable)
    ;; :custom
    :config
    (setq     epa-file-name-regexp "\\.gpg\\(~\\|\\.~[0-9]+~\\)?\\'\\|\\.asc"
	      ;; (epa-file-name-regexp "\\.\\(gpg\\|asc\\)$")
	      epa-file-cache-passphrase-for-symmetric-encryption t
	      epa-file-select-keys nil
	      epg-gpg-program "/opt/local/bin/gpg2")
    (add-hook 'after-make-frame-functions 'my-squash-gpg t)
    (my-squash-gpg)
    (epa-file-name-regexp-update)
    (epa-file-enable))


(use-package auth-source-pass
    :straight (:type built-in)
    :ensure t
    ;; :if (file-exists-p "~/.password-store")
    :config (auth-source-pass-enable))

(use-package pinentry
    :straight t
    :config
    (pinentry-start)
    (setq epa-pinentry-mode 'loopback))
#+end_src

* Mail

** mu4e

#+begin_src emacs-lisp :tangle no
(defun no-auto-fill ()
  "Turn off 'auto-fill-mode'."
  (auto-fill-mode -1))

(use-package mu4e
  :straight (mu4e :host github
		  :files ("mu4e/*")
		  :repo "djcb/mu"
		  :branch "release/1.6")
  :commands mu4e
  :defer nil
  :custom
  (mu4e-mu-binary "/opt/local/bin/mu")
  (mu4e-update-interval (* 60 10))
  (mu4e-get-mail-command "/usr/local/bin/fdm fetch")
  (mu4e-view-show-addresses t)
  (mu4e-context-policy 'pick-first)
  (mu4e-maildir "~/Mail")
  (mu4e-attachment-dir "~/Downloads")
  (mu4e-headers-skip-duplicates t)
  (mu4e-headers-visible-lines 20)
  (mu4e-view-show-addresses 'long)
  (mu4e-compose-in-new-frame t)
  (mu4e-index-cleanup t)
  (mu4e-compose-complete-only-personal t)
  (mu4e-compose-dont-reply-to-self t)
  (mu4e-change-filenames-when-moving t)
  (mu4e-index-lazy-check nil)
  (message-kill-buffer-on-exit t)
  (mu4e-hide-index-messages t)
  (mu4e-view-show-images t)
  (mu4e-view-image-max-width 800)
  (mu4e-confirm-quit nil)
  (mu4e-completing-read-function 'completing-read)
  (mu4e-compose-format-flowed t)
  (mu4e-view-use-gnus t)
  (mu4e-headers-results-limit 2048)
  (mu4e-headers-advance-after-mark t)
  (mu4e-headers-auto-update t)
  (mu4e-headers-include-related nil)
  (mu4e-headers-show-threads nil)
  (mu4e-split-view nil)
  (mu4e-headers-date-format "%Y-%m-%d %H:%M")
  ;; (mu4e-headers-date-format "%y-%m-%d")
  ;; (mu4e-headers-time-format " %R")
  ;; (message-send-mail-function 'message-send-mail-with-sendmail)
  :hook ((mu4e-view-mode . visual-line-mode)
	 (mu4e-compose-mode . (lambda ()
				(visual-line-mode)
				(use-hard-newlines -1)
				(flyspell-mode)))
	 (mu4e-view-mode . (lambda() ;; try to emulate some of the eww key-bindings
			     (local-set-key (kbd "<tab>") 'shr-next-link)
			     (local-set-key (kbd "<backtab>") 'shr-previous-link)))
	 (mu4e-headers-mode . (lambda ()
				(interactive)
				(setq mu4e-headers-fields
                                      `((:human-date . 25) ;; alternatively, use :date
					(:flags . 6)
					(:from . 22)
					(:thread-subject . ,(- (window-body-width) 70)) ;; alternatively, use :subject
					(:size . 7))))))
  :config
  ;; (require 'mu4e)
  (require 'mu4e-vars)
  (require 'mu4e-contrib)
  (require 'mu4e-icalendar)
  (require 'mu4e-view)
  (require 'mu4e-org)
  (setq mu4e-org-link-query-in-headers-mode nil)
  (setq mh-mime-save-parts-directory (expand-file-name "Mail/attachments/" "~"))
  (setq mm-default-directory mh-mime-save-parts-directory)

  (add-hook 'mu4e-compose-mode-hook 'epa-mail-mode)
  (add-hook 'mu4e-compose-mode-hook 'visual-line-mode)
  (add-hook 'mu4e-view-mode-hook 'epa-mail-mode)
  (add-hook 'mu4e-view-mode-hook 'visual-line-mode)
  (add-hook 'mu4e-view-mode-hook 'variable-pitch-mode)
  ;; (add-hook 'mu4e-view-mode-hook 'olivetti-mode)
  (add-hook 'mu4e-compose-mode-hook #'no-auto-fill)
  (add-to-list 'mu4e-view-actions
               '("View In Browser" . mu4e-action-view-in-browser) t)

  (defun timu-func-mu4e-action-save-to-pdf (msg)
    "Save mu4e MSG as a pdf.
The `wkhtmltopdf' cli command is a dependency.
Credit: https://github.com/malb/emacs.d/blob/master/malb.org."
    ;; (let* ((date (mu4e-message-field msg :date))
    ;;        (infile (mu4e~write-body-to-html msg))
    ;;        (outfile (format-time-string "%Y-%m-%d%H%M%S.pdf" date)))
    ;; (with-temp-buffer
    ;;   (shell-command
    ;;    (format "wkhtmltopdf %s ~/Desktop/%s" infile outfile) t)))
    (let* ((html-part
	    (seq-find (lambda (handle)
			(equal (mm-handle-media-type (cdr handle)) "text/html"))
		      gnus-article-mime-handle-alist))
	   (date (mu4e-message-field msg :date))
	   (outfile (format-time-string "%Y-%m-%d%H%M%S.pdf" date))
	   )
      (if html-part
	  ;; (gnus-article-inline-part (car html-part))
	  (message "save file to %s html-part: %s" outfile (car html-part))

	  (with-temp-buffer
	    (shell-command
	     (format "wkhtmltopdf %s ~/Desktop/%s" (car html-part) outfile) t)))
      ;; (mu4e-warn "No html part in this message")
      )
    )


  (add-to-list 'mu4e-view-actions
               '("Pdf" . timu-func-mu4e-action-save-to-pdf) t)

  (with-eval-after-load 'org
    (setq gnus-icalendar-org-capture-file +org-mu4e-icalendar-org-capture-file
          gnus-icalendar-org-capture-headline '("Meetings")
          mu4e-icalendar-diary-file +org-mu4e-icalendar-org-capture-file
          mu4e-icalendar-trash-after-reply t))
  (setq gnus-icalendar-org-enabled-p t)

  ;; use imagemagick, if available
  (when (fboundp 'imagemagick-register-types)
    (imagemagick-register-types))

  (defun poly/mu4e-icalendar-setup ()
    "Perform the necessary initialization to use mu4e-icalendar."
    (gnus-icalendar-setup)
    (cl-defmethod gnus-icalendar-event:inline-reply-buttons :around
      ((event gnus-icalendar-event) handle)
      (if (and (boundp 'mu4e~view-rendering)
               (gnus-icalendar-event:rsvp event))
          (let ((method (gnus-icalendar-event:method event)))
            (when (or (string= method "REQUEST") (string= method "PUBLISH") (string= method "CANCEL"))
              `(("Accept" mu4e-icalendar-reply (,handle accepted ,event))
		("Tentative" mu4e-icalendar-reply (,handle tentative ,event))
		("Decline" mu4e-icalendar-reply (,handle declined ,event)))))
	(cl-call-next-method event handle))))
  (mu4e-icalendar-setup)

  (poly/mu4e-icalendar-setup)
  (gnus-icalendar-org-setup)

  ;; from https://github.com/fgallina/dotemacs/blob/master/init.el
  (defun my:mu4e-toggle-headers-include-related ()
    "Toggle `mu4e-headers-include-related' and refresh."
    (interactive)
    (setq mu4e-headers-include-related
          (not mu4e-headers-include-related))
    (mu4e-headers-rerun-search))

  (define-key 'mu4e-headers-mode-map "o"
    'my:mu4e-toggle-headers-include-related)

  (setq mail-user-agent 'mu4e-user-agent)

  (setq-default mu4e-html2text-command 'mu4e-shr2text)

  (unless (fboundp 'mu4e--main-action-str)
    (defalias 'mu4e--main-action-str 'mu4e~main-action-str))

  (add-to-list 'mu4e-header-info-custom
               '(:mail-directory . (:name "Mail Directory"
					  :shortname "Dir"
					  :help "Mail Storage Directory"
					  :function (lambda (msg)
						      (or (mu4e-message-field msg :maildir) "")))))
  ;; (setq mu4e-headers-fields '(;; (:mail-directory . 20)
  ;; 			      (:human-date    .   12)
  ;; 			      (:flags         .    6)
  ;; 			      (:mailing-list  .   10)
  ;; 			      (:from          .   22)
  ;; 			      (:subject       .   nil)))
  )

  ;;;###autoload
(define-mail-user-agent 'mu4e-user-agent
  'mu4e~compose-mail
  'message-send-and-exit
  'message-kill-buffer
  'message-send-hook)
;; Without this `mail-user-agent' cannot be set to `mu4e-user-agent'
;; through customize, as the custom type expects a function.  Not
;; sure whether this function is actually ever used; if it is then
;; returning the symbol is probably the correct thing to do, as other
;; such functions suggest.
(defun mu4e-user-agent ()
  "Return the `mu4e-user-agent' symbol."
  'mu4e-user-agent)

(use-package mu4e-maildirs-extension
  :straight t
  :after mu4e
  :custom
  (mu4e-maildirs-extension-fake-maildir-separator "\\.")
  :config
  (mu4e-maildirs-extension))

(use-package mu4e-alert
  :straight t
  :after mu4e
  :hook (after-init . mu4e-alert-enable-notifications)
  :custom
  (mu4e-alert-notify-repeated-mails nil)
  :config
  (mu4e-alert-enable-notifications)
  ;; (setq mu4e-enable-notifications t)
  (setq mu4e-alert-set-default-style 'notifier)
  ;; (setq mu4e-alert-set-default-style (if (eq system-type 'darwin)
  ;;                                        'notifier '(notifications)))
  (mu4e-alert-enable-mode-line-display)
  (defun gjstein-refresh-mu4e-alert-mode-line ()
    (interactive)
    (mu4e~proc-kill)
    (mu4e-alert-enable-mode-line-display))
  (run-with-timer 0 60 'gjstein-refresh-mu4e-alert-mode-line)
  (setq mu4e-alert-interesting-mail-query
	(concat "(maildir:/Work ) AND flag:unread "
		;; "OR "
		)))

(use-package olivetti
  :straight t)

(require 'epg-config)

(setq-default mml2015-use 'epg
	      mml2015-encrypt-to-self t
	      mml2015-sign-with-sender t)

(use-package mu4e-marker-icons
  :straight t
  :after mu4e
  :init (mu4e-marker-icons-mode 1)
  (defcustom v/message-attachment-intent-re
    (regexp-opt '("I attach"
		  "I have included"
		  "I've included"
                  "attached"
                  "attachment"
                  "pdf"))
    "A regex which - if found in the message, and if there is no
attachment - should launch the no-attachment warning.")

  (defcustom v/message-attachment-reminder
    "Are you sure you want to send this message without any attachment? "
    "The default question asked when trying to send a message
containing `v/message-attachment-intent-re' without an
actual attachment.")

  (defun v/message-warn-if-no-attachments ()
    "Ask the user if s?he wants to send the message even though
there are no attachments."
    (when (and (save-excursion
	         (save-restriction
		   (widen)
		   (goto-char (point-min))
		   (re-search-forward v/message-attachment-intent-re nil t)))
	       (not (v/message-attachment-present-p)))
      (unless (y-or-n-p v/message-attachment-reminder)
        (keyboard-quit))))(defcustom v/message-attachment-intent-re
    (regexp-opt '("I attach"
		  "I have included"
		  "I've included"
                  "attached"
                  "attachment"
                  "pdf"))
    "A regex which - if found in the message, and if there is no
attachment - should launch the no-attachment warning.")

  (defcustom v/message-attachment-reminder
    "Are you sure you want to send this message without any attachment? "
    "The default question asked when trying to send a message
containing `v/message-attachment-intent-re' without an
actual attachment.")

  (defun v/message-warn-if-no-attachments ()
    "Ask the user if s?he wants to send the message even though
there are no attachments."
    (when (and (save-excursion
	         (save-restriction
		   (widen)
		   (goto-char (point-min))
		   (re-search-forward v/message-attachment-intent-re nil t)))
	       (not (v/message-attachment-present-p)))
      (unless (y-or-n-p v/message-attachment-reminder)
        (keyboard-quit))))  (setq mu4e-headers-flagged-mark   '("F" . "🚩 "))
  (setq mu4e-headers-unread-mark    '("u" . "✉️ "))
  (setq mu4e-headers-draft-mark     '("D" . "🚧 "))
  (setq mu4e-headers-new-mark       '("N" . "✨ "))
  (setq mu4e-headers-passed-mark    '("P" . "↪ "))
  (setq mu4e-headers-replied-mark   '("R" . "↩ "))
  (setq mu4e-headers-seen-mark      '("S" . " "))
  (setq mu4e-headers-trashed-mark   '("T" . "🗑️"))
  (setq mu4e-headers-attach-mark    '("a" . "📎 "))
  (setq mu4e-headers-encrypted-mark '("x" . "🔑 "))
  (setq mu4e-headers-signed-mark    '("s" . "🖊 ")))

;; (use-package validate
;;   :straight t)

(use-package message
  :straight (:type built-in)
  :hook ((message-send . v/message-warn-if-no-attachments)
         (message-mode . turn-on-orgtbl))
  :after mu4e
  :config
  ;; (setq message-send-mail-function 'smtpmail-send-it)
  ;; (require 'validate)
  ;; (validate-setq mail-user-agent 'mu4e-user-agent)
  ;; (validate-setq read-mail-command 'mu4e)
  ;; From http://mbork.pl/2016-02-06_An_attachment_reminder_in_mu4e
  (defun v/message-attachment-present-p ()
    "Return t if an attachment is found in the current message."
    (save-excursion
      (save-restriction
        (widen)
        (goto-char (point-min))
        (when (search-forward "<#part" nil t) t))))

  (defcustom v/message-attachment-intent-re
    (regexp-opt '("I attach"
		  "I have included"
		  "I've included"
                  "attached"
                  "attachment"
                  "pdf"))
    "A regex which - if found in the message, and if there is no
attachment - should launch the no-attachment warning.")

  (defcustom v/message-attachment-reminder
    "Are you sure you want to send this message without any attachment? "
    "The default question asked when trying to send a message
containing `v/message-attachment-intent-re' without an
actual attachment.")

  (defun v/message-warn-if-no-attachments ()
    "Ask the user if s?he wants to send the message even though
there are no attachments."
    (when (and (save-excursion
	         (save-restriction
		   (widen)
		   (goto-char (point-min))
		   (re-search-forward v/message-attachment-intent-re nil t)))
	       (not (v/message-attachment-present-p)))
      (unless (y-or-n-p v/message-attachment-reminder)
        (keyboard-quit))))
  )
#+end_src

** notmuch
#+begin_src emacs-lisp :tangle no
(use-package notmuch
  :disabled t
  :straight t
  :commands notmuch
  :bind (("C-c m" . notmuch)
         :map notmuch-show-mode-map (("D" . apm-notmuch-toggle-deleted)
                                     ("J" . apm-notmuch-toggle-spam))
         :map notmuch-search-mode-map (("D" . apm-notmuch-toggle-deleted)
                                       ("J" . apm-notmuch-toggle-spam))
         :map notmuch-tree-mode-map (("D" . apm-notmuch-toggle-deleted)
                                     ("J" . apm-notmuch-toggle-spam))
	 :map notmuch-show-part-map (("V" . notmuch-view-html)))
  :init
  (setenv "XAPIAN_CJK_NGRAM" "1")
  :custom
  (notmuch-show-logo nil)
  ;; (notmuch-wash-wrap-lines-length 150)
  (notmuch-search-oldest-first nil)
  (mail-user-agent 'message-user-agent)
  ;; (notmuch-wash-wrap-lines-length 80)
  (notmuch-tree-show-out t)
  (notmuch-hello-thousands-separator ",")
  ;; (notmuch-address-command "notmuch-addrlookup")
  (notmuch-address-command nil)
  (notmuch-address-use-company nil)
  (notmuch-address-internal-completion '(received nil))
  (notmuch-mua-hidden-headers nil)
  (notmuch-column-control t)
  ;;; Email composition
  (notmuch-mua-compose-in 'current-window)
  (notmuch-mua-hidden-headers nil) ; TODO 2021-05-12: Review hidden headers
  ;; (notmuch-address-command nil)    ; FIXME 2021-05-13: Make it work with EBDB
  (notmuch-address-use-company nil)
  (notmuch-address-internal-completion '(received nil))
  (notmuch-always-prompt-for-sender t)
  (notmuch-mua-cite-function 'message-cite-original-without-signature)
  (notmuch-mua-reply-insert-header-p-function 'notmuch-show-reply-insert-header-p-never)
  ;; (notmuch-mua-user-agent-function #'notmuch-mua-user-agent-full)
  (notmuch-mua-user-agent-function #'notmuch-mua-user-agent-notmuch)
  (notmuch-maildir-use-notmuch-insert t)
  (notmuch-crypto-process-mime t)
  (notmuch-crypto-get-keys-asynchronously t)
;;; Reading messages
  (notmuch-show-relative-dates t)
  (notmuch-show-all-multipart/alternative-parts t)
  (notmuch-show-indent-messages-width 2)
  (notmuch-show-indent-multipart nil)
  (notmuch-show-part-button-default-action 'notmuch-show-save-part)
  (notmuch-wash-citation-lines-prefix 6)
  (notmuch-wash-citation-lines-suffix 6)
  (notmuch-wash-wrap-lines-length 100)
  (shr-use-colors nil)
  (notmuch-show-text/html-blocked-images nil)  ; enable images
  ;; (notmuch-show-text/html-blocked-images ".") ; block everything
  (notmuch-unthreaded-show-out nil)
  (notmuch-message-headers '("Subject" "To" "Cc" "Bcc" "Date" "Reply-To" "User-Agent"))
  ;; (notmuch-message-headers '("To" "Cc" "Subject" "Date"))
  (notmuch-message-headers-visible t)
  (notmuch-hello-sections '(notmuch-hello-insert-header
                            notmuch-hello-insert-saved-searches
                            notmuch-hello-insert-search
                            notmuch-hello-insert-recent-searches
                            notmuch-hello-insert-alltags
                            notmuch-hello-insert-footer))
  (notmuch-show-all-tags-list t)
  ;;   '(notmuch-draft-folder "top/Drafts")
  ;; '(notmuch-fcc-dirs "top/Sent")
  :config
  ;; (unless (string= (system-name) "spicy")
  ;;   (setq notmuch-command "remote-notmuch.sh"))
  ;;; remote-notmuch should look like:

  (define-key notmuch-show-mode-map "d"
    (lambda ()
      "toggle deleted tag for message"
      (interactive)
      (if (member "deleted" (notmuch-show-get-tags))
          (notmuch-show-tag (list "-deleted"))
        (notmuch-show-tag (list "+deleted")))))

  ;; (eval-after-load 'notmuch-show
  ;;   '(define-key notmuch-show-mode-map "`" 'notmuch-show-apply-tag-macro))
  ;; (setq notmuch-show-tag-macro-alist
  ;; 	(list
  ;; 	 '("m" "+notmuch::patch" "+notmuch::moreinfo" "-notmuch::needs-review")))

  (setq notmuch-search-result-format
        '(("date" . "%12s  ")
          ("count" . "%-7s  ")
          ("authors" . "%-20s  ")
          ("subject" . "%-80s  ")
          ("tags" . "(%s)")))

  (setq notmuch-tree-result-format
        '(("date" . "%12s  ")
          ("authors" . "%-20s  ")
          ((("tree" . "%s")
            ("subject" . "%s"))
           . " %-80s  ")
          ("tags" . "(%s)")))

  (setq notmuch-search-line-faces
        '(("unread" . notmuch-search-unread-face)
          ("flag" . notmuch-search-flagged-face)))
  (setq notmuch-show-empty-saved-searches t)

  (setq notmuch-draft-tags '("+draft")
	notmuch-show-mark-read-tags '("-unread")
	notmuch-message-forwarded-tags '("+forwarded")
	notmuch-message-replied-tags '("+replied")
	notmuch-archive-tags '("-inbox" "+archived"))

  ;; (add-to-list 'corfu-excluded-modes 'notmuch-message-mode)
  ;; (add-to-list 'corfu-excluded-modes 'org-msg-edit-mode)

  (defun notmuch-show-apply-tag-macro (key)
    (interactive "k")
    (let ((macro (assoc key notmuch-show-tag-macro-alist)))
      (apply 'notmuch-show-tag-message (cdr macro))))

  (define-key notmuch-show-mode-map "r" 'notmuch-show-reply)
  (define-key notmuch-show-mode-map "R" 'notmuch-show-reply-sender)

  (define-key notmuch-search-mode-map "r" 'notmuch-search-reply-to-thread)
  (define-key notmuch-search-mode-map "R" 'notmuch-search-reply-to-thread-sender)


  (defun apm-notmuch-toggle-tag (tag)
    "Toggle TAG for the current message returning t if we set it."
    (let ((gettagsfun nil)
          (tagfun nil))
      (pcase major-mode
        ('notmuch-search-mode
         (setq gettagsfun #'notmuch-search-get-tags)
         (setq tagfun #'notmuch-search-tag))
        ('notmuch-show-mode
         (setq gettagsfun #'notmuch-show-get-tags)
         (setq tagfun #'notmuch-show-tag))
        ('notmuch-tree-mode
         (setq gettagsfun #'notmuch-tree-get-tags)
         (setq tagfun #'notmuch-tree-tag))
        (_
         (user-error "Must be called from notmuch mode")))
      (if (member tag (funcall gettagsfun))
          (funcall tagfun (list (concat "-" tag)))
        (funcall tagfun (list (concat "+" tag))))
      ;; return whether it is now set or not
      (member tag (funcall gettagsfun))))
  (defun apm-notmuch-toggle-deleted ()
    "Toggle the deleted tag for the current message."
    (interactive)
    (apm-notmuch-toggle-tag "deleted"))
  (defun apm-notmuch-toggle-spam ()
    "Toggle the spam tag for the current message."
    (interactive)
    (if (apm-notmuch-toggle-tag "spam")
        (when-let ((url (notmuch-show-get-header :X-MailControl-ReportSpam)))
          (and (y-or-n-p "Do you also want to report this message as spam to mailcontrol? ")
               (eww-browse-url url)))))

  (setq mail-user-agent 'notmuch-user-agent)
  ;; (define-key notmuch-tree-mode-map "r" (notmuch-tree-close-message-pane-and #'notmuch-show-reply))
  ;; (define-key notmuch-tree-mode-map "R" (notmuch-tree-close-message-pane-and #'notmuch-show-reply-sender))
  ;;;
  ;;; #!/usr/bin/env bash
  ;;; printf -v ARGS "%q " "$@"
  ;;; exec ssh notmuch notmuch ${ARGS}

  ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
  (setq read-extended-command-predicate #'command-completion-default-include-p)

  ;; In non-programming-buffers, we don't want `pcomplete-completions-at-point'
  ;; or 't' which seems to complete everything.
  (defun ash/fix-completion-for-nonprog-buffers ()
    (setq completion-at-point-functions
          (-remove-item t (append (-remove-item #'pcomplete-completions-at-point completion-at-point-functions)
                                  '(cape-file cape-abbrev cape-rfc1345)))))
  (add-hook 'org-mode-hook #'ash/fix-completion-for-nonprog-buffers)
  (add-hook 'notmuch-message-mode-hook #'ash/fix-completion-for-nonprog-buffers)

  ;;; Hooks and key bindings
  (add-hook 'notmuch-mua-send-hook #'notmuch-mua-attachment-check)
  (remove-hook 'notmuch-show-hook #'notmuch-show-turn-on-visual-line-mode)
  (add-hook 'notmuch-show-hook (lambda () (setq-local header-line-format nil)))

  (require 'gnus-art)
  (require 'mm-util)
  (defun notmuch-view-html ()
    "Show current MSG in browser if it includes an HTML-part.
The variables `browse-url-browser-function',
`browse-url-handlers', and `browse-url-default-handlers'
determine which browser function to use."
    (interactive)
    (let* ((filename (notmuch-show-get-filename))
	   (gnus-article-buffer "*nomuch-article*")
	   (max-specpdl-size 4096)
           (mm-decrypt-option 'known)
	   (ct (mail-fetch-field "Content-Type"))
           (ct (and ct (mail-header-parse-content-type ct)))
           (charset (mail-content-type-get ct 'charset))
           (charset (and charset (intern charset)))
           (mu4e~view-rendering t); Needed if e.g. an ics file is buttonized
           (gnus-article-emulate-mime t)
           (gnus-unbuttonized-mime-types '(".*/.*"))
           (gnus-buttonized-mime-types
            (append (list "multipart/signed" "multipart/encrypted")
                    gnus-buttonized-mime-types))
           (gnus-newsgroup-charset
            (if (and charset (coding-system-p charset)) charset
              (detect-coding-region (point-min) (point-max) t))))

      ;; if article buffer exist, kill it then create a new one
      (when (bufferp gnus-article-buffer)
	(kill-buffer gnus-article-buffer))

      (with-current-buffer (get-buffer-create gnus-article-buffer)
	(let ((inhibit-read-only t)
	      ;; (make-temp-file mm-make-temp-file)
	      )
	  (erase-buffer)
	  (insert-file-contents-literally
	   filename nil nil nil t))
	(mm-enable-multibyte)
	(run-hooks 'gnus-article-decode-hook)
	(gnus-article-prepare-display)
	(with-temp-buffer
	  (insert-file-contents-literally
	   filename nil nil nil t)
	  (run-hooks 'gnus-article-decode-hook)
	  (let ((header (cl-loop for field in '("from" "to" "cc" "date" "subject")
				 when (message-fetch-field field)
				 concat (format "%s: %s\n" (capitalize field) it)))
		(parts (mm-dissect-buffer t t)))
	    ;; If singlepart, enforce a list.
	    (when (and (bufferp (car parts))
                       (stringp (car (mm-handle-type parts))))
              (setq parts (list parts)))
	    ;; Process the list
	    (unless (gnus-article-browse-html-parts parts header)
              (message "Message does not contain a \"text/html\" part"))
	    (mm-destroy-parts parts))))
      ;; kill temp article buffer
      (mm-destroy-parts gnus-article-mime-handles)
      (kill-buffer gnus-article-buffer)))
  )

(use-package notmuch-capf
  :straight (notmuch-capf
             :host github
             :repo "tpeacock19/notmuch-capf"))

;; (use-package notmuch-labeler
;;   :straight t
;;   :commands notmuch-labeler-rename
;;   :defer t
;;   :after notmuch
;;   )

;; (use-package notmuch-bookmarks
;;   :straight t
;;   :after notmuch
;;   :config
;;   (notmuch-bookmarks-mode))

;; (use-package notmuch-alert
;;   :straight (notmuch-alert
;;              :host github
;;              :repo "publicimageltd/notmuch-alerts")
;;   :after notmuch-bookmarks
;;   :config
;;   (notmuch-alert-mode)
;;   (defun notmuch-alert-unread-attachment ()
;;     "Create a new alert object for unread mails with attachment."
;;     (make-notmuch-alert :filter "date:today"
;; 			:description "Check for mails from today"
;; 			:format-string "%d mails from today"))
;;   (defun notmuch-alert-unread-attachment ()
;;     "Create a new alert object for unread mails with attachment."
;;     (make-notmuch-alert :filter "date:today"
;; 			:description "Check for mails from today"
;; 			:format-string "%d mails from today"))
;;   :bind*
;;   (:map global-map
;; 	("<f3>" . notmuch-alert-visit))
;;   )

(use-package notmuch-notify
  :ensure t
  :straight (notmuch-notify :host github :repo "firmart/notmuch-notify"
			    :files (:defaults "*.png" "*.wav"))
  ;; (Recommended) activate stats message when refreshing `notmuch-hello' buffer
  :hook (notmuch-hello-refresh . notmuch-notify-hello-refresh-status-message)
  :custom
  ;; (notmuch-notify-excluded-tags '("Org-Mode" "FromMe"))
  (notmuch-notify-refresh-interval 300)
  (alert-default-style 'notifier)
  (notmuch-notify-alert-profiles
   `((:name "inbox"
	    :search-term "tag:inbox"
	    :severity urgent
	    :title "Notmuch inbox:"
	    :icon "/Applications/MacPorts/EmacsMac.app/Contents/Resources/Emacs.icns"
	    ;; :icon ,(expand-file-name "straight/build/notmuch-notify/notmuch-logo.png" straight-base-dir)
	    :audio ,(expand-file-name "straight/build/notmuch-notify/emailreceived.wav" straight-base-dir))
     (:name "default")))
  :config
  ;; (Recommended) activate system-wise notification timer
  (notmuch-notify-set-refresh-timer))

(with-eval-after-load 'notmuch-update
  (setq notmuch-update-command "/usr/local/bin/fdm fetch && notmuch new")
  (setq notmuch-update-interval (* 5 60))
  (defun splinter-notmuch-refresh-non-show-buffers ()
    "Invoke `notmuch-refresh-this-buffer' on all notmuch major-mode buffers
except for `notmuch-show-mode' buffers."
    (interactive)
    (dolist (buffer (buffer-list))
      (let ((buffer-mode (buffer-local-value 'major-mode buffer)))
        (when (memq buffer-mode '(notmuch-tree-mode notmuch-search-mode notmuch-hello-mode))
          (with-current-buffer buffer
            (notmuch-refresh-this-buffer))))))
  (add-hook 'notmuch-hello-mode-hook  #'notmuch-update-start)
  (bind-key "u" #'notmuch-update notmuch-common-keymap))
#+end_src

** GNUS

#+begin_src emacs-lisp :tangle no
(use-package gnus
  :straight (:type built-in)
  :ensure t
  ;; :straight (nnhackernews :type built-in)
  ;; :straight (nnreddit :type built-in)
  ;; :bind (("C-c m" . 'gnus))
  ;; :bind (:map gnus-article-mode-map
  ;;             ("o" . gnus-mime-copy-part)
  ;;             :map gnus-topic-mode-map
  ;;             ("<tab>" . gnus-topic-select-group))
  :commands gnus
  :hook
  (gnus-select-group-hook . gnus-group-set-timestamp)
  (gnus-summary-exit-hook . gnus-topic-sort-groups-by-alphabet)
  (gnus-summary-exit-hook . gnus-group-sort-groups-by-rank)
  (gnus-group-mode . gnus-topic-mode)
  ((gnus-browse-mode gnus-server-mode gnus-group-mode gnus-summary-mode) . hl-line-mode)
  (gnus-started-hook . gnus-group-list-all-groups)
  :custom
  (gnus-use-cache t)
  (gnus-use-scoring nil)
  (gnus-keep-backlog 10)
  (gnus-suppress-duplicates t)
  (gnus-novice-user nil)
  (gnus-expert-user t)
  (gnus-interactive-exit 'quiet)
  (gnus-dbus-close-on-sleep t)
  (gnus-use-cross-reference nil)
  (gnus-inhibit-startup-message nil)
  ;; (gnus-select-method '(nnmaildir "" (directory "~/Mail/")))
  ;; (gnus-home-directory (expand-file-name "gnus/" poly-cache-dir))
  ;; (gnus-select-method '(nnfolder ""))
  ;; (gnus-secondary-select-methods
  ;;  '(
  ;;    (nnfolder "")
  ;;    ;; (nnmaildir ""
  ;;    ;; 		(directory "~/Mail/"))
  ;;    )
  ;;  )
  ;; (gnus-select-method
  ;;  '(nnmaildir "MyMail"
  ;;              (directory "~/Mail/")))
  ;; (gnus-secondary-select-methods nil)
  ;; (gnus-select-method '(nnnil))
  ;; (gnus-secondary-select-methods
  ;;  '((nnmaildir "MyMail"
  ;;               (directory "~/Mail/"))))
  ;; (gnus-secondary-select-methods
  ;;  '((nnmaildir ""
  ;;               (directory "~/Mail/"))))
  ;; Render HTML content using gnus-w3m
  (mm-text-html-renderer 'gnus-w3m)
  (browse-url-browser-function #'w3m-browse-url)
  (gnus-inhibit-images nil);; Keep images displayed
  (gnus-blocked-images nil)
  (mm-inline-text-html-with-images t)
  :config
  (auto-image-file-mode t)

  ;; (setq ;; mail-sources
  ;;  mail-sources '((maildir :path "~/Mail/" :subdirs ("cur" "new")))
  ;;  ;; '((maildir :path "~/Mail/Inbox/")
  ;;  ;;   (maildir :path "~/Mail/archive/"))
  ;;  )
  (setq gnus-select-method
	'(nnmaildir "" (directory "~/Mail")))
  ;; (setq gnus-secondary-select-methods nil)

  (setq mail-sources
	'((maildir :path "~/Mail/Inbox"  :subdirs ("cur" "new" "tmp"))))
  ;; (setq mail-sources nil)
  ;; (setq poly/mail-root-dir (expand-file-name "Mail" "~"))
  ;; (let ((gmail (expand-file-name "Inbox"  poly/mail-root-dir))
  ;; 	(work (expand-file-name "work"  poly/mail-root-dir)))
  ;;   (setq mail-sources nil)
  ;;   (if (file-directory-p gmail)
  ;; 	(add-to-list 'mail-sources `(maildir :path ,gmail  :subdirs ("cur" "new" "tmp"))))
  ;;   ;; (if (file-directory-p work)
  ;;   ;; 	(add-to-list 'mail-sources `(maildir :path ,work  :subdirs ("cur" "new"))))

  ;;   ;; (setq gnus-secondary-select-methods
  ;;   ;;   `((nnmaildir "gmail" (directory ,gmail))
  ;;   ;; 	(nnmaildir "work" (directory ,work))))
  ;;   ;; (setq gnus-select-method
  ;;   ;;   '(nnmaildir "Local"
  ;;   ;;               (directory "~/Maildir")
  ;;   ;;               (nnir-search-engine notmuch)
  ;;   ;;   ))

  ;;   ;; (setq gnus-select-method
  ;;   ;; 	  `(nnmaildir "gmail"
  ;;   ;; 		      (directory ,gmail)
  ;;   ;; 		      (expire-age never))
  ;;   ;; 	  ;; `((nnmaildir "gmail" (directory ,gmail))
  ;;   ;; 	  ;;   (nnmaildir "work" (directory ,work)))
  ;;   ;; 	  )
  ;;     (setq gnus-secondary-select-methods
  ;; 	    `((nnmaildir  "" (directory ,gmail))))

  ;;   )

  ;; (setq gnus-select-method nil)
  ;; (setq gnus-select-method '(nnml ""))
  (add-hook 'gnus-group-mode-hook 'gnus-topic-mode)
  (setq gnus-use-trees nil)
  (setq gnus-gcc-mark-as-read t)
  (setq gnus-asynchronous t)

  (setq gnus-check-new-newsgroups nil)
  ;; (setq gnus-select-method '(nnnil ""))

  ;; (setq gnus-permanently-visible-groups ".*")
  ;; (setq gnus-message-archive-group "nnmaildir+gmail:outbox")

  (setq gnu-fetch-old-headers t)
  (setq  mail-source-delete-incoming nil)
  (setq gnus-thread-sort-functions
	'(gnus-thread-sort-by-number
          gnus-thread-sort-by-most-recent-date))

  ;; (setq gnus-secondary-select-methods nil)
  (setq gnus-secondary-select-methods
	'((nnmaildir "Gmail"
		     (directory "~/Mail/Inbox"))
	  (nnmaildir "QQMail"
		     (directory "~/Mail/QQMail"))
	  (nnmaildir "Work"
		     (directory "~/Mail/work"))
	  ))

  ;; (setq mh-mime-save-parts-directory (expand-file-name "Mail/attachments" "~"))

  ;; set default attachement download directory
  (setq mm-default-directory (expand-file-name "Mail/attachments" "~"))

  (setq message-forward-as-mime nil)

  ;; prevent ask "Gnus auto-save file exists"
  (setq gnus-always-read-dribble-file t)

  ;; (setq gnus-select-method
  ;; 	'(nnmaildir ""
  ;; 		    (directory "~/Mail/Inbox")
  ;; 		    (get-new-mail nil)))

  ;; ;; Sent mail
  ;; (setq gnus-message-archive-method gnus-select-method)
  ;; (setq gnus-message-archive-oroup "Sent")

  ;; (setq gnus-secondary-select-methods
  ;; 	'((nnml ""))
  ;; 	mail-user-agent 'gnus-user-agent
  ;; 	read-mail-command 'gnus)

  ;; (setq gnus-secondary-select-methods nil)

  ;; (setq group-name-map '(
  ;; 			 ;; 	 ("nnmaildir+OldEmail:INBOX" . "Gmail-Inbox")
  ;; 			 ;; ("nnmaildir+Work:INBOX" . "Work-Inbox")
  ;; 			 ;; ("nnmaildir+Work:Archive" . "Work-Archive")
  ;; 			 ;; ("nnmaildir+Work:Backlog" . "Work-Backlog")
  ;; 			 ;; ("nnmaildir+Work:Sent Mail" . "Work-Sent")
  ;; 			 ;; ("nnmaildir+Work:org-archive" . "Work-Org-Archive")
  ;; 			 ;; ("nnmaildir+Gmail:INBOX" . "Gmail: Inbox")
  ;; 			 ("Inbox" . "Gmail: Inbox")
  ;; 			 ("QQMail" . "Gmail: QQMail")
  ;; 			 ))

  (setq group-name-map '(
			 ;; 	 ("nnmaildir+OldEmail:INBOX" . "Gmail-Inbox")
			 ;; ("nnmaildir+Work:INBOX" . "Work-Inbox")
			 ;; ("nnmaildir+Work:Archive" . "Work-Archive")
			 ;; ("nnmaildir+Work:Backlog" . "Work-Backlog")
			 ;; ("nnmaildir+Work:Sent Mail" . "Work-Sent")
			 ;; ("nnmaildir+Work:org-archive" . "Work-Org-Archive")
			 ;; ("nnmaildir+Gmail:INBOX" . "Gmail: Inbox")
			 ("Inbox" . "nnmaildir+Gmail:Inbox")
			 ("QQMail" . "Gmail: QQMail")
			 ))
  (setq gnus-group-line-format "%ue%uM %S%p[%5t][%L]\t%P%5y:%B%(%uG%)%O\n")


  ;; You need to replace this key ID with your own key ID!
  (setq mml2015-signers '("FC6BDB92CD5BEB22")
	mml2015-encrypt-to-self t)
  (add-hook 'message-send-hook 'mml-secure-message-sign-pgpmime)

  (setq mm-inline-text-html-with-images t)

  (require 'browse-url)
  ;; (require 'gnus-dired)
  ;; (require 'gnus-topic)

  (setq nnmail-expiry-wait 30)
  (setq mm-encrypt-option 'guided)
  (setq mml-secure-openpgp-encrypt-to-self t)
  (setq mml-secure-openpgp-sign-with-sender t)
  (setq mml-secure-smime-encrypt-to-self t)
  (setq mml-secure-smime-sign-with-sender t)

  ;; gnus article
  (setq gnus-article-browse-delete-temp 'ask)
  (setq gnus-article-over-scroll nil)
  (setq gnus-article-show-cursor t)
  (setq gnus-article-sort-functions
        '((not gnus-article-sort-by-number)
          (not gnus-article-sort-by-date)))
  (setq gnus-article-truncate-lines nil)
  (setq gnus-html-frame-width 80)
  (setq gnus-html-image-automatic-caching t)
  (setq gnus-inhibit-images t)
  (setq gnus-max-image-proportion 0.3)
  (setq gnus-treat-display-smileys nil)
  (setq gnus-article-mode-line-format "%G %S %m")
  ;; (setq gnus-visible-headers
  ;;       '("^From:" "^To:" "^Cc:" "^Newsgroups:" "^Subject:" "^Date:"
  ;;         "Followup-To:" "Reply-To:" "^Organization:" "^X-Newsreader:"
  ;;         "^X-Mailer:"))
  ;; (setq gnus-sorted-header-list gnus-visible-headers)

  ;; Gnus group
  (setq gnus-level-subscribed 6)
  (setq gnus-level-unsubscribed 7)
  (setq gnus-level-zombie 8)
  (setq gnus-list-groups-with-ticked-articles nil)
  )

(use-package gnus-group
  :straight (:type built-in)
  ;; :straight nil
  :after gnus
  :ensure t
  :custom
  (gnus-group-sort-function 'gnus-group-sort-by-server)
  (gnus-level-subscribed 6)
  (gnus-level-unsubscribed 7)
  (gnus-level-zombie 8)
  (gnus-activate-level 2)
  (gnus-list-groups-with-ticked-articles nil)
  (gnus-group-line-format "%M%p%P%5y:%B%(%g%)\n")
  (gnus-group-mode-line-format "%%b")
  :config
  ;; (setq gnus-group-sort-function
  ;;       '((gnus-group-sort-by-unread)
  ;;         (gnus-group-sort-by-alphabet)
  ;;         (gnus-group-sort-by-rank)))
  (defun my-gnus-group-list-subscribed-groups ()
    "List all subscribed groups with or without un-read messages"
    (interactive)
    (gnus-group-list-all-groups 5))

  (define-key gnus-group-mode-map
    ;; list all the subscribed groups even they contain zero un-read messages
    (kbd "o") 'my-gnus-group-list-subscribed-groups)
  :hook ((gnus-group-mode-hook . hl-line-mode)
         (gnus-select-group-hook . gnus-group-set-timestamp))
  :bind (:map gnus-group-mode-map
	      ("M-n" . gnus-topic-goto-next-topic)
	      ("M-p" . gnus-topic-goto-previous-topic)))

(use-package gnus-topic
  :straight (:type built-in)
  :after (gnus gnus-group)
  :ensure nil
  :config
  (setq gnus-topic-display-empty-topics t)
  (add-hook 'gnus-group-mode-hook #'gnus-topic-mode)
  )

(use-package gnus-async
  :straight (:type built-in)
  :after gnus
  :ensure nil
  :defer t
  :config
  (setq gnus-asynchronous t)
  (setq gnus-use-article-prefetch 15))

(use-package gnus-sum
  :straight (:type built-in)
  :after gnus
  :defer t
  :ensure nil
  :config
  (setq gnus-auto-select-first nil)
  (setq gnus-summary-ignore-duplicates t)
  (setq gnus-suppress-duplicates t)
  (setq gnus-save-duplicate-list t)
  (setq gnus-summary-goto-unread nil)
  (setq gnus-summary-make-false-root 'adopt)
  (setq gnus-summary-thread-gathering-function
        'gnus-gather-threads-by-subject)
  (setq gnus-summary-gather-subject-limit 'fuzzy)
  (setq gnus-thread-sort-functions
        '( ;; gnus-thread-sort-by-date
          (not gnus-thread-sort-by-number)
	  (not gnus-thread-sort-by-most-recent-date)
	  ))
  (setq gnus-subthread-sort-functions
        'gnus-thread-sort-by-date)
  (setq gnus-thread-hide-subtree nil)
  (setq gnus-thread-ignore-subject nil)
  (setq gnus-user-date-format-alist
        '(((gnus-seconds-today) . "Today at %R")
          ((+ (* 60 60 24) (gnus-seconds-today)) . "Yesterday, %R")
          (t . "%Y-%m-%d %R")))
  (setq gnus-face-1 'gnus-header-content)
  (setq gnus-face-2 'gnus-header-from)
  (setq gnus-face-3 'gnus-header-subject)
  (setq gnus-summary-line-format "%U%R  %1{%-16,16&user-date;%}  %2{%-25,25f%}  %3{%B%S%}\n")
  (setq gnus-summary-mode-line-format "%p")
  ;; (setq gnus-sum-thread-tree-false-root ""
  ;;       gnus-sum-thread-tree-indent " "
  ;;       gnus-sum-thread-tree-leaf-with-other "├► "
  ;;       gnus-sum-thread-tree-root ""
  ;;       gnus-sum-thread-tree-single-leaf "╰► "
  ;;       gnus-sum-thread-tree-vertical "│")
  (setq gnus-sum-thread-tree-false-root "─┬> ")
  (setq gnus-sum-thread-tree-indent " ")
  (setq gnus-sum-thread-tree-single-indent "")
  (setq gnus-sum-thread-tree-leaf-with-other "├─> ")
  (setq gnus-sum-thread-tree-root "")
  (setq gnus-sum-thread-tree-single-leaf "└─> ")
  (setq gnus-sum-thread-tree-vertical "│"))

(use-package gnus-dired
  :straight (:type built-in)
  :after gnus
  :hook (dired-mode . gnus-dired-mode)
  )

(use-package gnus-art
  :straight (:type built-in)
  :after gnus
  :config
  (setq
   gnus-article-browse-delete-temp 'ask
   gnus-article-over-scroll nil
   gnus-article-show-cursor t
   gnus-article-sort-functions
   '((not gnus-article-sort-by-number)
     (not gnus-article-sort-by-date))
   gnus-article-truncate-lines nil
   gnus-html-frame-width 80
   gnus-html-image-automatic-caching t
   gnus-inhibit-images t
   gnus-max-image-proportion 0.7
   gnus-treat-display-smileys nil
   gnus-article-mode-line-format "%G %S %m"
   gnus-visible-headers
   '("^From:" "^Subject:" "^To:" "^Cc:" "^Newsgroups:" "^Date:"
     "Followup-To:" "Reply-To:" "^Organization:" "^X-Newsreader:"
     "^X-Mailer:")
   gnus-sorted-header-list gnus-visible-headers
   )
  :hook (gnus-article-mode-hook . (lambda () (setq-local fill-column 80))))
#+end_src


** Others

*** mm

#+begin_src emacs-lisp :tangle no
;; You need to replace this key ID with your own key ID!
(setq mml2015-signers '("FC6BDB92CD5BEB22")
      mml2015-encrypt-to-self t)
(add-hook 'message-send-hook 'mml-secure-message-sign-pgpmime)
(setq mm-inline-text-html-with-images t)

(setq mm-text-html-renderer 'w3m)
;; (setq browse-url-browser-function #'w3m-browse-url)
;; (setq browse-url-browser-function 'xwidget-webkit-browse-url)
(setq browse-url-browser-function 'browse-url-default-macosx-browser)
(setq gnus-inhibit-images nil);; Keep images displayed
(setq gnus-blocked-images nil)
(setq mm-inline-text-html-with-images t)

(setq mm-coding-system-priorities '(iso-8859-1 gbk gb18030 utf-8))
(setq mm-use-ultra-safe-encoding t)

  ;; use imagemagick, if available
  (when (fboundp 'imagemagick-register-types)
    (imagemagick-register-types))

(require 'epg-config)

(setq-default mml2015-use 'epg
              mml2015-encrypt-to-self t
              mml2015-sign-with-sender t)

(setq mm-inlined-types (remove "application/zip" mm-inlined-types))
#+end_src

*** w3m

#+begin_src emacs-lisp :tangle no
(use-package w3m
  :straight t
  :config
  (with-eval-after-load 'notmuch
    (notmuch-show-setup-w3m)))
#+end_src

*** ebdb

#+begin_src emacs-lisp :tangle no
(use-package ebdb
  :straight t
  :config
  (require 'ebdb-message)
  (require 'ebdb-notmuch) ; FIXME 2021-05-13: does not activate the corfu-mode UI
  ;; (setq ebdb-sources (locate-user-emacs-file "ebdb"))
  (setq ebdb-sources (expand-file-name "ebdb/ebdb" poly-cache-dir))
  (setq ebdb-permanent-ignores-file (expand-file-name "ebdb/ebdb-permanent-ignores" poly-cache-dir))

  (setq ebdb-mua-pop-up nil)
  (setq ebdb-default-window-size 0.25)
  (setq ebdb-mua-default-formatter ebdb-default-multiline-formatter)

  ;; (setq ebdb-mua-auto-update-p 'existing)
  ;; (setq ebdb-mua-reader-update-p 'existing)
  ;; (setq ebdb-mua-sender-update-p 'create)
  ;; (setq ebdb-message-auto-update-p 'create)

  ;; (setq ebdb-mua-auto-update-p nil)
  ;; (setq ebdb-mua-reader-update-p nil)
  ;; (setq ebdb-mua-sender-update-p nil)
  ;; (setq ebdb-message-auto-update-p nil)

  (setq ebdb-message-try-all-headers t)
  (setq ebdb-message-headers
        '((sender "From" "Resent-From" "Reply-To" "Sender")
          (recipients "Resent-To" "Resent-Cc" "Resent-CC" "To" "Cc" "CC" "Bcc" "BCC")))
  (setq ebdb-message-all-addresses t)

  (setq ebdb-complete-mail 'capf)
  (setq ebdb-mail-avoid-redundancy t)
  (setq ebdb-completion-display-record nil)
  (setq ebdb-complete-mail-allow-cycling nil)

  ;; (setq ebdb-record-self "ace719a4-61f8-4bee-a1ca-2f07e2292305")
  (setq ebdb-user-name-address-re 'self) ; match the above
  (setq ebdb-save-on-exit t)

  ;; (add-hook 'message-setup-hook #'prot-mail-ebdb-message-setup)
  ;; (with-eval-after-load 'prot-mail ; check my `prot-mail.el'
  ;;   (add-hook 'message-setup-hook #'prot-mail-ebdb-message-setup))
  (let ((map ebdb-mode-map))
    (define-key map (kbd "D") #'ebdb-delete-field-or-record)
    (define-key map (kbd "M") #'ebdb-mail) ; disables `ebdb-mail-each'
    (define-key map (kbd "m") #'ebdb-toggle-record-mark)
    (define-key map (kbd "t") #'ebdb-toggle-all-record-marks)
    (define-key map (kbd "T") #'ebdb-toggle-records-format) ; disables `ebdb-toggle-all-records-format'
    (define-key map (kbd "U") #'ebdb-unmark-all-records))

  (remove-hook 'message-send-hook 'ebdb-message-auto-update)
  (remove-hook 'mail-send-hook 'ebdb-message-auto-update)

  ;; (add-hook 'gnus-message-setup-hook #'poly/org-msg-post)
  ;; (advice-add 'org-msg-post-setup :after 'poly/org-msg-post)
  ;; (advice-add 'org-msg-post-setup--if-not-reply :after 'poly/org-msg-post)

  ;;   (advice-add 'org-msg-post-setup :around 'poly/org-msg-post)
  ;; (advice-add 'org-msg-post-setup--if-not-reply :around 'poly/org-msg-post)
  ;; (add-hook 'notmuch-mua-reply #'poly/org-msg-post)
  ;; (add-hook 'notmuch-mua-mail #'poly/org-msg-post)
  )
#+end_src

** Marking Articles
 https://github.com/cofi/dotfiles/blob/master/gnus.el
 https://github.com/fniessen/gnus-leuven

#+begin_src emacs-lisp :tangle no
  ;; Unread Articles
  (when (char-displayable-p ?\u2691)
    (setq gnus-ticked-mark ?⚑))

  (when (char-displayable-p ?\u2690)
    (setq gnus-dormant-mark ?⚐))

  (when (char-displayable-p ?\u2709)
    (setq gnus-unread-mark ?✉))

  ;; Read Articles
  (when (char-displayable-p ?\u2717)
    (setq gnus-del-mark ?✗))

  (when (char-displayable-p ?\u2713)
    (setq gnus-read-mark ?✓))

  (setq gnus-ancient-mark ? )

  (when (char-displayable-p ?\u2620)
    (setq gnus-killed-mark ?☠))

  (when (char-displayable-p ?\u2197)
    (setq gnus-canceled-mark ?↗))

  (when (char-displayable-p ?\u267B)
    (setq gnus-expirable-mark ?♻))
  ;; Other marks

  (when (char-displayable-p ?\u21BA)
    (setq gnus-replied-mark ?↺))

  (when (char-displayable-p ?\u21AA)
    (setq gnus-forwarded-mark ?↪))

  (when (char-displayable-p ?\u260D)
    (setq gnus-cached-mark ?☍))

  (when (char-displayable-p ?\u2729)
    (setq gnus-unseen-mark ?✩))

  (when (char-displayable-p ?\u2699)
    (setq gnus-process-mark ?⚙))

  (when (char-displayable-p ?\u2605)
    (setq gnus-recent-mark ?★))

  ;; score variables
  (when (char-displayable-p ?\u2191)
    (setq gnus-score-over-mark ?↑))

  (when (char-displayable-p ?\u2193)
    (setq gnus-score-below-mark ?↓))
#+end_src


** outline

#+begin_src emacs-lisp
(use-package outline
  :straight (:type built-in)
  :diminish outline-minor-mode
  :commands outline-minor-mode
  :init
  (add-hook 'prog-mode-hook 'outline-minor-mode)
  (add-hook 'TeX-mode-hook 'outline-minor-mode)
  (add-hook 'message-mode-hook 'outline-minor-mode)
  ;; (defvar outline-minor-mode-prefix "\M-O")
  :config
  (dolist (buf (buffer-list))
    (with-current-buffer buf
      (when (derived-mode-p 'prog-mode 'tex-mode 'message-mode)
        (outline-minor-mode))))
  ;; (smartrep-define-key outline-minor-mode-map "M-s"
  ;;   '(("p" . outline-previous-visible-heading)
  ;;     ("n" . outline-next-visible-heading)
  ;;     ("u" . outline-up-heading)
  ;;     ("b" . outline-backward-same-level)
  ;;     ("f" . outline-forward-same-level)))
  (define-key outline-minor-mode-map (kbd "<M-S-return>") 'outline-insert-heading)
  (define-key outline-minor-mode-map (kbd "<backtab>") 'outshine-cycle-buffer)
  (define-key outline-minor-mode-map (kbd "C-M-i") nil)
  (add-hook 'outline-insert-heading-hook (lambda ()
                                           (if (string-equal "" head)
                                               (progn (call-interactively 'comment-dwim)
                                                      (insert "* "))
                                             (when (memq major-mode '(c++-mode
                                                                      c-mode
                                                                      arduino-mode))
                                               (save-excursion (insert " */"))))))
  (add-hook 'TeX-mode-hook
            (lambda ()
              (define-key outline-minor-mode-map (kbd "\C-i") '(menu-item "maybe-latex/hide-show" nil :filter
                                                                          (lambda (&rest _)
                                                                            (when (latex//header-at-point)
                                                                              #'outline-cycle))))))
  ;; Copied from latex-extra.
  (defcustom latex/section-hierarchy
    '("\\\\headerbox\\_>"
      "\\\\subparagraph\\*?\\_>"
      "\\\\paragraph\\*?\\_>"
      "\\\\subsubsection\\*?\\_>"
      "\\\\subsection\\*?\\_>"
      "\\\\section\\*?\\_>"
      "\\\\chapter\\*?\\_>"
      "\\\\part\\*?\\_>"
      ;; "\\\\maketitle\\_>"
      "\\\\appendix\\_>\\|\\\\\\(begin\\|end\\){document}"
      "\\\\documentclass\\_>")
    "List of regexps which define what a section can be.Ordered from deepest to highest level."
    :group 'outlines
    :type '(repeat (choice regexp function)))
  (defun latex/section-regexp ()
    "Return a regexp matching anything in `latex/section-hierarchy'."
    (format "^\\(%s\\)" (mapconcat 'identity latex/section-hierarchy "\\|")))
  (defun latex//header-at-point ()
    "Return header under point or nil, as per `latex/section-hierarchy'."
    (save-match-data
      (save-excursion
        (goto-char (line-beginning-position))
        (when (looking-at (latex/section-regexp))
          (match-string-no-properties 0))))))
#+end_src

** outshine

#+begin_src emacs-lisp
(use-package outshine
  :straight t
  :diminish outshine-mode
  :commands (outshine-mode
             outshine-cycle-buffer
             outshine-calc-outline-regexp)
  :init
  (add-hook 'outline-minor-mode-hook
            (lambda () ;; 在latex-mode和org-mode中不开启outshine。
              (unless (derived-mode-p 'latex-mode 'org-mode)
                (outshine-mode))))
  :config
  ;; Heading格式随mode不同，通常是M-;加*加空格
  (setq outshine-use-speed-commands t)
  (setq outshine-imenu-show-headlines-p nil)
  (define-key outshine-mode-map (kbd "M-TAB") nil))
#+end_src

** outorg

#+begin_src emacs-lisp
(use-package outorg
  :straight t
  ;; M-O # current heading.
  ;; C-u M-O # current buffer.
  ;; M-# outorg-copy-edits-and-exit.
  :after outshine)
#+end_src

** org-download

org-download-paste for clipboard images

#+begin_src emacs-lisp
(use-package org-download
  :straight t
  :ensure t)
#+end_src

** org-msg send mail
#+begin_src emacs-lisp
(use-package org-msg
  :straight t
  :hook (org-msg-edit-mode . (lambda ()
			       (poly/set-mail-capf)
			       ;; (set-fill-column 100)
			       ;; (turn-on-auto-fill)
			       (electric-indent-local-mode -1)
			       (turn-on-flyspell)))
  :config
  (org-msg-mode-notmuch)
  (setq org-msg-options "html-postamble:nil H:5 num:nil ^:{} toc:nil author:nil email:nil num:t \\n:t"
	org-msg-startup "hidestars indent inlineimages"
	org-msg-greeting-fmt "\nHi%s,\n\n"
	org-msg-greeting-name-limit 3
	org-export-global-macros  '(("color" . "@@html:<span style=\"color: $1\">$2</span>@@@@latex:\textcolor{$1}{$2}@@@@odt:<text:span text:style-name=\"$1\">$2</text:span>@@"))
	org-msg-convert-citation t)

  (setq org-msg-enforce-css
	(let* ((font-family '(font-family . "\"PingFang SC Regular\",\"PingFang SC\",\"Microsoft YaHei Regular\",\"Microsoft YaHei\",\"Arial\",\"Helvetica\", \"sans-serif\""))
	       (font-size '(font-size . "10pt"))
	       (font `(,font-family ,font-size))
	       (line-height '(line-height . "10pt"))
	       (bold '(font-weight . "bold"))
	       (theme-color "#0071c5")
	       (color `(color . ,theme-color)))
	  `((del nil
		 (,@font
		  (color . "grey")
		  (border-left . "none")
		  (text-decoration . "line-through")
		  (margin-bottom . "0px")
		  (margin-top . "10px")
		  (line-height . "11pt")))
	    (a nil
               (,color))
	    (a reply-header
               ((color . "black")
		(text-decoration . "none")))
	    (div reply-header
		 ((padding . "3.0pt 0in 0in 0in")
		  (border-top . "solid #e1e1e1 1.0pt")
		  (margin-bottom . "20px")))
	    (span underline
		  ((text-decoration . "underline")))
	    (li nil
		(,@font
		 (margin . " 0 0 0 0")
		 ))
	    (ul nil
		(,@font
		 (margin . "0 0 0 10px")
		 (padding-left . "5px")))
	    (nil org-ul
		 ((list-style-type . "square")))
	    (nil org-ol
		 (,@font
		  (margin-bottom . "0px")
		  (margin-top . "0px")
		  (margin-left . "30px")
		  (padding-top . "0px")
		  (padding-left . "5px")))
	    (nil signature
		 (,@font
		  (line-height . "25pt")
		  (margin-bottom . "20px")))
	    (blockquote quote0
			((padding-left . "5px")
			 (margin-left . "10px")
			 (margin-top . "10px")
			 (margin-bottom . "0")
			 (font-style . "italic")
			 (background . "#f9f9f9")
			 (border-left . "3px solid #ccc")))
	    (blockquote quote1
			((padding-left . "5px")
			 (margin-left . "10px")
			 (margin-top . "10px")
			 (margin-bottom . "0")
			 (font-style . "italic")
			 (background . "#f9f9f9")
			 (color . "#324e72")
			 (border-left . "3px solid #557fb4")))
	    (blockquote quote2
			((padding-left . "5px")
			 (margin-left . "10px")
			 (margin-top . "10px")
			 (margin-bottom . "0")
			 (font-style . "italic")
			 (background . "#f9f9f9")
			 (color . "#6a3a4c")
			 (border-left . "3px solid #a8617c")))
	    (blockquote quote3
			((padding-left . "5px")
			 (margin-left . "10px")
			 (margin-top . "10px")
			 (margin-bottom . "0")
			 (font-style . "italic")
			 (background . "#f9f9f9")
			 (color . "#7a4900")
			 (border-left . "3px solid #e08600")))
	    (blockquote quote4
			((padding-left . "5px")
			 (margin-left . "10px")
			 (margin-top . "10px")
			 (margin-bottom . "0")
			 (font-style . "italic")
			 (background . "#f9f9f9")
			 (color . "#ff34ff")
			 (border-left . "3px solid #ff9afe")))
	    (blockquote quote5
			((padding-left . "5px")
			 (margin-left . "10px")
			 (margin-top . "10px")
			 (margin-bottom . "0")
			 (font-style . "italic")
			 (background . "#f9f9f9")
			 (color . "#ff4a46")
			 (border-left . "3px solid #ffadab")))
	    (blockquote quote6
			((padding-left . "5px")
			 (margin-left . "10px")
			 (margin-top . "10px")
			 (margin-bottom . "0")
			 (font-style . "italic")
			 (background . "#f9f9f9")
			 (color . "#008941")
			 (border-left . "3px solid #00ef71")))
	    (blockquote quote7
			((padding-left . "5px")
			 (margin-left . "10px")
			 (margin-top . "10px")
			 (margin-bottom . "0")
			 (font-style . "italic")
			 (background . "#f9f9f9")
			 (color . "#006fa6")
			 (border-left . "3px solid #0daefe")))
	    (blockquote quote8
			((padding-left . "5px")
			 (margin-left . "10px")
			 (margin-top . "10px")
			 (margin-bottom . "0")
			 (font-style . "italic")
			 (background . "#f9f9f9")
			 (color . "#a30059")
			 (border-left . "3px solid #ff098f")))
	    (blockquote quote9
			((padding-left . "5px")
			 (margin-left . "10px")
			 (margin-top . "10px")
			 (margin-bottom . "0")
			 (font-style . "italic")
			 (background . "#f9f9f9")
			 (color . "#ffdbe5")
			 (border-left . "3px solid #ffffff")))
	    (blockquote quote10
			((padding-left . "5px")
			 (margin-left . "10px")
			 (margin-top . "10px")
			 (margin-bottom . "0")
			 (font-style . "italic")
			 (background . "#f9f9f9")
			 (color . "#000000")
			 (border-left . "3px solid #333333")))
	    (blockquote quote11
			((padding-left . "5px")
			 (margin-left . "10px")
			 (margin-top . "10px")
			 (margin-bottom . "0")
			 (font-style . "italic")
			 (background . "#f9f9f9")
			 (color . "#0000a6")
			 (border-left . "3px solid #0d0dfe")))
	    (blockquote quote12
			((padding-left . "5px")
			 (margin-left . "10px")
			 (margin-top . "10px")
			 (margin-bottom . "0")
			 (font-style . "italic")
			 (background . "#f9f9f9")
			 (color . "#63ffac")
			 (border-left . "3px solid #c8ffe2")))
	    (code nil
		  ((font-size . "10pt")
		   (font-family . "monospace")
		   (background . "#f9f9f9")))
	    (code src\ src-asl
		  ((color . "#ffffff")
		   (background-color . "#000000")))
	    (code src\ src-c
		  ((color . "#ffffff")
		   (background-color . "#000000")))
	    (code src\ src-c++
		  ((color . "#ffffff")
		   (background-color . "#000000")))
	    (code src\ src-conf
		  ((color . "#ffffff")
		   (background-color . "#000000")))
	    (code src\ src-cpp
		  ((color . "#ffffff")
		   (background-color . "#000000")))
	    (code src\ src-csv
		  ((color . "#ffffff")
		   (background-color . "#000000")))
	    (code src\ src-diff
		  ((color . "#ffffff")
		   (background-color . "#000000")))
	    (code src\ src-ditaa
		  ((color . "#ffffff")
		   (background-color . "#000000")))
	    (code src\ src-emacs-lisp
		  ((color . "#ffffff")
		   (background-color . "#000000")))
	    (code src\ src-fundamental
		  ((color . "#ffffff")
		   (background-color . "#000000")))
	    (code src\ src-ini
		  ((color . "#ffffff")
		   (background-color . "#000000")))
	    (code src\ src-json
		  ((color . "#ffffff")
		   (background-color . "#000000")))
	    (code src\ src-makefile
		  ((color . "#ffffff")
		   (background-color . "#000000")))
	    (code src\ src-man
		  ((color . "#ffffff")
		   (background-color . "#000000")))
	    (code src\ src-org
		  ((color . "#ffffff")
		   (background-color . "#000000")))
	    (code src\ src-plantuml
		  ((color . "#ffffff")
		   (background-color . "#000000")))
	    (code src\ src-python
		  ((color . "#ffffff")
		   (background-color . "#000000")))
	    (code src\ src-sh
		  ((color . "#ffffff")
		   (background-color . "#000000")))
	    (code src\ src-xml
		  ((color . "#ffffff")
		   (background-color . "#000000")))
	    (nil linenr
		 ((padding-right . "1em")
		  (color . "black")
		  (background-color . "#aaaaaa")))
	    (pre nil
		 ((line-height . "12pt")
		  (color . "#ffffff")
		  (background-color . "#000000")
		  (margin . "0px")
		  (font-size . "9pt")
		  (font-family . "monospace")))
	    (div org-src-container
		 ((margin-top . "10px")))
	    (nil figure-number
		 (,@font
		  (color . "#0071c5")
		  (font-weight . "bold")
		  (text-align . "left")))
	    (nil table-number)
	    (caption nil
		     ((text-align . "left")
		      (background . "#0071c5")
		      (color . "white")
		      (font-weight . "bold")))
	    (nil t-above
		 ((caption-side . "top")))
	    (nil t-bottom
		 ((caption-side . "bottom")))
	    (nil listing-number
		 (,@font
		  (color . "#0071c5")
		  (font-weight . "bold")
		  (text-align . "left")))
	    (nil figure
		 (,@font
		  ,color
		  (font-weight . "bold")
		  (text-align . "left")))
	    (nil org-src-name
		 (,@font
		  ,color
		  (font-weight . "bold")
		  (text-align . "left")))
	    (table nil
		   (,@font
		    (margin-top . "0px")
		    (line-height . "10pt")
		    (border-collapse . "collapse")))
	    (th nil
		((border . "1px solid white")
		 (background-color . "#0071c5")
		 (color . "white")
		 (padding-left . "10px")
		 (padding-right . "10px")))
	    (td nil
		(,@font
		 (margin-top . "0px")
		 (padding-left . "0px")
		 (padding-right . "20px")
		 (border . "1px solid white")))
	    (td org-left
		((text-align . "left")))
	    (td org-right
		((text-align . "right")))
	    (td org-center
		((text-align . "center")))
	    (div outline-text-4
		 ((margin-left . "15px")))
	    (div outline-4
		 ((margin-left . "10px")))
	    (h4 nil
		((margin-bottom . "0px")
		 (font-size . "11pt")
		 ,font-family))
	    (h3 nil
		((margin-bottom . "15px")
		 ;; (text-decoration . "underline")
		 (font-size . "12pt")
		 ,font-family
		 ,color))
	    (h2 nil
		((margin-top . "20px")
		 (margin-bottom . "20px")
		 ;; (font-style . "italic")
		 ,color
		 (font-size . "13pt")
		 ,font-family))
	    (h1 nil
		((margin-top . "20px")
		 (margin-bottom . "20px")
		 (font-size . "16pt")
		 ("border-bottom" . "1px solid lighten(#304860, 30%)")
		 ,font-family
		 ,color))
	    (span tag ((background-color . "eee")
		      (font-family . "monospace")
		      (padding . "2px")
		      (font-size . "80%")
		      (font-weight . "normal")))
	    (p nil
               ((text-decoration . "none")
		(margin-bottom . "0px")
		(margin-top . "10px")
		(line-height . "18pt")
		(font-size . "10pt")
		,font-family))
	    (div nil
		 (,@font
		  (line-height . "18pt"))))))
  (org-msg-mode))

(use-package org-mime
  :defer t
  :straight (:type built-in)
  :after org
  :commands (org-mime-htmlize org-mime-edit-mail-in-org-mode))
#+end_src

* macOS package

** osx-trash

#+begin_src emacs-lisp
(use-package osx-trash
  :straight t
  :commands osx-trash-move-file-to-trash
  :init
  ;; Delete files to trash on macOS, as an extra layer of precaution against
  ;; accidentally deleting wanted files.
  (setq delete-by-moving-to-trash t)

  ;; Lazy load `osx-trash'
  (and IS-MAC
       (not (fboundp 'system-move-file-to-trash))
       (defalias #'system-move-file-to-trash #'osx-trash-move-file-to-trash)))
#+end_src

* Writing

Configuration for writing with Emacs, specifically for Markdown and Org mode.

** Org
** hammerspoon

send [[https://www.hammerspoon.org/docs/hs.urlevent.html][urlevent]] to hammerspoon, required by org-clock & pomo

 https://github.com/deftsp/.emacs.d/blob/fe38ec59ae630c5b88df9d10f40e33a2159113fb/lisp/50hammerspoon.el

#+begin_src emacs-lisp
(defun tl/open-hammerspoon-url (event &rest params)
  (let ((len (length params))
	(url (concat "hammerspoon://" event)))
    (when (> len 0)
      (if (zerop (% len 2))
	  (let ((querys (--reduce (format "%s&%s" acc it)
				  (-map (lambda (l)
					  (format "%s=%s" (url-encode-url (car l)) (url-encode-url (cadr l))))
					(-partition-all 2 params)))))
	    (setq url (concat url "?" querys)))
	(error "illegal hammerspoon params")))
    (tl/with-suppress-message "Shell command succeeded with"
      (shell-command (format "open -g \"%s\""
			     url)))))

(defun tl/notify-hammerspoon-did-init ()
  (tl/open-hammerspoon-url "emacs_did_init"))

(add-hook 'after-init-hook #'tl/notify-hammerspoon-did-init t)

(defun tl/notify-hammerspoon-did-kill ()
  (tl/open-hammerspoon-url "emacs_did_kill"))

(add-hook 'kill-emacs-hook #'tl/notify-hammerspoon-did-kill t)
#+end_src

** org-mode config
#+begin_src emacs-lisp
(with-eval-after-load "org"
  ;; NOTE org-fold-core-style needs to be set before org is loaded
  (setq org-fold-core-style 'overlays)

  (setq org-directory "~/Dropbox/org")
  (setq org-beorg-directory (expand-file-name "~/Library/Mobile Documents/iCloud~com~appsonthemove~beorg/Documents/org/beorg/"))
  (setq +org-mu4e-icalendar-org-capture-file (expand-file-name "mu4e.org" org-beorg-directory))
  (setq +org-capture-gtd-file (expand-file-name  "personal-gtd.org" org-beorg-directory))
  (setq +org-capture-notes-file (expand-file-name  "personal-note.org" org-beorg-directory))
  (setq +org-capture-work-gtd-file (expand-file-name "work-gtd.org" org-beorg-directory))
  (setq +org-capture-work-team-gtd-file (expand-file-name "work-team-gtd.org" org-beorg-directory))
  (setq +org-capture-work-notes-file (expand-file-name "work-note.org" org-beorg-directory))
  (setq +org-capture-work-talk-file (expand-file-name "work-talk.org" org-beorg-directory))
  (setq +org-capture-work-meeting-file (expand-file-name "work-meeting.org" org-beorg-directory))
  (setq +org-capture-work-weekly-file (expand-file-name "work-weekly.org" org-beorg-directory))

  (setq org-todo-keywords '((sequence "TODO(t)" "DOING(i)" "WAITING(w)" ;; "HOLD(h!)" "NEXT(n!)" "WAIT(w!)"
				      "DELAYED(y)" "|" "DONE(d!)" "DEFERRED(F)" "CANCELLED(c@/!)")
			    (sequence "MEETING(m)" "DOING(i)" "WAITING(w)" "|" "DONE(d!)" "CANCELLED(c@/!)")
			    (sequence "REPORT(r)" "BUG(b)" "KNOWNCAUSE(k)" "|" "FIXED(f!)")))
  (setq org-todo-keyword-faces
	'(("TODO"       :foreground "#7c7c75" :weight bold)
	  ("DOING"      :foreground "goldenrod" :weight bold)
	  ("DELAYED"    :foreground "white" :background "#f44242" :weight bold)
	  ("MEETING"    :foreground "#7c7c75" :weight bold)
	  ;; ("HOLD"       :foreground "#feb24c" :weight bold)
	  ;; ("NEXT"       :foreground "#0098dd" :weight bold)
	  ;; ("WAIT"       :foreground "#9f7efe" :weight bold)
	  ("WAITING"    :foreground "#9f7efe" :weight bold)
	  ("DONE"       :foreground "#50a14f" :weight bold)
	  ("DEFERRED"   :foreground "#ff6480" :weight bold)
	  ("CANCELLED"  :foreground "#ff6480" :weight bold)
	  ("REPORT"     :foreground "magenta" :weight bold)
	  ("BUG"        :foreground "red"     :weight bold)
	  ("KNOWNCAUSE" :foreground "yellow"  :weight bold)
	  ("FIXED"      :foreground "green"   :weight bold)))
  (setq org-use-fast-todo-selection 'expert)
  ;; (org-use-fast-todo-selection 'auto)
  (setq org-enforce-todo-dependencies t)
  (setq org-enforce-todo-checkbox-dependencies t)
  (setq org-priority-faces '((?A :foreground "red")
			     (?B :foreground "orange")
			     (?C :foreground "yellow")))
  (setq org-global-properties '(("EFFORT_ALL" . "0:15 0:30 0:45 1:00 2:00 3:00 4:00 5:00 6:00")
				("STYLE_ALL" . "habit")))
  ;; (org-columns-default-format "%25ITEM %TODO %SCHEDULED %DEADLINE %3PRIORITY %TAGS %CLOCKSUM %EFFORT{:}")
  (setq org-columns-default-format "%40ITEM(Task) %Effort(EE){:} %CLOCKSUM(Time Spent) %SCHEDULED(Scheduled) %DEADLINE(Deadline)")
  ;; Remove CLOSED: [timestamp] after switching to non-DONE states
  (setq org-closed-keep-when-no-todo t)

  ;; log
  (setq org-log-done 'time
	org-log-repeat 'time
	org-log-redeadline 'note
	org-log-reschedule nil
	org-log-into-drawer t
	org-log-state-notes-insert-after-drawers nil)
  ;; (org-log-states-order-reversed t)

  ;; tags
  (setq org-tags-column 0
	org-fast-tag-selection-single-key t
	org-track-ordered-property-with-tag t)

  ;; calendar
  (setq org-time-stamp-custom-formats '("<%A, %e. %B %Y>" . "<%A, %e. %B %Y %H:%M>")
	org-agenda-start-on-weekday 1
	calendar-week-start-day 1
	org-display-custom-times t
	org-confirm-babel-evaluate nil)

  (add-to-list 'org-modules 'org-capture)
  (add-to-list 'org-modules 'org-habit)
  (add-to-list 'org-modules 'org-timer)
  (add-to-list 'org-modules 'org-protocol)
  ;; (add-to-list 'org-modules 'org-cliplink)
  ;; (add-to-list 'org-modules 'org-journal)
  (add-to-list 'org-modules 'org-agenda)
  (add-to-list 'org-modules 'org-element)

  (require 'ox-confluence)

  ;; (add-to-list 'org-modules 'org-bars)
  ;; (add-to-list 'org-modules 'org-pdfview)
  ;; (add-to-list 'org-modules 'org-download)

  (defun my/org-add-ids-to-headlines-in-file ()
    "Add ID properties to all headlines in the current file which
do not already have one."
    (interactive)
    (if (and (boundp 'org-auto-add-ids-to-headlines-in-file) org-auto-add-ids-to-headlines-in-file)
	(org-map-entries 'org-id-get-create)))
  (add-hook 'org-mode-hook
            (lambda ()
	      (add-hook 'before-save-hook 'my/org-add-ids-to-headlines-in-file nil 'local)))

  (add-hook 'org-capture-prepare-finalize-hook 'org-id-get-create)

  (add-hook 'org-mode-hook
	    (lambda () (setq truncate-lines nil)))

  (dolist (face '(org-level-1
		  org-level-2 org-level-3
		  org-level-4 org-level-5
		  org-level-6 org-level-7
		  org-level-8))
    (set-face-attribute face nil :weight 'normal))

  ;; (setq prettify-symbols-unprettify-at-point 'right-edge)
  ;; (add-hook 'org-mode-hook
  ;;           (lambda ()
  ;;             "Beautify Org Checkbox Symbol"
  ;;             (push '("[ ]" . "☐") prettify-symbols-alist)
  ;;             (push '("[X]" . "☑") prettify-symbols-alist)
  ;;             (push '("[-]" . "❍") prettify-symbols-alist)
  ;;             (prettify-symbols-mode)))


  (setq org-agenda-files (list
			  +org-capture-gtd-file
			  +org-capture-work-gtd-file
			  +org-capture-work-team-gtd-file
			  +org-capture-work-talk-file
			  +org-capture-work-meeting-file
			  +org-mu4e-icalendar-org-capture-file))

  ;; archived location
  (setq org-archive-location (concat org-directory "archive/%s_archive::"))

  (setq org-refile-targets
	`((org-agenda-files :maxlevel . 2)
	  (,(list +org-capture-notes-file
		  +org-capture-work-notes-file
		  +org-capture-work-team-gtd-file
		  +org-capture-work-weekly-file) :maxlevel . 2)))

  (setq org-tag-alist
	'(("ignore" . ?i)
	  ("crypt" . ?c)))

  (setq org-capture-templates
	'(("t" "Personal todo" entry
	   (file+headline +org-capture-gtd-file "P-GTD")
	   "* TODO %?\n%i%U\n" :kill-buffer nil)
	  ("n" "Personal notes" entry
	   (file+headline +org-capture-notes-file "P-Note")
	   "* %u %?\n%i%U\n%a" :kill-buffer nil)

	  ("w" "Templates for work")
	  ("wt" "Work todo" entry
	   (file+olp +org-capture-work-gtd-file "W-GTD")
	   "* TODO %?\n%i%U\n" :kill-buffer nil)
	  ;; "* TODO %T%?\n%i\n:LOGBOOK:\n\n:END:\n" :prepend t :kill-buffer t)
	  ("wm" "Work meeting" entry
	   (file+olp +org-capture-work-meeting-file  "W-Meeting")
	   "* TODO %?\n%i%U\n")
	  ("wn" "Work notes" entry
	   (file+olp +org-capture-work-notes-file  "W-Note")
	   "* %u %?\n%i\n%a" :kill-buffer nil)
	  ("ww" "Work weekly" entry
	   (file+olp +org-capture-work-weekly-file "W-Weekly")
	   "* %U 周汇报\n\n   本周事项：\n\n     - %?\n\n   下周计划：\n\n     -    \n\n%i\n")

	  ("p" "Templates for projects")
	  ("pt" "Project todo" entry ; {project-root}/todo.org
	   (file+headline +org-capture-project-todo-file "Todo")
	   "* TODO %T%?\n%i\n%a" :prepend nil :kill-buffer t)
	  ("pn" "Project notes" entry ; {project-root}/notes.org
	   (file+headline +org-capture-project-notes-file "Note")
	   "* TODO %?\n%i%U\n%a" :prepend nil :kill-buffer t)
	  ("pc" "Project changelog" entry ; {project-root}/changelog.org
	   (file+headline +org-capture-project-notes-file "Changelog")
	   "* TODO %?\n%i%U\n%a" :prepend nil :kill-buffer t)
	  ("j" "Journal" entry
	   (file+olp+datetree (expand-file-name "journal.org" org-beorg-directory))
	   "* %T%?\nEntered on %U\n %i\n" :empty-lines 1)))
  (setq org-format-latex-options (plist-put org-format-latex-options :scale 1.8))

  ;; minted required:
  ;; 1. xelatex -shell-escape
  ;; 2. pip install pygments
  ;; 3. pip install git+https://github.com/hg2c/terminal-pygments#egg=terminal-pygments
  (setq org-latex-listings 'minted)

  (setq org-latex-minted-langs  '((emacs-lisp "common-lisp")
				  (cc "c++")
				  (cperl "perl")
				  (shell-script "bash")
				  (caml "ocaml")
				  (emacs-lisp "common-lisp")
				  ;; (lisp "common-lisp")
				  (clojure "Lisp")
				  (c "C")
				  (cc "c++")
				  ;; (fortran "fortran")
				  ;; (perl "Perl")
				  ;; (cperl "Perl")
				  (python "Python")
				  ;; (ruby "Ruby")
				  ;; (html "HTML")
				  ;; (xml "XML")
				  ;; (tex "TeX")
				  ;; (latex "TeX")
				  (shell-script "bash")
				  ;; (gnuplot "Gnuplot")
				  ;; (ocaml "Caml")
				  (sql "SQL")
				  (sqlite "sql")
				  ;; (R-mode "R")
				  (go "go")
				  (lua "lua")
				  (shell "shell")
				  (caml "ocaml")
				  (csp "text")
				  ))
  (setq org-latex-minted-options
        '(;; ("obeytabs" "true")
          ;; ("mathescape" "true")
          ("linenos" "false")
          ;; ;; ("numbersep" "5pt")
          ;; ;; ("frame" "none")
          ;; ("frame" "leftline")
	  ("frame" "lines")
          ;; ("framerule" "0.2pt")
          ("framesep" "2mm")
          ;; ;; ("bgcolor" "lgray")
          ;; ;; ("bgcolor" "mintedbg")
          ("tabsize" "2")
          ("fontsize" "\\scriptsize")
          ;; ;; ("fontsize" "\\scriptsize")
          ))


  ;; plantuml
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((ditaa . t)
     (dot . t)
     (emacs-lisp . t)
     (gnuplot . t)
     (js . t)
     (latex . t)
     (lilypond . t)
     (octave . t)
     ;; (perl . t)
     (plantuml . t)
     ;; (python . t)
     ;; (ruby . t)
     (shell . t)
     ;; (sqlite . t)
     ;; (R . t)
     ))
  (setq org-plantuml-jar-path "/opt/local/share/java/plantuml.jar")

  (add-hook 'org-babel-after-execute-hook
            (lambda ()
              (when org-inline-image-overlays
		(org-redisplay-inline-images))))

  ;; (add-to-list 'auto-mode-alist '("\\.puml\\'" . plantuml-mode))
  ;; (add-to-list 'auto-mode-alist '("\\.plantuml\\'" . plantuml-mode))

  ;; default article
  (setq org-latex-classes
	'(("article" "
	%!TEX TS-program = xelatex
	%!TEX encoding = UTF-8 Unicode

	\\documentclass[11pt,titlepage,a4paper]{article}
	\\usepackage{ctex}
	\\usepackage[top=3truecm,bottom=2.5truecm,left=1.1truecm,right=1.1truecm,bindingoffset=1.0truecm,
		     headsep=1.6truecm,
		     footskip=1.5truecm,
		     headheight=15pt    % 标准中没有要求页眉的高度，这里设置成15pt了
		     ]{geometry}
	%\\XeTeXlinebreaklocale \"zh\"
	%\\XeTeXlinebreakskip = 0pt plus 1pt minus 0.1pt
	%\\usepackage[top=1in,bottom=1in,left=0.8in,right=0.8in]{geometry}
	%\\usepackage[table]{xcolor}
	%\\definecolor{link}{HTML}{0366D6}
	%\\definecolor{lightgray}{rgb}{0.83, 0.83, 0.83}
	%\\definecolor{mintcream}{rgb}{0.96, 1.0, 0.98}
	%\\rowcolors{3}{lightgray!30}{white}
	%\\usepackage{fontspec}
	%\\newfontfamily\\zhfont[BoldFont=PingFang SC]{PingFang SC}
	%\\newfontfamily\\zhpunctfont{PingFang SC}
	%\\setmainfont{PingFang SC}
	%\\setsansfont{Hiragino Sans GB}
	%\\setmonofont[Scale=0.9]{PingFang SC}
	%\\usepackage{zhspacing}
	%\\zhspacing
	%\\usepackage{indentfirst}
	%\\usepackage[table]{xcolor}
	\\usepackage{xcolor}
	%\\definecolor{link}{HTML}{0366D6}
	% \\definecolor{lightgray}{rgb}{0.83, 0.83, 0.83}
	%\\definecolor{mintcream}{rgb}{0.96, 1.0, 0.98}
	%\\rowcolors{3}{lightgray!30}{white}
	\\usepackage{hyperref}
	%\\hypersetup{
	%  colorlinks=true,
	%   linkcolor=link,
	%   citecolor=[rgb]{0,0.47,0.68},
	%   filecolor=link,
	%   urlcolor=link,
	%   pagebackref=true,
	%   linktoc=all,
	% }
	%\\usepackage[outputdir=./build/tex]{minted}
	\\usepackage[utf8]{inputenc}
	\\usepackage{alltt}
	\\usepackage{caption}
	\\usepackage{listings}
	%                        \\usepackage{xcolor}
	\\usepackage{graphicx}
	\\usepackage{lmodern}
	\\DeclareCaptionFormat{listing}{\\rule{\\dimexpr\\textwidth+17pt\\relax}{0.4}\\vskip1pt#1#2#3}
	% \\captionsetup[lstlisting]{singlelinecheck=false, margin=0pt, font={bf,footnotesize}}
	\\definecolor{wine-stain}{rgb}{0.4,0.3,0.3}
	\\hypersetup{colorlinks,linkcolor=wine-stain,anchorcolor=black,linktoc=all,
	citecolor=black}
	[NO-DEFAULT-PACKAGES]
	"
	   ("\\section{%s}" . "\\section*{%s}")
	   ("\\subsection{%s}" . "\\subsection*{%s}")
	   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
	   ("\\paragraph{%s}" . "\\paragraph*{%s}")
	   ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))


  (unless (assoc "beamer" org-latex-classes)
    (add-to-list 'org-latex-classes
		 '("beamer" "
		     %!TEX TS-program = xelatex
		     %!TEX encoding = UTF-8 Unicode

		  \\documentclass[presentation]{beamer}
		     \\usepackage{ctex}
		     "
		   ("\\section{%s}" . "\\section*{%s}")
		   ("\\subsection{%s}" . "\\subsection*{%s}")
		   ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))))

  (add-to-list 'org-latex-packages-alist '("" "minted"))
  (setq org-latex-listings 'minted)

  ;; LaTex
  ;; (add-to-list 'org-latex-packages-alist '("" "listings" nil))
  ;; (setq org-latex-listings t)
  ;; rather do that for each file separately in header!!!
  (setq org-latex-listings-options
	'(("basicstyle" "\\small")
	  ;; ("keywordstyle" "\\color{black}\\bfseries\\underbar")
	  ("basicstyle" "\\footnotesize")
	  ("breakatwhitespace" "false")
	  ("breaklines" "true")
	  ("captionpos" "b")
	  ("deletekeywords" "{...}")
	  ("escapeinside" "{\\%*}{*)}")
	  ("extendedchars" "true")
	  ("frame" "single")
	  ("keepspaces" "true")
	  ("keywordstyle" "\\color{blue}")
	  ("otherkeywords" "{*,...}")
	  ("numbers" "left")
	  ("numbersep" "5pt")
	  ("numberstyle" "\\tiny\\color{black}")
	  ("rulecolor" "\\color{black}")
	  ("showspaces" "false")
	  ("showstringspaces" "false")
	  ("showtabs" "false")
	  ("stepnumber" "1")
	  ("tabsize" "2")))
  ;; (setq org-latex-listings-options '(("breaklines" "true")
  ;;                                    ("numberstyle" "\\tiny\\color{black}")
  ;;                                    ))

  ;; ;; letter
  ;; (add-to-list 'org-latex-classes
  ;;              '("letter"
  ;;                "\\documentclass[11pt]{letter}\n
  ;;                   \\usepackage[utf8]{inputenc}\n
  ;;                   \\usepackage[T1]{fontenc}\n
  ;;                   \\usepackage{color}"

  ;;                ("\\section{%s}" . "\\section*{%s}")
  ;;                ("\\subsection{%s}" . "\\subsection*{%s}")
  ;;                ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
  ;;                ("\\paragraph{%s}" . "\\paragraph*{%s}")
  ;;                ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))


  ;; (add-to-list 'org-latex-packages-alist '("" "ctex"))
  ;; ;; (add-to-list 'org-latex-packages-alist '("" "minted"))
  ;; (add-to-list 'org-latex-packages-alist '("" "color"))
  ;; (add-to-list 'org-latex-packages-alist '("" "geometry"))
  (add-to-list 'org-latex-packages-alist '("" "tabularx"))
  (add-to-list 'org-latex-packages-alist '("" "tabu"))
  (setq org-latex-default-table-environment "tabu")
  ;; (add-to-list 'org-latex-packages-alist '("" "fancyhdr"))
  ;; (add-to-list 'org-latex-packages-alist '("" "natbib"))
  ;; (add-to-list 'org-latex-packages-alist '("" "titlesec"))

  ;; code snippet comes from
  ;; ;; http://joat-programmer.blogspot.com/2013/07/org-mode-version-8-and-pdf-export-with.html
  ;; ;; Include the latex-exporter
  ;; ;; check whether org-mode 8.x is available
  ;; (when (require 'ox-latex nil 'noerror)
  ;;   ;; You need to install pygments to use minted
  ;;   (when (executable-find "pygmentize")
  ;;     ;; Add minted to the defaults packages to include when exporting.
  ;;     (add-to-list 'org-latex-packages-alist '("" "minted"))
  ;;     ;; (add-to-list 'org-latex-minted-langs '(calc "mathematica"))

  ;;     ;; Tell the latex export to use the minted package for source
  ;;     ;; code coloration.
  ;;     (setq org-latex-listings 'minted)

  ;;     ;; ;; Let the exporter use the -shell-escape option to let latex
  ;;     ;; ;; execute external programs.
  ;;     ;; ;; This obviously and can be dangerous to activate!
  ;;     ;; (setq org-latex-minted-options
  ;;     ;;       '(;; ("obeytabs" "true")
  ;;     ;;         ;; ("mathescape" "true")
  ;;     ;;         ("linenos" "false")
  ;;     ;;         ;; ;; ("numbersep" "5pt")
  ;;     ;;         ;; ;; ("frame" "none")
  ;;     ;;         ;; ("frame" "leftline")
  ;;     ;;         ;; ;; ("frame" "lines")
  ;;     ;;         ;; ("framerule" "0.2pt")
  ;;     ;;         ;; ("framesep" "2mm")
  ;;     ;;         ;; ;; ("bgcolor" "lgray")
  ;;     ;;         ;; ;; ("bgcolor" "mintedbg")
  ;;     ;;         ("tabsize" "2")
  ;;     ;;         ("fontsize" "\\scriptsize")
  ;;     ;;         ;; ;; ("fontsize" "\\scriptsize")
  ;;     ;;         ))
  ;;     ;; (setq org-latex-pdf-process
  ;;     ;;       '("xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
  ;;     ;;         "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
  ;;     ;;         "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
  ;;     ;;         "rm -fr %b.out %b.log %b.tex auto"
  ;;     ;;         ))
  ;;     ))
  ;;
  ;;

  ;; (setq org-latex-pdf-process '("xelatex -interaction nonstopmode %f"
  ;;				  "xelatex -interaction nonstopmode %f"))
  ;; (setq org-latex-pdf-process
  ;;       '("xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
  ;;         "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
  ;;         "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
  ;;         "rm -fr %b.out %b.log %b.tex auto"
  ;;         ))

  ;; (setq org-latex-default-packages-alist
  ;;	  (remove '("AUTO" "inputenc" t) org-latex-default-packages-alist))

  (setq
   org-export-preserve-breaks t
   org-latex-caption-above nil ;; 表格等标题置于下方
   org-export-latex-listings t
   org-export-latex-tables-column-borders t ;; 表格边框
   org-latex-image-default-width "0.5\\textwidth"
   org-latex-toc-command "\\tableofcontents\n\\clearpage\n" ;; 目录自动分页
   ;; org-latex-pdf-process  '("xelatex -shell-escape -interaction nonstopmode -output-directory %o %f")
   org-latex-pdf-process
   '("xelatex --shell-escape -interaction nonstopmode -output-directory %o %f"
     "xelatex --shell-escape -interaction nonstopmode -output-directory %o %f"
     "xelatex --shell-escape -interaction nonstopmode -output-directory %o %f")

   ;; org-latex-pdf-process '("/Library/TeX/texbin/latexmk -pdflatex='xelatex -shell-escape -interaction nonstopmode' -pdf -f %f")

   ;; org-latex-pdf-process   '("/Library/TeX/texbin/latexmk -pdflatex='pdflatex -interaction nonstopmode' -pdf -bibtex -f %f")
   ;; (setq org-latex-pdf-process '("/Library/TeX/texbin/latexmk -e '$latex=q/uplatex %S/' -e '$bibtex=q/upbibtex %B/' -e '$biber=q/biber --bblencoding=utf8 -u -U --output_safechars %B/' -e '$makeindex=q/upmendex -o %D %S/' -e '$dvipdf=q/dvipdfmx -o %D %S/' -norc -gg -pdfdvi %f"))
   ;; (setq org-latex-pdf-process '("/Library/TeX/texbin/latexmk -e '$latex=q/uplatex %S/' -e '$bibtex=q/upbibtex %B/' -e '$biber=q/biber --bblencoding=utf8 -u -U --output_safechars %B/' -e '$makeindex=q/upmendex -o %D %S/' -e '$dvips=q/dvips -Ppdf -z -f %S | convbkmk -u > %D/' -e '$ps2pdf=q/ps2pdf %S %D/' -norc -gg -pdfps %f"))
   ;; (setq org-latex-pdf-process '("/Library/TeX/texbin/latexmk -e '$pdflatex=q/platex-ng %S/' -e '$bibtex=q/upbibtex %B/' -e '$biber=q/biber --bblencoding=utf8 -u -U --output_safechars %B/' -e '$makeindex=q/upmendex -o %D %S/' -norc -gg -pdf %f"))
   ;; (setq org-latex-pdf-process '("/Library/TeX/texbin/latexmk -e '$pdflatex=q/pdflatex %S/' -e '$bibtex=q/bibtex %B/' -e '$biber=q/biber --bblencoding=utf8 -u -U --output_safechars %B/' -e '$makeindex=q/makeindex -o %D %S/' -norc -gg -pdf %f"))
   ;; org-latex-pdf-process
   ;; '("/Library/TeX/texbin/latexmk -e '$pdflatex=q/lualatex %S/' -e '$bibtex=q/upbibtex %B/' -e '$biber=q/biber --bblencoding=utf8 -u -U --output_safechars %B/' -e '$makeindex=q/upmendex -o %D %S/' -norc -gg -pdf %f")
   ;; (setq org-latex-pdf-process '("/Library/TeX/texbin/latexmk -e '$pdflatex=q/luajitlatex %S/' -e '$bibtex=q/upbibtex %B/' -e '$biber=q/biber --bblencoding=utf8 -u -U --output_safechars %B/' -e '$makeindex=q/upmendex -o %D %S/' -norc -gg -pdf %f"))
   ;; (setq org-latex-pdf-process '("/Library/TeX/texbin/latexmk -e '$pdflatex=q/xelatex %S/' -e '$bibtex=q/upbibtex %B/' -e '$biber=q/biber --bblencoding=utf8 -u -U --output_safechars %B/' -e '$makeindex=q/upmendex -o %D %S/' -norc -gg -pdf %f"))
   org-file-apps
   ;; '(("pdf" . "/usr/bin/open -a PDFGuru\\ Pro.app %s"))
   '(("pdf" . "/usr/bin/open -a Preview.app %s")
     ;; ("pdf" . "/usr/bin/open -a PDF\\ Reader\\ X\\ Pro.app %s")
     ;; ("pdf" . "/usr/bin/open -a /Applications/Skim.app %s")
     )
   ;; org-latex-toc-command "\\tableofcontents\\newpage"
   ;; org-latex-pdf-process
   ;;    '("xelatex -shell-escape -interaction nonstopmode %f"
   ;;      "xelatex -shell-escape -interaction nonstopmode %f"
   ;;      "xelatex -shell-escape -interaction nonstopmode %f")
   ;; org-latex-pdf-process
   ;; '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
   ;;   "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
   ;;   "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
   ;;   "rm -fr %b.out %b.log %b.tex auto")
   ;; org-latex-pdf-process '(
   ;;                         "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
   ;;                         "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
   ;;                         "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
   ;;                         "rm -fr %b.out %b.log %b.tex auto"
   ;;                         )
   org-latex-default-class "article")
  ;; ;; auto save all org files after doing a common action
  ;; (advice-add 'org-agenda-quit      :before #'org-save-all-org-buffers)
  ;; ;; (advice-add 'org-agenda-schedule  :after #'org-save-all-org-buffers)
  ;; (advice-add 'org-agenda-todo      :after #'org-save-all-org-buffers)
  ;; (advice-add 'org-agenda-refile    :after #'org-save-all-org-buffers)
  ;; (advice-add 'org-agenda-clock-in  :after #'org-save-all-org-buffers)
  ;; ;; (advice-add 'org-agenda-clock-out :after #'org-save-all-org-buffers)

  ;; ;; (advice-add 'org-deadline         :after #'org-save-all-org-buffers)
  ;; ;; (advice-add 'org-schedule         :after #'org-save-all-org-buffers)
  ;; ;; (advice-remove 'org-schedule  #'org-save-all-org-buffers)

  ;; (advice-add 'org-todo             :after #'org-save-all-org-buffers)
  ;; (advice-add 'org-refile           :after #'org-save-all-org-buffers)
  ;; ;; (advice-add 'org-clock-in         :after #'org-save-all-org-buffers)
  ;; ;; (advice-add 'org-clock-out        :after #'org-save-all-org-buffers)
  ;; (advice-add 'org-store-log-note   :after #'org-save-all-org-buffers)

  ;; (advice-add 'org-deadline       :after (η #'org-save-all-org-buffers))
  ;; (advice-add 'org-schedule       :after (η #'org-save-all-org-buffers))
  ;; (advice-add 'org-store-log-note :after (η #'org-save-all-org-buffers))
  ;; (advice-add 'org-todo           :after (η #'org-save-all-org-buffers))
  ;; (advice-add 'org-refile         :after (η #'org-save-all-org-buffers))
  ;; (advice-add 'org-clock-in       :after (η #'org-save-all-org-buffers))
  ;; (advice-add 'org-clock-out      :after (η #'org-save-all-org-buffers))
  ;; (advice-add 'org-agenda-todo    :after (η #'org-save-all-org-buffers))
  ;; (advice-add 'org-agenda-refile  :after (η #'org-save-all-org-buffers))
  ;; (advice-add 'org-agenda-clock-in :after (η #'org-save-all-org-buffers))
  ;; (advice-add 'org-agenda-quit :after (η #'org-save-all-org-buffers))
  ;; (setq org-modules (append org-modules '(org-drill)))
  (dolist (command '(org-agenda-archive
		     org-agenda-archive-default
		     org-sort-entries
		     org-roam-refile
		     org-roam-extract-subtree
		     org-agenda-quit
		     org-agenda-todo
		     org-agenda-refile
		     org-agenda-clock-in
		     org-agenda-clock-out
		     org-deadline
		     org-schedule
		     org-todo
		     org-refile
		     org-clock-in
		     org-clock-out
		     org-clock-report
		     org-clock-cancel
		     org-archive-subtree
		     org-archive-subtree-default
		     org-agenda-set-effort
		     org-cut-special
		     org-pomodoro))
    (advice-add command :after (η #'org-save-all-org-buffers))
    ;; (advice-add command :after  #'org-save-all-org-buffers)
    ))

(bind-key "C-c l" #'org-store-link)
(bind-key "C-c c" #'org-capture)
(bind-key "C-c a" #'org-agenda)

(use-package org-contrib
  :after org
  :straight t)
#+end_src

** org-download

#+begin_src emacs-lisp
(use-package org-download
  :straight t
  :ensure t
  :hook ((org-mode dired-mode) . org-download-enable)
  :commands (org-download-enable
               org-download-yank
               org-download-screenshot
	       )
  :config
  (defun my-org-download-method (link)
      (let ((filename
             (file-name-nondirectory
              (car (url-path-and-query
                    (url-generic-parse-url link)))))
            (dirname (concat "imgs/" (file-name-sans-extension (buffer-name)))))
        (unless (file-exists-p dirname)
          (make-directory dirname))
        (expand-file-name filename dirname)))
    (setq org-download-method 'my-org-download-method)
  ;; (setq-default org-download-image-dir "~/Pictures/foo/")
  ;; (setq-default org-download--dir "~/Pictures/foo/")

  ;; (defun +org-download-method (link)
  ;;   (org-download--fullname (org-link-unescape link)))
  ;; (setq org-download-method '+org-download-method)

  ;; (setq org-download-annotate-function (lambda (_link) "")
  ;;       org-download-method 'attach
  ;;       org-download-screenshot-method "screencapture -i %s")
  ;; (setq org-download-method 'directory)
  ;; (setq org-download-image-dir "./images/")
    (setq org-download-method 'my-org-down-method)
  (setq org-download-heading-lvl nil)
  (setq org-download-timestamp "%Y%m%d-%H%M%S_")
  (setq org-image-actual-width 300)
  (setq  org-download-image-attr-list '("#+ATTR_HTML: :width 80% :align center"))
  :bind
  ("<f6>" . org-download-screenshot))
#+end_src

** org-agenda
#+begin_src emacs-lisp
(use-package org-agenda
  :ensure nil
  :straight nil
  :after (org hydra)
  :hook (org-agenda-finalize . org-agenda-to-appt)
  :config
  ;; ;; update appt list per 10 minutes
  ;; (run-at-time nil 600 'org-agenda-to-appt)
  :init
  (unless (fboundp 'native-comp-available-p)
    ;; Fix `void-function native-comp-available-p`
    (defun native-comp-available-p ()
      nil))
  :custom
  ;; appt
  (appt-display-format 'window)
  (appt-disp-window-function
   (lambda(min-to-app new-time msg)(terminal-notify "Reminder" (format "%s" msg))))
  (appt-display-interval 1) ;; 每过1分钟提醒一次
  (appt-message-warning-time 5) ;; set appt waring to 15 minutes prior to appointment
  ;; (appt-display-duration 20) ;; 这里已经被notify-send接管了，所以此处持续时间无效)
  (appt-display-mode-line t) ;; show in the modeline
  ;; (org-agenda-files `(,org-directory))
  (org-agenda-insert-diary-extract-time t)
  (org-agenda-compact-blocks t)
  (org-agenda-block-separator nil)
  (org-agenda-sticky t)
  ;; Do not dim blocked tasks
  (org-agenda-dim-blocked-tasks nil)
  ;; Compact the block agenda view
  (org-agenda-compact-blocks t)
  ;; holidays
  (org-agenda-include-diary t)
  (org-agenda-include-deadlines t)
  (org-agenda-todo-ignore-deadlines nil)
  (org-agenda-follow-indirect t)
  (org-agenda-inhibit-startup t)
  (org-agenda-show-all-dates t)
  (org-agenda-time-leading-zero t)
  (org-agenda-start-with-log-mode t)
  (org-agenda-start-with-clockreport-mode t)
  (org-agenda-hide-tags-regexp ":\\w+:")
  (org-agenda-todo-ignore-with-date nil)
  (org-agenda-todo-ignore-deadlines 'far)
  ;; (org-agenda-todo-ignore-scheduled 'all)
  (org-agenda-todo-ignore-timestamp nil)
  (org-agenda-skip-deadline-if-done t)
  (org-agenda-skip-scheduled-if-done t)
  (org-agenda-skip-timestamp-if-done t)
  (org-agenda-skip-unavailable-files t)
  (org-agenda-skip-scheduled-delay-if-deadline t)
  (org-agenda-skip-scheduled-if-deadline-is-shown t)
  (org-agenda-skip-additional-timestamps-same-entry t)
  (org-agenda-text-search-extra-files '(agenda-archives))
  (org-agenda-clockreport-parameter-plist
   '(:link t :maxlevel 5 :fileskip0 t :compact nil :narrow 80))
  (org-agenda-columns-add-appointments-to-effort-sum t)
  (org-agenda-restore-windows-after-quit t)
  (org-agenda-window-setup 'current-window)
  ;; starts from Monday
  (org-agenda-start-on-weekday 1)
  (org-agenda-use-time-grid t)
  (org-agenda-timegrid-use-ampm nil)
  (org-agenda-search-headline-for-time nil)
  (org-agenda-prefix-format
   '((agenda . " %i %-12:c%?-12t% s%b")
     (todo . " %i %b")
     ;; (todo . "[%-4e] % t % s %?-17b")
     ;;(tags . "[%-4e] %-17(org-format-outline-path (org-get-outline-path))")
     ;; (search . "[%-4e] %?-17b")
     )
   )
  (org-agenda-custom-commands `(
				("1" "Events" agenda "display deadlines and exclude scheduled"
				 ((org-agenda-span 'month)
				  (org-agenda-time-grid nil)
				  (org-agenda-show-all-dates nil)
				  (org-agenda-entry-types '(:deadline)) ;; this entry excludes :scheduled
				  (org-deadline-warning-days 0)))
				("2" "Show Work GTD & meeting appointment" todo ""
				 ((org-agenda-files '(,+org-capture-work-gtd-file
						      ,+org-capture-work-meeting-file))))))
  (org-id-locations-file (expand-file-name "org-id-locations" poly-cache-dir))
  :config
  (appt-activate 1)
  ;; (org-agenda-to-appt)
  )
#+end_src
** Write codes in org-mode
#+begin_src emacs-lisp
  (use-package org-src
  :straight nil
  :ensure nil
  :after org
  :hook (org-babel-after-execute . org-redisplay-inline-images)
  :bind (:map org-src-mode-map
              ;; consistent with separedit/magit
              ("C-c C-c" . org-edit-src-exit))
  :custom
  (org-src-fontify-natively t)
  (org-src-tab-acts-natively t)
  (org-src-preserve-indentation t)
  (org-src-window-setup 'current-window)
  (org-confirm-babel-evaluate nil)
  (org-edit-src-content-indentation 0)
  (org-src-lang-modes '(("C"      . c)
                        ("C++"    . c++)
                        ("bash"   . sh)
                        ("cpp"    . c++)
                        ("dot"    . graphviz-dot)
                        ("elisp"  . emacs-lisp)
                        ("ocaml"  . tuareg)
                        ("shell"  . sh)
                        ("sqlite" . sql)))
  (org-babel-load-languages '((awk        . t)
                              (C          . t)
                              (calc       . t)
                              (dot        . t)
                              (emacs-lisp . t)
                              (eshell     . t)
                              (gnuplot    . t)
                              (ocaml      . t)
                              (python     . t)
                              (shell      . t)
                              (sql        . t))))

;; (use-package ob
;;   :straight nil
;;   :after org
;;   :config
;;   (require 'ob-clojure)
;;   (setq org-babel-clojure-backend 'cider))

#+end_src

** org-tempo

#+begin_src emacs-lisp
    (use-package org-tempo
      :straight nil
      :hook (org-mode . (lambda()
			  (require 'org-tempo)))
      )

  ;; (with-eval-after-load "org"
  ;;   (require 'org-tempo))
#+end_src

** org-habbit
#+begin_src emacs-lisp
       (use-package org-habit
         :straight nil
         :ensure nil
         :after org
         :custom
         (org-habit-show-habits t)
         (org-habit-show-all-today t))
#+end_src
** task
#+begin_src emacs-lisp
(use-package ox-taskjuggler
  :straight (:type built-in)
  :after (org osx)
  :custom
  (org-taskjuggler-process-command  "tj3 --silent --no-color --output-dir %o %f && open %o/Plan.html")
  :init
  (setq org-taskjuggler-default-global-properties
	"shift s39 \"Full time shift\" {
	   workinghours mon-fri 9:00-12:00,13:00-19:00
	}")
  (setq org-duration-units `(("min" . 1)
			     ("h" . 60)
			     ("d" . ,(* 60 8))
			     ("w" . ,(* 60 8 5))
			     ("m" . ,(* 60 8 5 4))
			     ("y" . ,(* 60 8 5 4 10))))
  (org-duration-set-regexps)
  :hook (org-mode . (lambda()
		      (require 'ox-taskjuggler)))
  :config
  (add-to-list 'org-export-backends 'taskjuggler)
  ;; (require 'ox-taskjuggler)
  ;; (require 'ox-taskjuggler)
  ;; (require 'taskjuggler-mode)
  ;; (setq org-export-taskjuggler-target-version 3.6
  ;;	org-export-taskjuggler-project-tag "project"
  ;;	org-export-taskjuggler-resource-tag "resource"
  ;;	org-export-taskjuggler-default-project-duration 16256
  ;;	org-export-taskjuggler-default-global-properties "rversion")
  ;; ;; (setq org-taskjuggler-default-reports '("include \"/Users/chenlong/.emacs.d/lisp/reports.tji\""))
  )
#+end_src

** bullet
#+begin_src emacs-lisp
(use-package org-bullets
  :straight t
  :commands (org-bullets-mode org-bullets)
  :hook (org-mode . org-bullets-mode)
  :custom
  (org-bullets-bullet-list '("⊢" "⋮" "⋱" "⋱" "⋱"))
  ;; (setq org-bullets-bullet-list '("🐳" "🐬" "🐠" "🐟" "🐤"))
  ;; (setq )
  ;; (setq org-bullets-bullet-list '("①" "②" "③" "④" "⑤" "⑥" "⑦" "⑧" "⑨"))
  )
#+end_src

** kanban
#+begin_src emacs-lisp
(use-package org-kanban
  :straight t
  :commands (org-kanban/initialize-at-end)
  ;; :ensure t
  ;; :defer t
  :after org
  :config
  (setq-default org-kanban/layout '("..." . 30))
  )
#+end_src

** org-crypt
#+begin_src emacs-lisp
(use-package org-crypt
  :straight nil
  :after org
  :config
  (org-crypt-use-before-save-magic)
  (setq org-tags-exclude-from-inheritance (quote ("crypt")))
  ;; (setq org-crypt-disable-auto-save 'encrypt)
  (setq org-crypt-disable-auto-save t)
  ;; GPG key to use for encryption
  ;; Either the Key ID or set to nil to use symmetric encryption.
  (setq org-crypt-key "FC6BDB92CD5BEB22")
  :bind
  (:map org-mode-map
	("C-c e" . org-encrypt-entry)
	("C-c E" . org-encrypt-entries)
	("C-c d" . org-decrypt-entry)
	("C-c D" . org-decrypt-entries)
	;; ("C-c I" . org-insert-epa-file-local-variables)
	))
#+end_src
** Toggle markup visibility with visible mode
#+begin_src emacs-lisp
  (with-eval-after-load "org"
    (define-key org-mode-map (kbd "C-c v") 'visible-mode))
#+end_src

** org-dashboard
#+begin_src emacs-lisp
(use-package org-dashboard
  :straight t
  :after org
  )
#+end_src

#+begin_src emacs-lisp
(defun org-unlinkify ()
  "Replace an org-link with the path, or description."
  (interactive)
  (let ((eop (org-element-context)))
    (when (eq (org-element-type eop) 'link)
      (save-excursion
	(let* ((start (org-element-property :begin eop))
	       (end (org-element-property :end eop))
	       (contents-begin (org-element-property :contents-begin eop))
	       (contents-end (org-element-property :contents-end eop))
	       (path (org-element-property :path eop))
	       (desc (and contents-begin
			  contents-end
			  (buffer-substring-no-properties contents-begin contents-end))))
	  (setf (buffer-substring-no-properties start end) (or desc path)))))))

(defalias 'org-delinkify 'org-unlinkify)

(defun org-refile-and-link ()
  "Refile heading, adding a link to the new location.
Prefix arguments are interpreted by `org-refile'."
  (interactive)
  (when (member current-prefix-arg '(3 (4) (16)))
    (user-error "Linking is incompatible with that prefix argument"))
  (let ((heading  (org-get-heading t t))
	(orig-file (buffer-file-name)))
    (call-interactively #'org-refile)
    (let* ((refile-file
	    (bookmark-get-filename
	     (assoc (plist-get org-bookmark-names-plist :last-refile)
		    bookmark-alist)))
	   (same-file (string= orig-file refile-file))
	   (link (if same-file
		     (concat "*" heading)
		   (concat refile-file "::*" heading)))
	   (desc heading))
      (open-line 1)
      (insert (org-make-link-string link desc)))))

(defun my-org-insert-last-stored-link (arg)
  "Insert the last link stored in `org-stored-links' like
`org-insert-last-stored-link', but without a trailing newline."
  (interactive "p")
  (org-insert-all-links arg "" ""))

(bind-key [remap org-insert-last-stored-link]  #'my-org-insert-last-stored-link 'org-mode-map)
#+end_src

** org-present

#+begin_src emacs-lisp
(use-package org-present
  :straight t
  :after org
  :config
  (add-hook 'org-present-mode-hook
            (lambda ()
	      (org-present-big)
	      (org-display-inline-images)
	      ;; (global-linum-mode -1)
	      (global-hl-line-mode -1)))
  (add-hook 'org-present-mode-quit-hook
            (lambda ()
	      (org-present-small)
	      (org-remove-inline-images)
	      ;; (global-linum-mode)
	      (global-hl-line-mode 1))))
#+end_src

** others
#+begin_src emacs-lisp
  (use-package org-ref
    :straight t
    :after org
    :config
    (setq
     org-latex-prefer-user-labels t
     ;; open pdf inside emacs
     bibtex-completion-pdf-open-function 'find-file
     ;; open pdf outside emacs
     ;; bibtex-completion-pdf-open-function 'org-open-file
     org-ref-get-pdf-filename-function 'org-ref-get-pdf-filename-helm-bibtex
     ;; reftex-default-bibliography (list zot_bib)
     ;; org-ref-default-bibliography (list zot_bib)
     ;; org-ref-bibliography-notes (concat org_notes "notes.org")
     org-ref-note-title-format "* TODO %y - %t\n :PROPERTIES:\n  :Custom_ID: %k\n  :NOTER_DOCUMENT: %F\n :ROAM_KEY: cite:%k\n  :AUTHOR: %9a\n  :JOURNAL: %j\n  :YEAR: %y\n  :VOLUME: %v\n  :PAGES: %p\n  :DOI: %D\n  :URL: %U\n :END:\n\n"
     ;; org-ref-notes-directory org_notes
     org-ref-notes-function 'orb-edit-notes
     ))

(use-package bibtex
  :straight t
  :after org
  :config
  (setq
   ;; org-ref-completion-library 'org-ref-ivy-cite
   ;; bibtex-completion-notes-path org_notes
   ;; bibtex-completion-bibliography zot_bib
   bibtex-completion-pdf-field "file"
   bibtex-completion-additional-search-fields '(tags)
   bibtex-completion-notes-template-multiple-files (concat
						    "#+TITLE: ${title}\n"
						    "#+ROAM_KEY: cite:${=key=}\n"
						    "* TODO Notes\n"
						    ":PROPERTIES:\n"
						    ":Custom_ID: ${=key=}\n"
						    ":NOTER_DOCUMENT: %(orb-process-file-field \"${=key=}\")\n"
						    ":AUTHOR: ${author-abbrev}\n"
						    ":JOURNAL: ${journaltitle}\n"
						    ":DATE: ${date}\n"
						    ":YEAR: ${year}\n"
						    ":DOI: ${doi}\n"
						    ":URL: ${url}\n"
						    ":END:\n\n"
						    )
   ;; bibtex-completion-display-formats
   ;;     '((article       . "${author:36} ${title:*} ${journal:40} ${year:4} ${=has-pdf=:1}${=has-note=:1} ${=type=:3}")
   ;;       (inbook        . "${author:36} ${title:*} Chapter ${chapter:32} ${year:4} ${=has-pdf=:1}${=has-note=:1} ${=type=:3}")
   ;;       (incollection  . "${author:36} ${title:*} ${booktitle:40} ${year:4} ${=has-pdf=:1}${=has-note=:1} ${=type=:3}")
   ;;       (inproceedings . "${author:36} ${title:*} ${booktitle:40} ${year:4} ${=has-pdf=:1}${=has-note=:1} ${=type=:3}")
   ;;       (t             . "${author:36} ${title:*} ${year:4} ${=has-pdf=:1}${=has-note=:1} ${=type=:3}"))

   ))


;; pdf-tools - Emacs support library for PDF files.
;; https://github.com/politza/pdf-tools
;; http://pragmaticemacs.com/emacs/view-and-annotate-pdfs-in-emacs-with-pdf-tools/
(use-package pdf-tools
  :defer t
  :straight t
  :config
  ;; initialize
  (setenv "PKG_CONFIG_PATH" "/opt/local/lib/pkgconfig:/opt/X11/lib/pkgconfig")

  (pdf-tools-install)

  ;; open pdfs scaled to fit page
  (setq-default pdf-view-display-size 'fit-page)

  ;; automatically annotate highlights
  (setq pdf-annot-activate-created-annotations t)

  ;; enable imenu outline
  (pdf-outline-imenu-enable)

  ;; use normal isearch
  (define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward)
  )

(use-package pdf-continuous-scroll-mode
  :defer t
  :straight (:host github :repo "dalanicolai/pdf-continuous-scroll-mode.el")
  :after pdf-tools
  :config
  (add-hook 'pdf-view-mode-hook 'pdf-continuous-scroll-mode))

;; remember pdf position
;; https://github.com/politza/pdf-tools/issues/18
;; Save place in pdf-view buffers for Emacs
;; https://github.com/nicolaisingh/saveplace-pdf-view
(use-package saveplace-pdf-view
  :after pdf-tools
  :defer t
  :config
  (save-place-mode 1))

;; org-noter
(use-package org-noter
  :after (org pdf-tools)
  :straight t
  :config
  (setq
   ;; The WM can handle splits
   ;; org-noter-notes-window-location 'other-frame
   ;; todo frame jump
   ;; Please stop opening frames
   ;; org-noter-always-create-frame nil
   org-noter-always-create-frame nil
   org-noter-auto-save-last-location t
   ;; org-noter-notes-window-location 'other-frame
   ;; I want to see the whole file
   org-noter-hide-other nil
   ;; Everything is relative to the main notes file
   ;; org-noter-notes-search-path (list org_notes)
   )
  )

(use-package mixed-pitch
  :straight t
  :hook
  (text-mode . mixed-pitch-mode))

(use-package org-analyzer
  :straight t
  :after org
  :custom
  (org-analyzer-org-directory org-beorg-directory))


;; devonthink
(use-package org-devonthink
  :straight (:host github :repo "lasvice/org-devonthink"))
#+end_src

** Clocking

#+begin_src emacs-lisp
(use-package org-clock
  :straight nil
  ;; ensure we always run org-clock-persistence-insinuate below
  :demand t
  :after (org alert)
  :custom
  (org-clock-persist 'history)
  (org-clock-persist-file (expand-file-name "org-clock-save.el" poly-cache-dir))
  (org-clock-sound t)
  (org-clock-in-resume t)
  (org-clock-idle-time 10)
  (org-clock-into-drawer t)
  (org-clock-out-when-done t)
  (org-clock-history-length 20)
  (org-clock-mode-line-total 'today)
  (org-clock-display-default-range 'thisweek)
  (org-clock-in-switch-to-state "DOING")
  ;; (org-clock-out-switch-to-state "WAIT")
  (org-clock-out-remove-zero-time-clocks t)
  (org-clock-report-include-clocking-task t)
  (org-clock-clocked-in-display 'mode-line)
  ;; (org-clock-clocked-in-display nil)
  :config
  (org-clock-persistence-insinuate)
  (setq org-show-notification-handler
	'(lambda (m)
	   (let ((ring-bell-function nil))
	     (org-clock-play-sound org-clock-sound)
	     (alert m :timeout 1200 :title "Org Clock Notify" :severity 'high))))
  :bind
  ("C-c C-x C-i" . org-clock-in)
  ("C-c C-x C-o" . org-clock-out)
  ("C-c C-x C-x" . org-clock-in-last))

(use-package org-clock-budget
  :straight (org-clock-budget
             :host github
             :repo "Fuco1/org-clock-budget"
             )
  :commands (org-clock-budget-report)
  :init
  (defun my-buffer-face-mode-org-clock-budget ()
    "Sets a fixed width (monospace) font in current buffer"
    (interactive)
    ;; (setq buffer-face-mode-face '(:family "Iosevka" :height 1.0))
    (buffer-face-mode)
    (setq-local line-spacing nil))
  :config
  (add-hook 'org-clock-budget-report-mode-hook (lambda()
						 (progn
						   (toggle-truncate-lines 1)
						   (my-buffer-face-mode-org-clock-budget)
						   )
						 ))
  )

;; (use-package secretaria
;;   :straight t
;;   :after (alert f s)
;;   :custom
;;   (secretaria-clocked-task-save-file
;;    (expand-file-name "secretaria-clocked-task" poly-cache-dir))
;;   ;; remind me about every 10 minutes
;;   (secretaria-clocked-in-reminder-every-minutes 10)
;;   (secretaria-today-unknown-time-appt-remind-every 10)
;;   :config
;;   ;; use this for getting a reminder every 30 minutes of those tasks scheduled
;;   ;; for today and which have no time of day defined.
;;   (add-hook 'after-init-hook #'secretaria-unknown-time-always-remind-me))

;; (use-package org-mru-clock
;;   :straight t
;;   :after (org org-clock)
;;   :bind (("C-c C-x C-j" . org-clock-goto)
;;          ("C-c C-x C-k" . org-mru-clock-in))
;;   :custom
;;   (org-mru-clock-how-many 100)
;;   (org-mru-clock-keep-formatting t)
;;   (org-mru-clock-predicate nil))

(defvar poly/previously-clocking '())

(defun poly/temporarily-clock-out ()
  (interactive)
  (save-window-excursion
    (if (org-clocking-p)
        (progn
          (org-clock-goto)
          (add-to-list 'poly/previously-clocking
		       (cons org-clock-heading (org-id-get-create)))
          (org-clock-out))
      (message "No clock is active now.")
      )))

(defun poly/mark-clocking-task-as-todo-and-clock-out ()
  (interactive)
  (save-window-excursion
    (if (org-clocking-p)
        (progn
          (org-clock-goto)
          (add-to-list 'poly/previously-clocking
		       (cons org-clock-heading (org-id-get-create)))
          (org-todo 'todo)
          (org-clock-out)
          (save-buffer))
      (message "No clock is active now."))))

(defun poly/resume-previous-clock (id)
  (interactive)
  (save-window-excursion
    (org-id-goto id)
    (org-clock-in)
    (poly/remove-previous-clock id)))

(defun poly/remove-previous-clock (id)
  (when (not (null id))
    (setq poly/previously-clocking
          (--remove (s-equals? id (cdr it)) poly/previously-clocking))))

(defun poly/mark-clocking-task-as-done ()
  "Find current clocking task and mark it as done."
  (interactive)
  (save-window-excursion
    (if (org-clocking-p)
        (progn
          (org-clock-goto)
          (org-todo 'done)
          (poly/remove-previous-clock (org-id-get))
          (save-buffer))
      (message "No clock is active now."))))

(bind-key "C-c C-x C-d" 'poly/mark-clocking-task-as-done)
(bind-key "C-c C-x C-d" 'poly/mark-clocking-task-as-done org-mode-map)
#+end_src

** org-roam

#+begin_src emacs-lisp
;; https://github.com/iecaser/Configurations/blob/a7e61c25c49556b33d7888599a853da9d4c9cb95/.doom.d/note.el
;; https://www.orgroam.com/manual/Installation-_00281_0029.html#Installation-_00281_0029
(use-package org-roam
  :straight t
  ;; ;; :straight (:files (:defaults "extensions/*"))
  ;; :straight (:host github :repo "org-roam/org-roam"
  ;; 		     :files (:defaults "extensions/*"))
  :ensure t
  :hook
  (after-init . org-roam-mode)
  :init
  (setq org-roam-v2-ack t)
  :commands (org-roam-buffer-toggle-display
             org-roam-find-file
             org-roam-graph
             org-roam-insert
             org-roam-switch-to-buffer
             org-roam-dailies-date
             org-roam-dailies-today
             org-roam-dailies-tomorrow
             org-roam-dailies-yesterday)
  :after org
  :custom
  (org-roam-file-exclude-regexp ".pdf$|.tex$|.bib$|.html$|.log$|.out$|.xml$|agendas.org$")
  (org-roam-verbose nil)  ; https://youtu.be/fn4jIlFwuLU
  (org-roam-buffer-no-delete-other-windows t); make org-roam buffer sticky
  ;; org-roam-graph-viewer "google-chrome-stable"
  (org-roam-completion-system 'default)
  (org-roam-completion-everywhere t)
  (org-roam-db-location (expand-file-name "org-roam.db" poly-cache-dir))
  :config
  (setq org-roam-directory (expand-file-name "Library/Mobile Documents/iCloud~com~appsonthemove~beorg/Documents/org/beorg/" "~"))
  ;; For org-roam to update LAST_MODIFIED field
  (require 'time-stamp)
  (add-hook 'write-file-functions 'time-stamp) ; update when saving
  ;; for org-roam-buffer-toggle
  ;; Recommendation in the official manual
  (add-to-list 'display-buffer-alist
	       '("\\*org-roam\\*"
                 (display-buffer-in-direction)
                 (direction . right)
                 (window-width . 0.33)
                 (window-height . fit-window-to-buffer)))

  ;; #+LATEX_HEADER: \\addbibresource{~/Cloud/Documents/bib/zotLib.bib}
  ;;     (setq org-roam-capture-templates
  ;; 	  (quote
  ;; 	   (("d" "default" plain
  ;; 		 (function org-roam-capture--get-point)
  ;; 		 "%?" :file-name "%<%Y%m%d%H%M%S>-${slug}"
  ;; 		 :head "#+LATEX_HEADER: \\usepackage[citestyle=authoryear-icomp,bibstyle=authoryear, hyperref=true,backref=true,maxcitenames=3,url=true,backend=bibtex,natbib=true] {biblatex}
  ;; #+SETUPFILE: ~/.config/emacs/.local/etc/org-html-themes/setup/theme-readtheorg.setup
  ;; #+TITLE: ${title}
  ;; #+CREATED: %u
  ;; Time-stamp: <>
  ;; - tags ::
  ;; " :unnarrowed t))))

  (setq org-roam-capture-templates
	'((
	   "d" "default" plain
	   "%?"
	   :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+date: %U\n")
	   :unnarrowed t
	   )
          (
	   "l" "programming language" plain
	   "* Characteristics:\n\n- Family: %?\n- Inspired by: \n\n* Reference:\n\n"
	   :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
	   :unnarrowed t
	   )
          ("b" "book notes" plain
	   "\n* Source\n\nAuthor: %^{Author}\nTitle: ${title}\nYear: %^{Year}\n\n* Summary\n\n%?"
	   :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
	   :unnarrowed t
	   )
          ("p" "project" plain
	   "* Goals\n\n%?\n\n* Tasks\n\n** TODO Add initial tasks\n\n*Dates\n\n"
	   :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+filetags:Project")
	   :unnarrowed t
	   ))
	org-roam-dailies-capture-templates '(
                                             (
					      "d" "default" entry
					      "* %<%I:%M %p>: %?"
					      :if-new (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n")
					      ))
	;; ;; optimise local variable evaluate and babel
	;; enable-local-variables :all
	;; ;; remote zsh related
	;; shell-prompt-pattern '"^[^#$%>\n]*~?[#$%>] *"
	)

  ;; ;; Normally, the org-roam buffer doesn't open until you explicitly call
  ;; ;; `org-roam'. If `+org-roam-open-buffer-on-find-file' is non-nil, the
  ;; ;; org-roam buffer will be opened for you when you use `org-roam-find-file'
  ;; ;; (but not `find-file', to limit the scope of this behavior).
  ;; (add-hook 'find-file-hook
  ;; 	    (defun +org-roam-open-buffer-maybe-h ()
  ;; 	      (and +org-roam-open-buffer-on-find-file
  ;; 		   (memq 'org-roam-buffer--update-maybe post-command-hook)
  ;; 		   (not (window-parameter nil 'window-side)) ; don't proc for popups
  ;; 		   (not (eq 'visible (org-roam-buffer--visibility)))
  ;; 		   (with-current-buffer (window-buffer)
  ;; 		     (org-roam-buffer--get-create)))))
  (add-hook 'org-roam-buffer-prepare-hook #'hide-mode-line-mode)
  (require 'org-roam-protocol)
  (require 'org-roam-dailies)
  (org-roam-setup) ;; can cause failure of dump
  ;; :bind (("C-c z l" . org-roam-buffer-toggle)
  ;;        ("C-c z f" . org-roam-node-find)
  ;;        ("C-c z i" . org-roam-node-insert)
  ;;        ("C-c z r" . org-roam-node-random)
  ;;        :map org-mode-map
  ;;        (("C-M-i" . completion-at-point)
  ;;         ("C-c z t" . org-roam-tag-add)
  ;;         ("C-c z a" . org-roam-alias-add)
  ;;         ("C-c z I" . org-roam-node-insert-immediate))
  ;;        :map org-roam-dailies-map
  ;;        ("Y" . org-roam-dailies-capture-yesterday)
  ;;        ("T" . org-roam-dailies-capture-tomorrow))
  ;; :bind-keymap
  ;; ("C-c z d" . org-roam-dailies-map)
  )


(use-package org-roam-ui
  :straight (:type git :host github :repo "org-roam/org-roam-ui" :files ("*.el" "out"))
  :after org-roam
  :custom
  (org-roam-ui-sync-theme t)
  (org-roam-ui-follow t)
  (org-roam-ui-update-on-save t)
  (org-roam-ui-open-on-start t))

;; required by org-roam-ui
(use-package websocket
  :straight t)

;; (unless (server-running-p)
;;   (org-roam-server-mode))
#+end_src

** Clock

#+begin_src emacs-lisp
(defun poly/org-pomodoro-clocking-info()
  (interactive)
  (when (org-pomodoro-active-p)
    (let ((s (cl-case org-pomodoro-state
               (:pomodoro
		(propertize org-pomodoro-format 'face 'org-pomodoro-mode-line))
               (:overtime
		(propertize org-pomodoro-overtime-format
                            'face 'org-pomodoro-mode-line-overtime))
               (:short-break
		(propertize org-pomodoro-short-break-format
                            'face 'org-pomodoro-mode-line-break))
               (:long-break
		(propertize org-pomodoro-long-break-format
                            'face 'org-pomodoro-mode-line-break))))
	  (clock-is-active (org-clock-is-active)))
      (let ((pomo-status (when (and (org-pomodoro-active-p) (> (length s) 0))
			   (string-trim (concat "[" (format s (org-pomodoro-format-seconds)) "] "))))
	    (pomo-state (string-trim (format s ""))))
	(list pomo-state pomo-status (string-trim (org-clock-get-clock-string)))))))

(defun poly/org-clock-info()
  (when (org-clock-is-active)
    (let ((clock-string (string-trim (org-clock-get-clock-string)))
	  (current-clock-time
	   (let ((currently-clocked-time
		  (floor (org-time-convert-to-integer
			  (time-since org-clock-start-time)) 60)))
	     (org-duration-from-minutes currently-clocked-time))))
      (list nil (concat "[" current-clock-time "]") clock-string))))

(defun poly/org-clock-tick(&optional event)
  (interactive)
  (if (not event)
      (let* ((clock-info
	      (cond((org-pomodoro-active-p) (poly/org-pomodoro-clocking-info))
		   ((org-clock-is-active) (poly/org-clock-info))
		   (t (list nil nil "No Task"))))
	     (state (car clock-info))
	     (status (nth 1 clock-info))
	     (clock-string (nth 2 clock-info)))
	(if clock-string
            (tl/open-hammerspoon-url "Clocking" "status" status "state" state "clockString" clock-string)
	  (tl/open-hammerspoon-url "Clocking" "status" status "state" state)))
    (cond ((string= event "org-clock-out")
	   (unless (org-pomodoro-active-p)
	     (tl/open-hammerspoon-url "Clocking" "status" "No Task")))
	  ((string= event "org-pomodoro-killed-or-break-finished")
	   (tl/open-hammerspoon-url "Clocking" "status" "No Task")))))

(use-package org-pomodoro
  :straight t
  :ensure t
  :after org
  :commands org-pomodoro
  :custom
  (org-pomodoro-format "Pomo %s")
  (org-pomodoro-short-break-format "Break %s")
  (org-pomodoro-long-break-format "Long break %s")
  (org-pomodoro-long-break-length 10)
  (org-pomodoro-start-sound-p nil)
  (org-pomodoro-ticking-sound-p nil)
  (org-pomodoro-ticking-sound-states '(:pomodoro))
  (org-pomodoro-ticking-frequency 5)
  :config
  (add-hook 'org-pomodoro-finished-hook
	    (lambda () (terminal-notify "A pomodoro is finished, take a break !!!" "Pomo")))
  (add-hook 'org-pomodoro-short-break-finished-hook
            (lambda () (terminal-notify "A short break done, ready a new pomodoro !!!" "Pomo")))
  (add-hook 'org-pomodoro-long-break-finished-hook
            (lambda () (terminal-notify "A long break done, ready a new pomodoro !!!" "Pomo")))

  ;; init emacs startup
  (add-hook 'after-init-hook (lambda() (tl/open-hammerspoon-url "Clocking" "status" "No Task")))

  (add-hook 'kill-emacs-hook (lambda() (tl/open-hammerspoon-url "Clocking" "status" "Emacs Stopped")))

  ;; (setq org-pomodoro-tick-hook nil)

  (add-hook 'org-pomodoro-tick-hook #'poly/org-clock-tick)
  (add-hook 'org-clock-out-hook (lambda() (poly/org-clock-tick "org-clock-out")))
  (add-hook 'org-pomodoro-break-finished-hook (lambda() (poly/org-clock-tick "org-pomodoro-killed-or-break-finished")))
  (add-hook 'org-pomodoro-killed-hook (lambda() (poly/org-clock-tick "org-pomodoro-killed-or-break-finished")))

  ;; (advice-remove 'org-clock-update-mode-line #'tl/update-hammerspoon-org-clock-bar)
  (advice-add 'org-clock-update-mode-line :after #'poly/org-clock-tick)
  ;; (advice-add 'org-pomodoro-kill :after (lambda() (poly/org-clock-tick "org-pomodoro-killed-or-break-finished")))
  ;; (add-hook 'org-pomodoro-started-hook 'my-start-vitamin-r)
  ;; (add-hook 'org-pomodoro-finished-hook 'my-stop-vitamin-r)
  ;; (add-hook 'org-pomodoro-killed-hook 'my-abort-vitamin-r)
  :bind
  (("C-c C-x C-p" . org-pomodoro)
   :map org-mode-map
   ("C-c C-x C-p" . org-pomodoro)))
#+end_src

** org-mind

  This is an Emacs package that creates graphviz directed graphs from  the headings of an org file

#+begin_src emacs-lisp
(use-package org-mind-map
    :straight t
    :init
    (require 'ox-org)
    :ensure t
    ;; Uncomment the below if 'ensure-system-packages` is installed
    ;;:ensure-system-package (gvgen . graphviz)
    ;; :config
    :custom
    (org-mind-map-engine "dot")
    ;; (setq org-mind-map-engine "dot")       ; Default. Directed Graph
    ;; (setq org-mind-map-engine "neato")  ; Undirected Spring Graph
    ;; (setq org-mind-map-engine "twopi")  ; Radial Layout
    ;; (setq org-mind-map-engine "fdp")    ; Undirected Spring Force-Directed
    ;; (setq org-mind-map-engine "sfdp")   ; Multiscale version of fdp for the layout of large graphs
    ;; (setq org-mind-map-engine "twopi")  ; Radial layouts
    ;; (setq org-mind-map-engine "circo")  ; Circular Layout
    )

#+end_src

** markdown

#+begin_src emacs-lisp
(use-package markdown-mode
  :straight t
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :commands (markdown-mode gfm-mode)
  :hook ((markdown-mode . markdown-toggle-inline-images)
	 (markdown-mode . variable-pitch-mode)
	 (markdown-mode . visual-line-mode))
  :custom
  (markdown-list-item-bullets '("●" "○" "•"))
  (markdown-hide-markup nil)
  (markdown-footnote-location 'header)
  (markdown-max-image-size '(400 . 400))
  (markdown-indent-on-enter 'indent-and-new-item)
  (markdown-hide-urls t)
  (markdown-hide-markup nil)
  (markdown-header-scaling t)
  ;; (markdown-nested-imenu-heading-index nil)
  (markdown-command "multimarkdown")
  (markdown-coding-system 'utf-8)
  (markdown-enable-math t)
  (markdown-enable-wiki-links t)
  (markdown-asymmetric-header t)
  (markdown-italic-underscore t)
  (markdown-fontify-code-blocks-natively t)
  (markdown-fontify-code-block-default-mode t)
  (markdown-make-gfm-checkboxes-buttons t)
  (markdown-gfm-uppercase-checkbox t)
  (markdown-gfm-additional-languages '("Mermaid" "sh" "Go"))
  (markdown-content-type "application/xhtml+xml")
  (markdown-xhtml-header-content "\n<meta name=\"viewport\" content=\"width=device-width\">")
  :config
  ;; HACK Due to jrblevin/markdown-mode#578, invoking `imenu' throws a
  ;;      'wrong-type-argument consp nil' error if you use native-comp.
  (setq markdown-nested-imenu-heading-index (not (ignore-errors (native-comp-available-p))))
  ;; A sensible and simple default preamble for markdown exports that
  ;; takes after the github asthetic (plus highlightjs syntax coloring).
  (setq markdown-css-paths '("https://cdn.jsdelivr.net/npm/github-markdown-css/github-markdown.min.css"
                             "https://cdn.jsdelivr.net/gh/highlightjs/cdn-release/build/styles/github.min.css"))
  (setq markdown-xhtml-header-content "
<meta name='viewport' content='width=device-width, initial-scale=1, shrink-to-fit=no'>
<style>
.markdown-body {
  box-sizing: border-box;
  max-width: 980px;
  min-width: 200px;
  width: 100%;
  margin: 0 auto;
  padding: 45px;
  // margin: 40px auto;
  // padding: 0 10px;
}

@media (max-width: 767px) {
 .markdown-body {
    padding: 15px;
 }
}
</style>
<link rel='stylesheet' href='https://cdn.jsdelivr.net/gh/highlightjs/cdn-release/build/styles/default.min.css'>
<script src='https://cdn.jsdelivr.net/gh/highlightjs/cdn-release/build/highlight.min.js'></script>
<script>
document.addEventListener('DOMContentLoaded', () => {
  document.body.classList.add('markdown-body');
  document.querySelectorAll('pre code').forEach((code) => {
    if (code.className != 'mermaid') {
      hljs.highlightBlock(code);
    }
  });
});
</script>
<script src='https://unpkg.com/mermaid@8.4.8/dist/mermaid.min.js'></script>
<script>
mermaid.initialize({
  theme: 'neutral',  // default, forest, dark, neutral
  startOnLoad: true
});
</script>
")
  ;; (setq markdown-xhtml-header-content "
  ;; <meta name='viewport' content='width=device-width, initial-scale=1, shrink-to-fit=no'>
  ;; <style>
  ;; body {
  ;;   box-sizing: border-box;
  ;;   max-width: 740px;
  ;;   width: 100%;
  ;;   margin: 40px auto;
  ;;   padding: 0 10px;
  ;; }
  ;; </style>
  ;; <link rel='stylesheet' href='https://cdn.jsdelivr.net/gh/highlightjs/cdn-release/build/styles/default.min.css'>
  ;; <script src='https://cdn.jsdelivr.net/gh/highlightjs/cdn-release/build/highlight.min.js'></script>
  ;; <script>
  ;; document.addEventListener('DOMContentLoaded', () => {
  ;;   document.body.classList.add('markdown-body');
  ;;   document.querySelectorAll('pre code').forEach((code) => {
  ;;     if (code.className != 'mermaid') {
  ;;       hljs.highlightBlock(code);
  ;;     }
  ;;   });
  ;; });
  ;; </script>
  ;; <script src='https://unpkg.com/mermaid@8.4.8/dist/mermaid.min.js'></script>
  ;; <script>
  ;; mermaid.initialize({
  ;;   theme: 'default',  // default, forest, dark, neutral
  ;;   startOnLoad: true
  ;; });
  ;; </script>
  ;; ")
  )

(use-package markdown-toc
  :straight t
  :commands (markdown-toc-generate-toc markdown-toc-generate-or-refresh-toc)
  :hook ((markdown-mode . markdown-toc-mode))
  :custom
  (markdown-toc-header-toc-start "<!-- markdown-toc start -->")
  (markdown-toc-indentation-space 2)
  (markdown-toc-header-toc-title "\n**Table of Contents**")
  :config
  ;; ISSUE https://github.com/ardumont/markdown-toc/issues/47
  (defun markdown-toc-refresh-before-save ()
    "Refresh markdown TOC before save."
    (when (and (derived-mode-p 'markdown-mode)
               (require 'markdown-toc)
               (markdown-toc--toc-already-present-p))
      (markdown-toc-generate-toc t)))
  (add-hook 'before-save-hook #'markdown-toc-refresh-before-save))

(use-package edit-indirect
  :straight t)

(use-package grip-mode
  :straight t
  :bind (:map markdown-mode-command-map
              ("g" . grip-mode)))

(use-package mmm-mode
  :straight t
  :hook (markdown-mode . mmm-mode))
#+end_src

** notdeft

#+begin_src emacs-lisp
(use-package notdeft
  :init  (setenv "XAPIAN_CJK_NGRAM" "1")
  :custom
  (notdeft-allow-org-property-drawers t)
  :straight (:host github :repo "hasu/notdeft" :files ("*.el" "extras/*.el" "xapian"))
  :config
  (setq notdeft-directories `(,org-beorg-directory)
	notdeft-extension "org")
  (add-hook 'org-mode-hook 'notdeft-note-mode)
  (require 'notdeft-global)
  (require 'notdeft-global-hydra))
#+end_src

valign for org-mode & markdown table

#+begin_src emacs-lisp
(use-package valign
  :straight t
  :config
  (valign-mode)
  (advice-add 'text-scale-increase
              :after (lambda (inc)
                       (when (or (bound-and-true-p valign-mode)
                                 (derived-mode-p 'org-mode)
                                 (derived-mode-p 'markdown-mode))
                         (valign--force-align-buffer))))
  (advice-add 'text-scale-decrease
              :after (lambda (dec)
                       (when (or (bound-and-true-p valign-mode)
                                 (derived-mode-p 'org-mode)
                                 (derived-mode-p 'markdown-mode))
                         (valign--force-align-buffer))))
  (add-hook 'gfm-mode-hook 'valign-mode)
  (add-hook 'markdown-mode-hook 'valign-mode)
(add-hook 'org-mode-hook 'valign-mode)
  )
#+end_src

**  tributary

 edit Atlassian Confluence wiki pages.

 #+begin_src emacs-lisp
(use-package tributary
  :straight (:host github :repo "mrkrd/tributary" :files ("*.el" "confluence.rnc"))
  :custom
  (tributary-api-url "http://wiki.17usoft.com/rest/api/content/"))
 #+end_src


*** open with vscode

#+begin_src emacs-lisp
(defun poly/open-in-vscode (&optional arg)
  "Open current file or dir in vscode.

URL `http://xahlee.info/emacs/emacs/emacs_dired_open_file_in_ext_apps.html'
Version: 2020-02-13 2021-01-18 2022-08-04"
  ;; (interactive)
  (interactive "P")
  (let* ((file-directory (expand-file-name default-directory))
	 (project-root-directory
	  (if (fboundp 'project-root)
	      (project-root (project-current t)) file-directory))
	 (file-path (if buffer-file-name buffer-file-name file-directory))
	 (xpath (if arg file-path project-root-directory))
	 (line (line-number-at-pos))
	 (character (max 0 (- (point) (line-beginning-position))))
	 (shell-cmd-str))
    (message "path is %s" xpath)
    (cond
     ((string-equal system-type "darwin")
      ;; VSCODE_CWD="$PWD" open -n -b "com.microsoft.VSCode" --args $*
      (setq shell-cmd-str (format "VSCODE_CWD=\"%s\" open -n -b \"com.microsoft.VSCode\" %s"
				  (shell-quote-argument project-root-directory)
				  (if buffer-file-name
				      (format "--args -g %s:%d:%d %s"
					      (shell-quote-argument buffer-file-name)
					      line
					      (1+ character)
					      (shell-quote-argument project-root-directory)) "")))
      ;; (message shell-cmd-str)
      (shell-command shell-cmd-str))
     ((string-equal system-type "windows-nt")
      (shell-command (format "code.cmd %s" (shell-quote-argument xpath))))
     ((string-equal system-type "gnu/linux")
      (shell-command (format "code %s" (shell-quote-argument xpath)))))))
#+end_src

*** pair

https://github.com/kzinmr/dotfiles/blob/db2c1a2578cec94a134d9f9483c315945a52c3f7/.emacs.d/inits/programming.el#L68

#+begin_src emacs-lisp
; paired input
(defun insert-bracket-pair (leftBracket rightBracket)
  (if (region-active-p)
      (let ((p1 (region-beginning))
	    (p2 (region-end)))
	(goto-char p2)
	(insert rightBracket)
	(goto-char p1)
	(insert leftBracket)
	(goto-char (+ p2 2)))
    (progn
      (insert leftBracket rightBracket)
      (backward-char 1))))
(defun insert-pair-brace () (interactive) (insert-bracket-pair "{" "}") )
(defun insert-pair-paren () (interactive) (insert-bracket-pair "(" ")") )
(defun insert-pair-double-straight-quote () (interactive) (insert-bracket-pair "\"" "\"") )
(defun insert-pair-single-straight-quote () (interactive) (insert-bracket-pair "'" "'") )
(defun insert-pair-bracket () (interactive) (insert-bracket-pair "[" "]") )
(defun insert-pair-angle-bracket () (interactive) (insert-bracket-pair "<" ">") )
(define-key global-map "{" 'insert-pair-brace)
(define-key global-map "(" 'insert-pair-paren)
(define-key global-map "\"" 'insert-pair-double-straight-quote)
(define-key global-map "'" 'insert-pair-single-straight-quote)
(define-key global-map "[" 'insert-pair-bracket)
(define-key global-map "<" 'insert-pair-angle-bracket)
#+end_src
