#+title: Addons

Configuration for addons, additional features provided by individual packages.

#+begin_src emacs-lisp
  ;;; -*- lexical-binding: t -*-
#+end_src

* Line numbers with display-line-numbers-mode

#+begin_src emacs-lisp

(defun should-use-minimum-resource ()
  (and buffer-file-name
       (string-match-p "\.\\(mock\\|min\\)\.js" buffer-file-name)))

;; http://stackoverflow.com/questions/3875213/turning-on-linum-mode-when-in-python-c-mode
(setq linum-mode-inhibit-modes-list
      '(eshell-mode
	shell-mode
	profiler-report-mode
	ffip-diff-mode
	dictionary-mode
	erc-mode
	dired-mode
	help-mode
	text-mode
	fundamental-mode
	jabber-roster-mode
	jabber-chat-mode
	inferior-js-mode
	inferior-python-mode
	ivy-occur-grep-mode ; better performance
	ivy-occur-mode ; better performance
	twittering-mode
	compilation-mode
	weibo-timeline-mode
	woman-mode
	Info-mode
	calc-mode
	calc-trail-mode
	comint-mode
	gnus-group-mode
	gud-mode
	org-mode
	vc-git-log-edit-mode
	log-edit-mode
	vterm-mode
	term-mode
	w3m-mode
	speedbar-mode
	gnus-summary-mode
	gnus-article-mode
	company-mode
	magit-status-mode
	messages-buffer-mode
	calendar-mode
	treemacs-mode
	telega-chat-mode
	telega-root-mode))

(cond
 ;; ((fbounp 'linum-mode))
 (nil;; (fboundp 'global-display-line-numbers-mode)
  (defun display-line-numbers-mode-hook-setup ()
    (setq display-line-numbers (if (or (memq major-mode linum-mode-inhibit-modes-list)
				       ;; don't show line number for certain file extensions
				       (should-use-minimum-resource))
				   nil
				 t)))
  (add-hook 'display-line-numbers-mode-hook 'display-line-numbers-mode-hook-setup)
  (global-display-line-numbers-mode t))
 (t
  (global-linum-mode t)

  (defadvice linum-on (around linum-on-inhibit-for-modes)
    "Stop the load of linum-mode for some major modes."
    (unless (member major-mode linum-mode-inhibit-modes-list)
      ad-do-it))
  (ad-activate 'linum-on)

  ;; update line number every second so `linum-mode' won't slow down Emacs
  ;; @see https://lists.gnu.org/archive/html/bug-gnu-emacs/2013-04/msg00577.html
  ;; package like `nlinum-mode' has better performance but `git-gutter' is dependent
  ;; on `linum-mode'.
  ;; So we have to use `linum-mode'.
  (setq linum-delay t)
  (defadvice linum-schedule (around my-linum-schedule () activate)
    (run-with-idle-timer 2 nil #'linum-update-current))))
#+end_src


* completion

** selectrum

#+begin_src emacs-lisp
(use-package selectrum
  :straight t
  :hook (after-init . selectrum-mode)
  :custom
  (selectrum-fix-vertical-window-height t)
  (selectrum-extend-current-candidate-highlight t)
  (selectrum-count-style 'current/matches)
  (selectrum-highlight-candidates-function #'orderless-highlight-matches)
  (selectrum-refine-candidates-function #'orderless-filter)
  ;; (selectrum-num-candidates-displayed 15)
  (selectrum-max-window-height 15)
  :config
  (selectrum-mode t)
  :bind (;; ([remap yank-pop] . my/selectrum-yank-kill-ring)
	 :map selectrum-minibuffer-map
	 ;; ("DEL" . selectrum-backward-kill-sexp)
	 ("<S-backspace>" . selectrum-backward-kill-sexp)
	 ("<down>" . selectrum-next-candidate)
	 ("C-j"  .  selectrum-next-candidate)
	 ("<up>" .  selectrum-previous-candidate)
	 ("C-k"  .  selectrum-previous-candidate)
	 ("<backtab>" . selectrum-previous-candidate)))
#+end_src

** marginalia

#+begin_src emacs-lisp
(use-package marginalia
  :straight t
  :after selectrum
  :ensure t
  :demand t
  :defer 1
  :custom
  (marginalia-annotators '(marginalia-annotators-heavy
			   marginalia-annotators-light))
  :init
  (setq marginalia-command-categories
	'((imenu . imenu)
	  (projectile-find-file . project-file)
	  ;; (projectile-find-file . project)
	  (projectile-find-dir . project-file)
	  ;; (projectile-find-dir . project)
	  ;; (projectile-switch-project . project)
	  (projectile-switch-project . file)
	  (projectile-switch-open-project . file)
	  (projectile-recentf . project-file)
	  (projectile-display-buffer . project-buffer)
	  (projectile-switch-to-buffer . project-buffer)
	  ;; (projectile-commander . project)
	  ))
  :bind (;; ("M-A" . marginalia-cycle)
	 :map minibuffer-local-map
	 ("M-A" . marginalia-cycle))
  :config
  (marginalia-mode)

  ;; Display more annotations - e.g. docstring with M-x
  (setq marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))

  ;; When using Selectrum, ensure that Selectrum is refreshed when cycling annotations.
  (advice-add #'marginalia-cycle :after
	      (lambda () (when (bound-and-true-p selectrum-mode) (selectrum-exhibit)))))

;; -----------------------------------------------------------------------------
;; Marginalia doesn't remember the this-command when switching projects using
;; projectile, since it uses multiple minibuffers. In order to classify project
;; completions properly, we keep track of when we're in the process of switching
;; projects and make sure to return the correct category

(defvar c/switching-project? nil)
(defun c/projectile-before-switch-project ()
  (setq c/switching-project? t))
(defun c/projectile-after-switch-project ()
  (setq c/switching-project? nil))

(after-load (projectile marginalia)
  (add-hook 'projectile-before-switch-project-hook #'c/projectile-before-switch-project)
  (add-hook 'projectile-after-switch-project-hook #'c/projectile-after-switch-project)

  (advice-add 'marginalia-classify-by-prompt :around
	      (lambda (orig-fun &rest args)
		(if c/switching-project?
		    'project
		  (apply orig-fun args)))))
#+end_src

** all-the-icons-completion

#+begin_src emacs-lisp
(use-package all-the-icons-completion
  :straight t
  :after marginalia
  :commands all-the-icons-completion-marginalia-setup
  :hook (marginalia-mode . all-the-icons-completion-marginalia-setup)
  :init
  (all-the-icons-completion-mode))
#+end_src

** Orderless

This is a completion style, it's a back-end for completion and is used by a  front-end that provides a completion UI.

#+begin_src emacs-lisp
;; ordering of narrowed candidates
(use-package orderless
  :straight t
  :after selectrum
  :config
  (setq completion-styles '(orderless))
  (setq orderless-skip-highlighting (lambda () selectrum-is-active)))

;; (use-package orderless
;;   :straight t
;;   :ensure t
;;   :after icomplete
;;   :custom
;;   (orderless-component-separator " +")
;;   (orderless-matching-styles
;;    '(;; The characters of the component should appear in that order in the
;;      ;; candidate, but not necessarily consecutively. This maps 'abc' to
;;      ;; 'a.*b.*c'.
;;      orderless-flex
;;      ;; orderless-initialism = each character of the component should
;;      ;; appear as the beginning of a word in the candidate, in order. This
;;      ;; maps 'abc' to '\<a.*\<b.*\c'.
;;      ;; orderless-strict-initialism = like initialism but only allow
;;      ;; non-letters in between the matched words. 'fb' would match
;;      ;; 'foo-bar' but not 'foo-qux-bar'.
;;      ;; orderless-strict-leading-initialism = like strict-initialism but
;;      ;; require the first initial to match the candidate’s first word. 'bb'
;;      ;; would match 'bar-baz' but not 'foo-bar-baz'.
;;      ;; orderless-strict-full-initialism = like strict-initialism but
;;      ;; require the first initial to match the candidate’s first word. 'bb'
;;      ;; would match 'bar-baz' but not 'foo-bar-baz'.
;;      orderless-strict-leading-initialism
;;      ;; The component is treated as a regexp that must match somewhere in
;;      ;; the candidate.
;;      orderless-regexp
;;      ;; The component is split at word endings and each piece must match at
;;      ;; a word boundary in the candidate, occurring in that order.
;;      orderless-prefixes
;;      ;; The component is treated as a literal string that must occur in the
;;      ;; candidate.
;;      orderless-literal))
;;   (orderless-skip-highlighting (lambda () selectrum-is-active))
;;   :config
;;   (defun my/match-components-literally ()
;;     "Components match literally for the rest of the session."
;;     (interactive)
;;     (setq-local
;;      orderless-matching-styles '(orderless-literal)
;;      completion-styles '(orderless)
;;      ;; orderless-matching-styles '(orderless-strict-initialism)
;;      orderless-style-dispatchers nil))
;;   :bind
;;   (:map minibuffer-local-completion-map
;;	("C-l" . my/match-components-literally)))

;; ;; '=' at the end of a component will make this component match as a literal.
;; (defun my/orderless-literal-dispatcher (pattern _index _total)
;;   (when (string-suffix-p "=" pattern)
;;     `(orderless-literal . ,(substring pattern 0 -1))))

;; ;; ',' at the end of a component will make this component match as a strict
;; ;; leading initialism.
;; (defun my/orderless-initialism-dispatcher (pattern _index _total)
;;   (when (string-suffix-p "," pattern)
;;     `(orderless-strict-leading-initialism . ,(substring pattern 0 -1))))

;; (setq orderless-style-dispatchers
;;       '(my/orderless-literal-dispatcher
;;         my/orderless-initialism-dispatcher))
#+end_src

** selectrum-prescient

#+begin_src  emacs-lisp
(use-package selectrum-prescient
  :straight t
  :after selectrum
  :config
  (selectrum-prescient-mode t)
  (prescient-persist-mode))
#+end_src

** Consult without consultation fees

#+begin_src emacs-lisp
(use-package consult
  :straight t
  :ensure t
  :demand t
  :after selectrum
  :defer 1
  ;; :custom
  ;; (consult-preview-key nil)
  ;; (consult-project-root-function #'projectile-project-root)
  :hook
  (completion-list-mode . consult-preview-at-point-mode)
  :init (bind-key "TAB"
		  (lambda ()
		    (interactive)
		    (isearch-exit)
		    (consult-line isearch-string))
		  isearch-mode-map)
  :config
  (require 'consult)
  (require 'consult-imenu)
  (with-eval-after-load 'org
    (require 'consult-org))
  (declare-function consult--customize-set "consult")
  (progn
    (setq consult-project-root-function #'vc-root-dir)
    (consult-customize
     consult-ripgrep consult-grep
     consult-buffer consult-recent-file
     :preview-key (kbd "M-."))

    ;; Disable consult-buffer project-related capabilities as
    ;; they are very slow in TRAMP.
    (setq consult-buffer-sources
	  (delq 'consult--source-project-buffer
		(delq 'consult--source-project-file consult-buffer-sources)))

    (setq consult--source-hidden-buffer
	  (plist-put consult--source-hidden-buffer :narrow ?h)))
  :bind (
	 ("M-s f" . consult-line)
	 ("M-g g" . consult-line)
	 ("M-g o" . consult-outline)
	 ("M-g i" . consult-imenu)
	 ("M-g r" . consult-ripgrep)
	 ("C-x C-r" . consult-recent-file)
	 ([remap yank-pop] . consult-yank-from-kill-ring)
	 ([remap switch-to-buffer] . consult-buffer)
	 ([remap goto-line] . consult-goto-line)))

(use-package deadgrep
  :ensure t
  :commands (deadgrep--read-search-term)
  :bind (("C-c s" . deadgrep)))
#+end_src

** vertico
#+begin_src emacs-lisp
(use-package vertico
  :straight (vertico
	     :files (:defaults "extensions/*")
	     :includes (vertico-buffer
			vertico-directory
			vertico-flat
			vertico-indexed
			vertico-mouse
			vertico-quick
			vertico-repeat
			vertico-reverse))
  ;; :straight t
  :init
  (vertico-mode)
  :config
  ;; Different scroll margin
  ;; (setq vertico-scroll-margin 0)

  ;; Show more candidates
  ;; (setq vertico-count 20)

  ;; Grow and shrink the Vertico minibuffer
  ;; (setq vertico-resize t)

  ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
  (setq vertico-cycle t)
  )

;; Configure directory extension.
(use-package vertico-directory
  :straight nil
  :after vertico
  :ensure nil
  ;; More convenient directory navigation commands
  :bind (:map vertico-map
	      ("RET" . vertico-directory-enter)
	      ("DEL" . vertico-directory-delete-char)
	      ("M-DEL" . vertico-directory-delete-word)
	      ("<S-backspace>" . vertico-directory-delete-word))
  ;; Tidy shadowed file names
  :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))


;; Optionally use the `orderless' completion style. See
;; `+orderless-dispatch' in the Consult wiki for an advanced Orderless style
;; dispatcher. Additionally enable `partial-completion' for file path
;; expansion. `partial-completion' is important for wildcard support.
;; Multiple files can be opened at once with `find-file' if you enter a
;; wildcard. You may also give the `initials' completion style a try.
(use-package orderless
  :init
  ;; Configure a custom style dispatcher (see the Consult wiki)
  ;; (setq orderless-style-dispatchers '(+orderless-dispatch)
  ;;       orderless-component-separator #'orderless-escapable-split-on-space)
  (setq completion-styles '(orderless) ;; basic
	completion-category-defaults nil
	completion-category-overrides '((file (styles partial-completion)))))

;; A few more useful configurations...
(use-package emacs
  :straight nil
  :init
  ;; Add prompt indicator to `completing-read-multiple'.
  ;; Alternatively try `consult-completing-read-multiple'.
  (defun crm-indicator (args)
    (cons (concat "[CRM] " (car args)) (cdr args)))
  (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
	'(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

  ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
  ;; Vertico commands are hidden in normal buffers.
  ;; (setq read-extended-command-predicate
  ;;       #'command-completion-default-include-p)

  ;; Enable recursive minibuffers
  (setq enable-recursive-minibuffers t))

(define-key vertico-map "?" #'minibuffer-completion-help)
(define-key vertico-map (kbd "M-RET") #'minibuffer-force-complete-and-exit)
(define-key vertico-map (kbd "M-TAB") #'minibuffer-complete)
#+end_src


** corfu

#+begin_src emacs-lisp
(use-package corfu
  :straight (:files (:defaults "extensions/*")
		    :includes (corfu-history))
  :bind (:map corfu-map
	      ("TAB" . corfu-next)
	      ("C-n" . corfu-next)
	      ("<tab>" . corfu-next)
	      ("S-TAB" . corfu-previous)
	      ("C-p" . corfu-previous)
	      ("<backtab>" . corfu-previous)
	      ("RET"     . corfu-insert)
	      ("<return>"  . corfu-insert)
	      ("<escape>" . corfu-quit)
	      ;; ("ESC"    . corfu-reset)
	      ;; ("SPC" . corfu-move-to-minibuffer)
	      ;; ("<space>" . corfu-move-to-minibuffer)
	      ;; ([remap completion-at-point] . corfu-next)
	      )
  :custom
  (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
  (corfu-auto t)                 ;; Enable auto completion
  (corfu-count 10) ;; Max # of candidates to show
  (corfu-commit-predicate nil)
  (corfu-auto-delay 0.5)
  (corfu-auto-prefix 2)
  (corfu-quit-at-boundary nil)
  (corfu-separator ?\s)          ;; Orderless field separator
  (corfu-quit-no-match t)
  ;; (corfu-preview-current t)
  (corfu-preview-current 'insert)       ; First candidate as overlay. Insert on input if only one
  (corfu-quit-at-boundary 'separator)   ; Boundary: stay alive if separator inserted
  (corfu-quit-no-match 'separator)      ; No match: stay alive if separator inserted
  (corfu-preselect-first t)
  ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
  ;; (corfu-echo-documentation nil) ;; Disable documentation in the echo area
  ;; (corfu-echo-documentation '(1.0 . 0.2))
  (corfu-min-width 30)
  ;; (corfu-min-width 99)
  ;; hide scroll-bar
  (corfu-bar-width 0)
  (corfu-right-margin-width 0)
  (corfu-scroll-margin 5)        ;; Use scroll margin
  ;; :hook (after-init-hook . global-corfu-mode)
  :init
  (global-corfu-mode))

;; Icon support
(use-package kind-icon
  :ensure t
  :straight t
  :after corfu
  :custom
  (kind-icon-default-face 'corfu-default)
  (kind-icon-use-icon t)
  (kind-icon-blend-background nil)
  (kind-icon-blend-frac 0.08)
  (svg-lib-icons-dir (expand-file-name "svg-lib" poly-cache-dir))
  :config
  (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter)
  (setq kind-icon-mapping
	'((array "a" :icon "code-brackets" :face font-lock-type-face)
	  (boolean "b" :icon "circle-half-full" :face font-lock-builtin-face)
	  (class "c" :icon "video-input-component" :face font-lock-type-face) ;
	  (color "#" :icon "palette" :face success) ;
	  (constant "co" :icon "square-circle" :face font-lock-constant-face) ;
	  (constructor "cn" :icon "cube-outline" :face font-lock-function-name-face) ;
	  (enum-member "em" :icon "format-align-right" :face font-lock-builtin-face) ;
	  (enum "e" :icon "server" :face font-lock-builtin-face) ;
	  (event "ev" :icon "zip-box-outline" :face font-lock-warning-face) ;
	  (field "fd" :icon "tag" :face font-lock-variable-name-face) ;
	  (file "f" :icon "file-document-outline" :face font-lock-string-face) ;
	  (folder "d" :icon "folder" :face font-lock-doc-face) ;
	  (interface "if" :icon "share-variant" :face font-lock-type-face) ;
	  (keyword "kw" :icon "image-filter-center-focus" :face font-lock-keyword-face) ;
	  (macro "mc" :icon "lambda" :face font-lock-keyword-face)
	  (method "m" :icon "cube-outline" :face font-lock-function-name-face) ;
	  (function "f" :icon "cube-outline" :face font-lock-function-name-face) ;
	  (module "{" :icon "view-module" :face font-lock-preprocessor-face) ;
	  (numeric "nu" :icon "numeric" :face font-lock-builtin-face)
	  (operator "op" :icon "plus-circle-outline" :face font-lock-comment-delimiter-face) ;
	  (param "pa" :icon "tag" :face default)
	  (property "pr" :icon "wrench" :face font-lock-variable-name-face) ;
	  (reference "rf" :icon "collections-bookmark" :face font-lock-variable-name-face) ;
	  (snippet "S" :icon "format-align-center" :face font-lock-string-face) ;
	  (string "s" :icon "sticker-text-outline" :face font-lock-string-face)
	  (struct "%" :icon "video-input-component" :face font-lock-variable-name-face) ;
	  (text "tx" :icon "format-text" :face shadow)
	  (type-parameter "tp" :icon "format-list-bulleted-type" :face font-lock-type-face)
	  (unit "u" :icon "ruler-square" :face shadow)
	  (value "v" :icon "format-align-right" :face font-lock-builtin-face) ;
	  (variable "va" :icon "tag" :face font-lock-variable-name-face)
	  (t "." :icon "file-find" :face shadow)))
  )

;; A few more useful configurations...
(use-package emacs
  :init
  (setq compilation-scroll-output 'first-error)
  (setq auto-revert-check-vc-info t)
  ;; TAB cycle if there are only few candidates
  (setq completion-cycle-threshold 3)

  ;; Emacs 28: Hide commands in M-x which do not apply to the current mode.
  ;; Corfu commands are hidden, since they are not supposed to be used via M-x.
  ;; (setq read-extended-command-predicate
  ;;       #'command-completion-default-include-p)

  ;; Enable indentation+completion using the TAB key.
  ;; `completion-at-point' is often bound to M-TAB.
  (setq tab-always-indent 'complete))

(use-package corfu-history
  :after corfu
  :init (corfu-history-mode))

;; Completion At Point Extensions made for `corfu'
(use-package cape
  :straight t
  ;; ;; Bind dedicated completion commands
  ;; ;; Alternative prefix keys: C-c p, M-p, M-+, ...
  ;; :bind (("C-c p p" . completion-at-point) ;; capf
  ;;        ("C-c p t" . complete-tag)        ;; etags
  ;;        ("C-c p d" . cape-dabbrev)        ;; or dabbrev-completion
  ;;        ("C-c p h" . cape-history)
  ;;        ("C-c p f" . cape-file)
  ;;        ("C-c p k" . cape-keyword)
  ;;        ("C-c p s" . cape-symbol)
  ;;        ("C-c p a" . cape-abbrev)
  ;;        ("C-c p i" . cape-ispell)
  ;;        ("C-c p l" . cape-line)
  ;;        ("C-c p w" . cape-dict)
  ;;        ("C-c p \\" . cape-tex)
  ;;        ("C-c p _" . cape-tex)
  ;;        ("C-c p ^" . cape-tex)
  ;;        ("C-c p &" . cape-sgml)
  ;;        ("C-c p r" . cape-rfc1345))
  :init
  ;; Add `completion-at-point-functions', used by `completion-at-point'.
  ;; (add-to-list 'completion-at-point-functions #'cape-file)
  ;; (add-to-list 'completion-at-point-functions #'cape-tex)
  ;; (add-to-list 'completion-at-point-functions #'cape-dabbrev)
  ;; (add-to-list 'completion-at-point-functions #'cape-keyword)
  ;; (add-to-list 'completion-at-point-functions #'cape-sgml)
  ;; (add-to-list 'completion-at-point-functions #'cape-rfc1345)
  ;; (add-to-list 'completion-at-point-functions #'cape-ispell)
  ;; (add-to-list 'completion-at-point-functions #'cape-dict)
  ;; (add-to-list 'completion-at-point-functions #'cape-symbol)
  ;; (add-to-list 'completion-at-point-functions #'cape-line)
  :hook ((prog-mode . poly/set-basic-capf)
	 ;; (org-mode . poly/set-basic-capf)
	 ((lsp-completion-mode eglot-managed-mode) . poly/set-lsp-capf))
  :config
  (setq dabbrev-upcase-means-case-search t)
  (setq case-fold-search nil)
  ;; (setq cape-dict-file "/usr/share/dict/words")
  ;; Silence the pcomplete capf, no errors or messages!
  (advice-add 'pcomplete-completions-at-point :around #'cape-wrap-silent)
  ;; Ensure that pcomplete does not write to the buffer
  ;; and behaves as a pure `completion-at-point-function'.
  (advice-add 'pcomplete-completions-at-point :around #'cape-wrap-purify))

(defun corfu-enable-in-minibuffer ()
  "Enable Corfu in the minibuffer if `completion-at-point' is bound."
  (when (where-is-internal #'completion-at-point (list (current-local-map)))
    ;; (setq-local corfu-auto nil) Enable/disable auto completion
    (corfu-mode 1)))
(add-hook 'minibuffer-setup-hook #'corfu-enable-in-minibuffer)

(defun corfu-move-to-minibuffer ()
  (interactive)
  (let ((completion-extra-properties corfu--extra)
	completion-cycle-threshold completion-cycling)
    (apply #'consult-completion-in-region completion-in-region--data)))
(define-key corfu-map "\M-m" #'corfu-move-to-minibuffer)

(use-package corfu-doc
  :ensure t
  :straight t
  :config
  ;;hook
  (add-hook 'corfu-mode-hook #'corfu-doc-mode)
  ;;bind
  (define-key corfu-map (kbd "M-p") #'corfu-doc-scroll-down) ;; corfu-next
  (define-key corfu-map (kbd "M-n") #'corfu-doc-scroll-up)  ;; corfu-previous
  (define-key corfu-map (kbd "M-d") #'corfu-doc-toggle))

;; Configure Tempel
(use-package tempel
  :straight t
  ;; Require trigger prefix before template name when completing.
  ;; :custom
  ;; (tempel-trigger-prefix "<")
  :bind (("M-+" . tempel-complete) ;; Alternative tempel-expand
	 ("M-*" . tempel-insert))
  :init
  ;; Setup completion at point
  (defun tempel-setup-capf ()
    ;; Add the Tempel Capf to `completion-at-point-functions'.
    ;; `tempel-expand' only triggers on exact matches. Alternatively use
    ;; `tempel-complete' if you want to see all matches, but then you
    ;; should also configure `tempel-trigger-prefix', such that Tempel
    ;; does not trigger too often when you don't expect it. NOTE: We add
    ;; `tempel-expand' *before* the main programming mode Capf, such
    ;; that it will be tried first.
    (setq-local completion-at-point-functions
		(cons #'tempel-expand
		      completion-at-point-functions)))

  (add-hook 'prog-mode-hook 'tempel-setup-capf)
  (add-hook 'text-mode-hook 'tempel-setup-capf)
  ;; Optionally make the Tempel templates available to Abbrev,
  ;; either locally or globally. `expand-abbrev' is bound to C-x '.
  ;; (add-hook 'prog-mode-hook #'tempel-abbrev-mode)
  ;; (global-tempel-abbrev-mode)
  )

(use-package tabnine-capf
  :after cape
  :straight (:host github :repo "50ways2sayhard/tabnine-capf" :files ("*.el" "*.sh"))
  :hook (kill-emacs . tabnine-capf-kill-process)
  ;; :config
  ;; (add-to-list 'completion-at-point-functions #'tabnine-completion-at-point)
  )

;; https://github.com/50ways2sayhard/.emacs.d/blob/1158200665431cc336c868ad1f9ecb43c249fc31/elisp/init-complete.el
(defun poly/convert-super-capf (arg-capf)
  (list
   ;; #'cape-file
   ;; #'cape-dabbrev
   ;; #'cape-keyword
   ;; #'cape-symbol
   (cape-capf-buster
    (cape-super-capf
     ;; #'tempel-expand
     #'tabnine-completion-at-point
     arg-capf
     )
    )
   ;; #'cape-dabbrev
   ))

(defun poly/set-basic-capf ()
  (interactive)
  (setq completion-category-defaults nil)
  (setq-local completion-at-point-functions
	      (poly/convert-super-capf
	       (car completion-at-point-functions))))

(defun poly/set-lsp-capf ()
  (interactive)
  (setq completion-category-defaults nil)
  (setq-local completion-at-point-functions
	      (poly/convert-super-capf (if poly-use-lsp-mode
					   #'lsp-completion-at-point
					 #'eglot-completion-at-point))))
#+end_src

*** corfu-terminal & popon

#+begin_src emacs-lisp
(unless IS-GUI
  (use-package popon
    :straight (popon :package "popon"
		     :type git
		     :host nil
		     :repo "https://codeberg.org/akib/emacs-popon.git"))
  (use-package corfu-terminal
    :straight (corfu-terminal
	       :type git
	       :host nil
               :repo "https://codeberg.org/akib/emacs-corfu-terminal.git")
    :after popon
    :config
    (unless IS-GUI
      (corfu-popup-mode +1)))
  ;; (use-package corfu-popup
  ;; :straight (corfu-popup
  ;; 	       :type git
  ;; 	       :repo "https://codeberg.org/akib/emacs-corfu-popup.git")
  ;; :init
  ;; (corfu-popup-mode +1))
  )
#+end_src

* hydra

Quick action with hydra

#+begin_src emacs-lisp
(use-package hydra
  :straight t
  :ensure t
  ;; :after outline
  :custom
  (hydra-if-helpful t)
  :commands (defhydra)
  :bind ("M-o" . hydra-base/body))

;; (use-package hydra-posframe
;;   :straight (hydra-posframe
;;              :host github
;;              :repo "Ladicle/hydra-posframe"
;;              )
;;   :defer t
;;   :after (hydra posframe)
;; :config
;; (hydra-posframe-enable)
;;   )

(defhydra hydra-base ()
  "
_a_genda
_e_in
_f_lycheck
_o_utline & outshine
_s_traight
_t_ab
_w_indow
"
  ("a" hydra-agenda-view/body :exit t)
  ("d" dumb-jump-hydra/body :exit t)
  ("f" hydra-flycheck/body :exit t)
  ("w" hydra-window/body :exit t)
  ("o" hydra-outline/body :exit t)
  ("s" hydra-straight/body :exit t)
  ("t" hydra-tab/body :exit t)
  ("e" hydra-ein/body :exit t))

(defhydra hydra-straight (:hint nil)
  "
_c_heck all       |_f_etch all     |_m_erge all      |_n_ormalize all   |p_u_sh all
_C_heck package   |_F_etch package |_M_erge package  |_N_ormlize package|p_U_sh package
----------------^^+--------------^^+---------------^^+----------------^^+------------||_q_uit||
_r_ebuild all     |_p_ull all      |_v_ersions freeze|_w_atcher start   |_g_et recipe
_R_ebuild package |_P_ull package  |_V_ersions thaw  |_W_atcher quit    |prun_e_ build"
  ("c" straight-check-all)
  ("C" straight-check-package)
  ("r" straight-rebuild-all)
  ("R" straight-rebuild-package)
  ("f" straight-fetch-all)
  ("F" straight-fetch-package)
  ("p" straight-pull-all)
  ("P" straight-pull-package)
  ("m" straight-merge-all)
  ("M" straight-merge-package)
  ("n" straight-normalize-all)
  ("N" straight-normalize-package)
  ("u" straight-push-all)
  ("U" straight-push-package)
  ("v" straight-freeze-versions)
  ("V" straight-thaw-versions)
  ("w" straight-watcher-start)
  ("W" straight-watcher-quit)
  ("g" straight-get-recipe)
  ("e" straight-prune-build)
  ("q" nil))

(defhydra hydra-window ()
  "
Movement^^        ^Split^         ^Switch^    ^Resize^
----------------------------------------------------------------
_h_ ←         _v_ertical      _b_uffer    _q_ ←→ shrink
_j_ ↓         _x_ horizontal  _f_ind files  _w_ ←→ grow
_k_ ↑         _z_ undo        _a_ce 1   _e_ ↑↓ shrink
_l_ →         _Z_ reset       _s_wap    _r_ ↑↓ grow
_F_ollow       _D_lt Other     _S_ave    max_i_mize
_SPC_ cancel  _o_nly this     _d_elete
"
  ("h" windmove-left )
  ("j" windmove-down )
  ("k" windmove-up )
  ("l" windmove-right )
  ("q" shrink-window-horizontally)
  ("w" enlarge-window-horizontally)
  ("e" shrink-window)
  ("r" enlarge-window)
  ("b" helm-mini)
  ("f" helm-find-files)
  ("F" follow-mode)
  ("a" (lambda ()
	 (interactive)
	 (ace-window 1)
	 (add-hook 'ace-window-end-once-hook
		   'hydra-window/body))
   )
  ("v" (lambda ()
	 (interactive)
	 (split-window-right)
	 (windmove-right))
   )
  ("x" (lambda ()
	 (interactive)
	 (split-window-below)
	 (windmove-down))
   )
  ("s" (lambda ()
	 (interactive)
	 (ace-window 4)
	 (add-hook 'ace-window-end-once-hook
		   'hydra-window/body)))
  ("S" save-buffer)
  ("d" delete-window)
  ("D" (lambda ()
	 (interactive)
	 (ace-window 16)
	 (add-hook 'ace-window-end-once-hook
		   'hydra-window/body)))
  ("o" delete-other-windows)
  ("i" ace-maximize-window)
  ("z" (progn
	 (winner-undo)
	 (setq this-command 'winner-undo)))
  ("Z" winner-redo)
  ("SPC" nil))

;; (defhydra hydra-git-gutter (:body-pre (git-gutter+-mode 1)
;;              :hint nil)
;;   "
;; Git gutter:
;;   _j_: next hunk        _s_tage hunk     _q_uit
;;   _k_: previous hunk    _r_evert hunk    _Q_uit and deactivate git-gutter
;;   ^ ^                   _p_opup hunk
;;   _h_: first hunk
;;   _l_: last hunk
;; "
;;   ;; set start _R_evision
;;   ("j" git-gutter+:next-hunk)
;;   ("k" git-gutter+:previous-hunk)
;;   ("h" (progn (goto-char (point-min))
;;               (git-gutter+:next-hunk 1)))
;;   ("l" (progn (goto-char (point-min))
;;               (git-gutter+:previous-hunk 1)))
;;   ("s" git-gutter+:stage-hunks)
;;   ("r" git-gutter+:revert-hunks)
;;   ("p" git-gutter+:popup-hunk)
;;   ;;("R" git-gutter:set-start-revision)
;;   ("q" nil :color blue)
;;   ("Q" (progn (git-gutter+-mode -1)
;;               ;; git-gutter-fringe doesn't seem to
;;               ;; clear the markup right away
;;               (sit-for 0.1)
;;               ;;(git-gutter:clear)
;;               )
;;    :color blue)
;;   )

;; from https://www.reddit.com/r/emacs/comments/8of6tx/tip_how_to_be_a_beast_with_hydra/
(defhydra hydra-outline (:color blue :hint nil)
  "
    ^Hide^             ^Show^           ^Move
    ^^^^^^------------------------------------------------------
    _q_: sublevels     _a_: all         _u_: up
    _t_: body          _e_: entry       _n_: next visible
    _o_: other         _i_: children    _p_: previous visible
    _c_: entry         _k_: branches    _f_: forward same level
    _l_: leaves        _s_: subtree     _b_: backward same level
    _d_: subtree
    "
  ;; Hide
  ("q" hide-sublevels)    ; Hide everything but the top-level headings
  ("t" hide-body)         ; Hide everything but headings (all body lines)
  ("o" hide-other)        ; Hide other branches
  ("c" hide-entry)        ; Hide this entry's body
  ("l" hide-leaves)       ; Hide body lines in this entry and sub-entries
  ("d" hide-subtree)      ; Hide everything in this entry and sub-entries
  ;; Show
  ("a" show-all)          ; Show (expand) everything
  ("e" show-entry)        ; Show this heading's body
  ("i" show-children)     ; Show this heading's immediate child sub-headings
  ("k" show-branches)     ; Show all sub-headings under this heading
  ("s" show-subtree)      ; Show (expand) everything in this heading & below
  ;; Move
  ("u" outline-up-heading)                ; Up
  ("n" outline-next-visible-heading)      ; Next
  ("p" outline-previous-visible-heading)  ; Previous
  ("f" outline-forward-same-level)        ; Forward - same level
  ("b" outline-backward-same-level)       ; Backward - same level
  ("z" nil "leave")
  )

(defhydra hydra-ein (:hint nil)
  "
 Operations on Cells^^^^^^            On Worksheets^^^^              Other
 ----------------------------^^^^^^   ------------------------^^^^   ----------------------------------^^^^
 [_k_/_j_]^^     select prev/next     [_h_/_l_]   select prev/next   [_t_]^^         toggle output
 [_K_/_J_]^^     move up/down         [_H_/_L_]   move left/right    [_C-l_/_C-S-l_] clear/clear all output
 [_C-k_/_C-j_]^^ merge above/below    [_1_.._9_]  open [1st..last]   [_C-o_]^^       open console
 [_O_/_o_]^^     insert above/below   [_+_/_-_]   create/delete      [_C-s_/_C-r_]   save/rename notebook
 [_y_/_p_/_d_]   copy/paste           ^^^^                           [_x_]^^         close notebook
 [_u_]^^^^       change type          ^^^^                           [_q_]^^         quit transient-state
 [_RET_]^^^^     execute"

  ("q" nil :exit t)
  ;; ("?" spacemacs//ipython-notebook-ms-toggle-doc)
  ("h" ein:notebook-worksheet-open-prev-or-last)
  ("j" ein:worksheet-goto-next-input)
  ("k" ein:worksheet-goto-prev-input)
  ("l" ein:notebook-worksheet-open-next-or-first)
  ("H" ein:notebook-worksheet-move-prev)
  ("J" ein:worksheet-move-cell-down)
  ("K" ein:worksheet-move-cell-up)
  ("L" ein:notebook-worksheet-move-next)
  ("t" ein:worksheet-toggle-output)
  ("d" ein:worksheet-kill-cell)
  ("R" ein:worksheet-rename-sheet)
  ("y" ein:worksheet-copy-cell)
  ("p" ein:worksheet-yank-cell)
  ("o" ein:worksheet-insert-cell-below)
  ("O" ein:worksheet-insert-cell-above)
  ("u" ein:worksheet-change-cell-type)
  ("RET" ein:worksheet-execute-cell-and-goto-next)
  ;; Output
  ("C-l" ein:worksheet-clear-output)
  ("C-S-l" ein:worksheet-clear-all-output)
  ;;Console
  ("C-o" ein:console-open)
  ;; Merge and split cells
  ("C-k" ein:worksheet-merge-cell)
  ("C-j"
   (lambda ()
     (interactive)
     (ein:worksheet-merge-cell (ein:worksheet--get-ws-or-error) (ein:worksheet-get-current-cell) t t)))
  ("s" ein:worksheet-split-cell-at-point)
  ;; Notebook
  ("C-s" ein:notebook-save-notebook-command)
  ("C-r" ein:notebook-rename-command)
  ("1" ein:notebook-worksheet-open-1th)
  ("2" ein:notebook-worksheet-open-2th)
  ("3" ein:notebook-worksheet-open-3th)
  ("4" ein:notebook-worksheet-open-4th)
  ("5" ein:notebook-worksheet-open-5th)
  ("6" ein:notebook-worksheet-open-6th)
  ("7" ein:notebook-worksheet-open-7th)
  ("8" ein:notebook-worksheet-open-8th)
  ("9" ein:notebook-worksheet-open-last)
  ("+" ein:notebook-worksheet-insert-next)
  ("-" ein:notebook-worksheet-delete)
  ("x" ein:notebook-close))

;; keymap https://github.com/Timidger/dotfiles/blob/master/.emacs.d/layers/+emacs/org/packages.el
(defhydra hydra-agenda-view (:hint nil)
  "
Headline^^            Visit entry^^               Filter^^                    Date^^               Toggle mode^^        View^^             Clock^^        Other^^
--------^^---------   -----------^^------------   ------^^-----------------   ----^^-------------  -----------^^------  ----^^---------    -----^^------  -----^^-----------
[_ht_] set status     [_SPC_] in other window     [_ft_] by tag               [_ds_] schedule      [_tf_] follow        [_vd_] day         [_ci_] in      [_gr_] reload
[_hk_] kill           [_TAB_] & go to location    [_fr_] refine by tag        [_dd_] set deadline  [_tl_] log           [_vw_] week        [_co_] out     [_._]  go to today
[_hr_] refile         [_RET_] & del other windows [_fc_] by category          [_dt_] timestamp     [_ta_] archive       [_vt_] fortnight   [_ck_] cancel  [_gd_] go to date
[_hA_] archive        [_o_]   link                [_fh_] by top headline      [_+_]  do later      [_tr_] clock report  [_vm_] month       [_cj_] jump    ^^
[_hT_] set tags       ^^                          [_fx_] by regexp            [_-_]  do earlier    [_td_] diaries       [_vy_] year        ^^             ^^
[_hp_] set priority   ^^                          [_fd_] delete all filters   ^^                   ^^                   [_vn_] next span   ^^             ^^
^^                    ^^                          ^^                          ^^                   ^^                   [_vp_] prev span   ^^             ^^
^^                    ^^                          ^^                          ^^                   ^^                   [_vr_] reset       ^^             ^^
[_q_] quit
"
  ;; Entry
  ("ht" org-agenda-todo)
  ("hk" org-agenda-kill)
  ("hr" org-agenda-refile)
  ("hA" org-agenda-archive-default)
  ("hT" org-agenda-set-tags)
  ("hp" org-agenda-priority)

  ;; Visit entry
  ("SPC" org-agenda-show-and-scroll-up)
  ("<tab>" org-agenda-goto :exit t)
  ("TAB" org-agenda-goto :exit t)
  ("RET" org-agenda-switch-to :exit t)
  ("o"   link-hint-open-link :exit t)

  ;; Date
  ("ds" org-agenda-schedule)
  ("dd" org-agenda-deadline)
  ("dt" org-agenda-date-prompt)
  ("+" org-agenda-do-date-later)
  ("-" org-agenda-do-date-earlier)

  ;; View
  ("vd" org-agenda-day-view)
  ("vw" org-agenda-week-view)
  ("vt" org-agenda-fortnight-view)
  ("vm" org-agenda-month-view)
  ("vy" org-agenda-year-view)
  ("vn" org-agenda-later)
  ("vp" org-agenda-earlier)
  ("vr" org-agenda-reset-view)

  ;; Toggle mode
  ("tf" org-agenda-follow-mode)
  ("tl" org-agenda-log-mode)
  ("ta" org-agenda-archives-mode)
  ("tr" org-agenda-clockreport-mode)
  ("td" org-agenda-toggle-diary)

  ;; Filter
  ("ft" org-agenda-filter-by-tag)
  ("fr" org-agenda-filter-by-tag-refine)
  ("fc" org-agenda-filter-by-category)
  ("fh" org-agenda-filter-by-top-headline)
  ("fx" org-agenda-filter-by-regexp)
  ("fd" org-agenda-filter-remove-all)

  ;; Clock
  ("ci" org-agenda-clock-in :exit t)
  ("co" org-agenda-clock-out)
  ("ck" org-agenda-clock-cancel)
  ("cj" org-agenda-clock-goto :exit t)

  ;; Other
  ("q" nil :exit t)
  ("gr" org-agenda-redo)
  ("." org-agenda-goto-today)
  ("gd" org-agenda-goto-date))

(defhydra dumb-jump-hydra (:color blue :columns 3)
  "Dumb Jump"
  ("j" dumb-jump-go "Go")
  ("o" dumb-jump-go-other-window "Other window")
  ("e" dumb-jump-go-prefer-external "Go external")
  ("x" dumb-jump-go-prefer-external-other-window "Go external other window")
  ("i" dumb-jump-go-prompt "Prompt")
  ("l" dumb-jump-quick-look "Quick look")
  ("b" dumb-jump-back "Back"))

(defhydra hydra-flycheck (:hint nil)
  "
  _a_: list errors   _p_: prev error   _<_ : first error _w_: copy message
  _c_: check buffer  _n_: next error   _>_ : last error  _C_: clear errors    "
  ("a" flycheck-list-errors)
  ("n" flycheck-next-error)
  ("p" flycheck-previous-error)
  ("<" flycheck-first-error)
  (">" (lambda ()
	 (interactive)
	 (goto-char (point-max)) (flycheck-previous-error)))
  ("c" flycheck-buffer)
  ("C" flycheck-clear)
  ("w" flycheck-copy-errors-as-kill)
  ("q" nil "quit" :color "deep sky blue"))

;; (defhydra hydra-clock (:color blue)
;;     "
;;     ^
;;     ^Clock^             ^Do^
;;     ^─────^─────────────^──^─────────
;;     _q_ quit            _c_ cancel
;;     ^^                  _d_ display
;;     ^^                  _e_ effort
;;     ^^                  _i_ in
;;     ^^                  _j_ jump
;;     ^^                  _o_ out
;;     ^^                  _r_ report
;;     ^^                  ^^
;;     "
;;     ("q" nil)
;;     ("c" org-clock-cancel :color pink)
;;     ("d" org-clock-display)
;;     ("e" org-clock-modify-effort-estimate)
;;     ("i" org-clock-in)
;;     ("j" org-clock-goto)
;;     ("o" org-clock-out)
;;     ("r" org-clock-report)
;;   )

;; (defhydra hydra-straight-helper (:hint nil)
;;   "
;; _c_heck all       |_f_etch all     |_m_erge all      |_n_ormalize all   |p_u_sh all
;; _C_heck package   |_F_etch package |_M_erge package  |_N_ormlize package|p_U_sh package
;; ----------------^^+--------------^^+---------------^^+----------------^^+------------||_q_uit||
;; _r_ebuild all     |_p_ull all      |_v_ersions freeze|_w_atcher start   |_g_et recipe
;; _R_ebuild package |_P_ull package  |_V_ersions thaw  |_W_atcher quit    |prun_e_ build"
;;   ("c" straight-check-all)
;;   ("C" straight-check-package)
;;   ("r" straight-rebuild-all)
;;   ("R" straight-rebuild-package)
;;   ("f" straight-fetch-all)
;;   ("F" straight-fetch-package)
;;   ("p" straight-pull-all)
;;   ("P" straight-pull-package)
;;   ("m" straight-merge-all)
;;   ("M" straight-merge-package)
;;   ("n" straight-normalize-all)
;;   ("N" straight-normalize-package)
;;   ("u" straight-push-all)
;;   ("U" straight-push-package)
;;   ("v" straight-freeze-versions)
;;   ("V" straight-thaw-versions)
;;   ("w" straight-watcher-start)
;;   ("W" straight-watcher-quit)
;;   ("g" straight-get-recipe)
;;   ("e" straight-prune-build)
;;   ("q" nil))


;; (defhydra sm/smerge-hydra
;;     (:color pink :hint nil :post (smerge-auto-leave))
;;   "
;; ^Move^       ^Keep^               ^Diff^                 ^Other^
;; ^^-----------^^-------------------^^---------------------^^-------
;; _n_ext       _b_ase               _<_: upper/base        _C_ombine
;; _p_rev       _u_pper              _=_: upper/lower       _r_esolve
;; ^^           _l_ower              _>_: base/lower        _k_ill current
;; ^^           _a_ll                _R_efine
;; ^^           _RET_: current       _E_diff
;; "
;;   ("n" smerge-next)
;;   ("p" smerge-prev)
;;   ("b" smerge-keep-base)
;;   ("u" smerge-keep-upper)
;;   ("l" smerge-keep-lower)
;;   ("a" smerge-keep-all)
;;   ("RET" smerge-keep-current)
;;   ("\C-m" smerge-keep-current)
;;   ("<" smerge-diff-base-upper)
;;   ("=" smerge-diff-upper-lower)
;;   (">" smerge-diff-base-lower)
;;   ("R" smerge-refine)
;;   ("E" smerge-ediff)
;;   ("C" smerge-combine-with-next)
;;   ("r" smerge-resolve)
;;   ("k" smerge-kill-current)
;;   ("ZZ" (lambda ()
;;           (interactive)
;;           (save-buffer)
;;           (bury-buffer))
;;  "Save and bury buffer" :color blue)
;;   ("q" nil "cancel" :color blue))


(defhydra hydra-smerge (:color pink
			       :hint nil
			       :pre (unless smerge-mode (smerge-mode +1))
			       :post (smerge-auto-leave))
  "
							 [smerge]
^Move^       ^Keep^               ^Diff^                 ^Other^
  ╭─────────────────────────────────────────────────────────╯
_n_ext       _b_ase               _<_: upper/base        _C_ombine
_p_rev       _m_ine              _=_: upper/lower       _r_esolve
_C-k_        _o_ther             _>_: base/lower        _R_move
_k_ ↑       _a_ll                _R_efine
_j_ ↓       _RET_: current       _E_diff
_C-j_
"
  ("n" smerge-next)
  ("p" smerge-prev)
  ("C-j" smerge-next)
  ("C-k" smerge-prev)
  ("j" next-line)
  ("k" previous-line)
  ("b" smerge-keep-base)
  ("m" smerge-keep-upper) ;; keep mine
  ("o" smerge-keep-lower) ;; keep other
  ;; ("u" smerge-keep-upper)
  ;; ("l" smerge-keep-lower)
  ("a" smerge-keep-all)
  ("RET" smerge-keep-current)
  ("\C-m" smerge-keep-current)
  ("<" smerge-diff-base-upper)
  ("=" smerge-diff-upper-lower)
  (">" smerge-diff-base-lower)
  ("H" smerge-refine)
  ("E" smerge-ediff)
  ("C" smerge-combine-with-next)
  ("r" smerge-resolve)
  ("R" smerge-kill-current)
  ("ZZ" (lambda ()
	  (interactive)
	  (save-buffer)
	  (bury-buffer))
   "Save and bury buffer" :color blue)
  ("q" nil "cancel" :color blue))

(defhydra hydra-tab (:color red :hint nil)
  "
						^tab^
-------^^-----------------------------^^--------------------------------^^-----------------------^^-------------------
    ^Switch^                        ^Move^                        ^Create & Kill^              ^Other^
_h_:       left tab              _<_: tab to left               _n_: new tab                  _rr_: rename
_l_:       right tab             _>_: tab to right              _N_: new tab with name        _rp_: rename default
[_1_.._9_]: switch [1st..last]     [_m1_..._9_]: move [1st..last]   _x_: kill                     _U_ : undo
											_R_ : redo
"

  ;; ("u" winner-undo)
  ;; ;; doesn't work
  ;; ;; ("C-r" winner-redo)

  ;; ;; tab-bar-mode (Emacs 27)
  ;; ;; `awesome-tab`: https://github.com/manateelazycat/awesome-tab
  ("h"  #'tab-bar-switch-to-prev-tab)
  ("l"  #'tab-bar-switch-to-next-tab)
  ("<"  #'toy/tab-move-left)
  (">"  #'toy/tab-move-right)

  ;; ;; FIXME:
  ;; ;; ("w" #'toy/hydra-window/body)
  ;; ("w" (lambda () (interactive) (hydra-disable)
  ;;           (toy/hydra-window/body)))

  ("rr" #'tab-bar-rename-tab)
  ;; rename to project name
  ("rp" #'toy/set-tab-name-default) ;; NOTE: defined in `ide.el`

  ("n" #'tab-bar-new-tab)
  ;; new tab and set name
  ("N" (lambda () (interactive)
	 (tab-bar-new-tab)
	 (call-interactively 'tab-bar-rename-tab)))
  ("x" #'tab-bar-close-tab)

  ;; select tab
  ("1" (lambda () (interactive) (tab-bar-select-tab 1)))
  ("2" (lambda () (interactive) (tab-bar-select-tab 2)))
  ("3" (lambda () (interactive) (tab-bar-select-tab 3)))
  ("4" (lambda () (interactive) (tab-bar-select-tab 4)))
  ("5" (lambda () (interactive) (tab-bar-select-tab 5)))
  ("6" (lambda () (interactive) (tab-bar-select-tab 6)))
  ("7" (lambda () (interactive) (tab-bar-select-tab 7)))
  ("8" (lambda () (interactive) (tab-bar-select-tab 8)))
  ("9" (lambda () (interactive) (tab-bar-select-tab 9)))

  ;; move tab
  ("m1" (lambda () (interactive) (tab-bar-move-tab-to 1)))
  ("m2" (lambda () (interactive) (tab-bar-move-tab-to 2)))
  ("m3" (lambda () (interactive) (tab-bar-move-tab-to 3)))
  ("m4" (lambda () (interactive) (tab-bar-move-tab-to 4)))
  ("m5" (lambda () (interactive) (tab-bar-move-tab-to 5)))
  ("m6" (lambda () (interactive) (tab-bar-move-tab-to 6)))
  ("m7" (lambda () (interactive) (tab-bar-move-tab-to 7)))
  ("m8" (lambda () (interactive) (tab-bar-move-tab-to 8)))
  ("m9" (lambda () (interactive) (tab-bar-move-tab-to 9)))

  ;; winner
  ("U" winner-undo)
  ("R" winner-redo)

  ("q" nil "cancel" :color blue)
  )

(defun toy/tab-move-right ()
  (interactive)
  (let* ((ix (tab-bar--current-tab-index))
	 (n-tabs (length (funcall tab-bar-tabs-function)))
	 (next-ix (mod (+ ix 1) n-tabs)))
    ;; use 1-based index
    (tab-bar-move-tab-to (+ 1 next-ix))))

(defun toy/tab-move-left ()
  (interactive)
  (let* ((ix (tab-bar--current-tab-index))
	 (n-tabs (length (funcall tab-bar-tabs-function)))
	 (next-ix (mod (+ ix n-tabs -1) n-tabs)))
    ;; use 1-based index
    (tab-bar-move-tab-to (+ 1 next-ix))))
#+end_src

* Git integration with magit & diff-hl & smerge

To manage the git repository, use builtin package ~vc~.

#+begin_src emacs-lisp
(use-package with-editor
    :straight t
    :ensure t)

(use-package emacsql
    :straight t
    :ensure t)

(use-package magit
    :straight t
    :commands (magit-file-delete magit-status magit-checkout)
    :hook (magit-pop-mode . hide-mode-line-mode)
    :custom
    ;; (magit-refresh-verbose t) ;; debug only
    ;; (magit-display-buffer-function #'magit-display-buffer-fullframe-status-v1)
    (magit-revert-buffers 'silent)
    (git-commit-summary-max-length 50)
    (magit-log-section-commit-count 5)
    (magit-diff-options (quote ("--minimal" "--patience")))
    (magit-tag-arguments (quote ("--annotate" "--sign")))
    (magit-merge-arguments (quote ("--no-ff")))
    (magit-rebase-arguments (quote ("--autostash")))
    ;; use colored graph lines. Could be a performance issue.
    (magit-log-arguments (quote ("-n64" "--graph" "--decorate" "--color" "--stat")))
    (magit-diff-use-overlays nil)
    (magit-use-overlays nil)
    (magit-auto-revert-mode nil)
    (git-rebase-auto-advance  nil)
    (magit-stage-all-confirm nil)
    (magit-commit-squash-commit 'marked-or-curren)
    (magit-push-always-verify ni) ;; cuz it says so
    (magit-diff-refine-hunk nil)
    (git-commit-finish-query-functions nil)
    (magit-log-section-commit-count 10)
    (magit-log-section-arguments '("--graph" "--decorate" "--color"))
    ;; (magit-log-margin '(t "%Y-%m-%d %H:%M:%S" magit-log-margin-width t 18))
    (magit-log-margin  '(t "%m/%d/%Y %H:%M " magit-log-margin-width t 18))
    ;; (magit-log-margin-show-committer-date t)
    ;; (magit-git-executable "/usr/local/bin/git")
    :init
    ;; Must be set early to prevent ~/.emacs.d/transient from being created
    (setq transient-levels-file  (concat poly-etc-dir "transient/levels")
	  transient-values-file  (concat poly-etc-dir "transient/values")
	  transient-history-file (concat poly-etc-dir "transient/history"))

    ;; Have magit-status go full screen and quit to previous
    ;; configuration.  Taken from
    ;; http://whattheemacsd.com/setup-magit.el-01.html#comment-748135498
    ;; and http://irreal.org/blog/?p=2253
    (defadvice magit-status (around magit-fullscreen activate)
      (window-configuration-to-register :magit-fullscreen)
      ad-do-it
      (delete-other-windows))
    (defadvice magit-quit-window (after magit-restore-screen activate)
      (jump-to-register :magit-fullscreen))
    ;; (setq
    ;; ;; Use flyspell in the commit buffer
    ;; (add-hook 'git-commit-setup-hook 'git-commit-turn-on-flyspell)
    :config
    (setq magit-status-sections-hook
	  '(
	    magit-insert-status-headers
	    magit-insert-merge-log
	    magit-insert-rebase-sequence
	    ;; magit-insert-am-sequence
	    ;; magit-insert-sequencer-sequence
	    ;; magit-insert-bisect-output
	    ;; magit-insert-bisect-rest
	    ;; magit-insert-bisect-log
	    magit-insert-untracked-files
	    magit-insert-unstaged-changes
	    magit-insert-staged-changes
	    magit-insert-unpushed-cherries
	    magit-insert-stashes
	    ;; magit-insert-recent-commits
	    magit-insert-unpulled-from-pushremote
	    magit-insert-unpushed-to-upstream
	    ;; magit-insert-unpushed-to-pushremote
	    ;; magit-insert-unpulled-from-upstream
	    ))

    (setq magit-status-headers-hook
	  '(
	    ;; magit-insert-repo-header
	    magit-insert-remote-header
	    ;; magit-insert-error-header
	    magit-insert-diff-filter-header
	    magit-insert-head-branch-header
	    magit-insert-upstream-branch-header
	    magit-insert-push-branch-header
	    magit-insert-tags-header
	    ))

    (setq magit-refresh-status-buffer nil)
    (setq auto-revert-buffer-list-filter
	  'magit-auto-revert-repository-buffer-p)
    (remove-hook 'magit-refs-sections-hook 'magit-insert-tags)
    (remove-hook 'server-switch-hook 'magit-commit-diff)

    ;; Opening repo externally
    (defun poly/parse-repo-url (url)
      "convert a git remote location as a HTTP URL"
      (if (string-match "^http" url)
	  url
	(replace-regexp-in-string "\\(.*\\)@\\(.*\\):\\(.*\\)\\(\\.git?\\)"
				  (concat (if (string-match "17usoft.com" url) "http" "https") "://\\2/\\3")
				  url)))
    (defun poly/magit-open-repo ()
      "open remote repo URL"
      (interactive)
      (let ((url (magit-get "remote" "origin" "url")))
	(progn
	  (browse-url (poly/parse-repo-url url))
	  (message "opening repo %s" url))))

    (defun m/magit-display-buffer-traditional (buffer)
      "Like magit-display-buffer-traditional, but re-uses window for status mode, too."
      (display-buffer
       buffer (if (not (memq (with-current-buffer buffer major-mode)
			     '(magit-process-mode
			       magit-revision-mode
			       magit-diff-mode
			       magit-stash-mode
			       magit-status-mode)))
		  '(display-buffer-same-window)
		nil)))

    (setq magit-display-buffer-function 'm/magit-display-buffer-traditional)

    (defun m/magit-reset-author (&optional args)
      "Resets the authorship information for the last commit"
      (interactive)
      (magit-run-git-async "commit" "--amend" "--no-edit" "--reset-author"))

    ;; (magit-define-popup-action 'magit-commit-popup
    ;;   ?R "Reset author" 'm/magit-reset-author)
    (transient-append-suffix 'magit-commit
	"S"
      '("R" "Reset author" m/magit-reset-author))
    :bind
    (:map transient-base-map
	  ("q" . transient-quit-one)
	  ("<escape>" . transient-quit-one))
    (:map transient-edit-map
	  ("q" . transient-quit-one)
	  ("<escape>" . transient-quit-one))
    (:map transient-sticky-map
	  ("q" . transient-quit-one)
	  ("<escape>" . transient-quit-one)))

(use-package magit-gitflow
    :straight t
    :after magit
    :commands magit-gitflow-popup
    :hook (magit-mode . turn-on-magit-gitflow)
    )

;; ;; Show TODOs in magit
;; (use-package magit-todos
;;     :straight t
;;     :diminish
;;     :after magit
;;     :config
;;     (magit-todos-mode))

;; git-gutter-plus - View, stage and revert Git changes from the buffer (inspired by package of same name from vim)
(use-package git-gutter+
    :straight t
    :diminish git-gutter+-mode
    :demand t
    :bind (("C-c g n" . git-gutter+-next-hunk)
	   ("C-c g p" . git-gutter+-previous-hunk))
    :config
    (defun git-gutter+-remote-default-directory (dir file)
      (let* ((vec (tramp-dissect-file-name file))
	     (method (tramp-file-name-method vec))
	     (user (tramp-file-name-user vec))
	     (domain (tramp-file-name-domain vec))
	     (host (tramp-file-name-host vec))
	     (port (tramp-file-name-port vec)))
	(tramp-make-tramp-file-name method user domain host port dir)))

    (defun git-gutter+-remote-file-path (dir file)
      (let ((file (tramp-file-name-localname (tramp-dissect-file-name file))))
	(replace-regexp-in-string (concat "\\`" dir) "" file)))
    (global-git-gutter+-mode)
    )

(use-package git-gutter-fringe+ :straight t)

;; git-messenger - Provides a function popup commit message at current line (port of package of same name from vim)
(use-package git-messenger
    :straight t
    :bind ("C-c g p" . git-messenger:popup-message)
    :init
    (custom-set-variables
     '(git-messenger:use-magit-popup t))
    (setq git-messenger:show-detail t)
    :config
    (progn
      (define-key git-messenger-map (kbd "RET") 'git-messenger:popup-close)))

;; git-timemachine - Step through historic versions of a git controlled file
(use-package git-timemachine
    :straight t
    :bind ("C-c g t" . git-timemachine-toggle))

;; gitignore-mode - Major mode for various Git configuration files
(use-package git-modes :straight t)

;; browse-at-remote - Browse target page on github/gitlab/bitbucket
(use-package browse-at-remote
    :straight t
    :bind ("C-c g b" . browse-at-remote/browse))

;; based on http://manuel-uberti.github.io/emacs/2018/02/17/magit-bury-buffer/
(defun magit-kill-buffers ()
  "Restore window configuration and kill all Magit buffers."
  (interactive)
  (let ((buffers (magit-mode-get-buffers)))
    (magit-restore-window-configuration)
    (mapc #'kill-buffer buffers)))

;; required by forge
(use-package yaml
    :straight t)

(use-package forge
    :straight t
    :after (magit yaml)
    :commands forge-create-pullreq forge-create-issue
    :custom
    (forge-database-file (expand-file-name "forge/forge-database.sqlite" poly-etc-dir))
    (custom-set-variables '(forge-post-mode-hook '(visual-line-mode)))
    (forge-bug-reference-hooks
     '(git-commit-setup-hook magit-mode-hook))
    :config
    (setq forge-alist
	  (append forge-alist
		  '(("git.17usoft.com" "git.17usoft.com/api/v4" "git.17usoft.com" forge-gitlab-repository)
		    ("github.com" "api.github.com" "github.com" forge-github-repository))))
    ;; ;; remove some hooks for magit performance-s
    ;; (remove-hook 'magit-status-sections-hook 'forge-insert-pullreqs)
    ;; (remove-hook 'magit-status-sections-hook 'forge-insert-issues)
    )

(use-package ghub
    :straight t
    :after (magit forge)
    ;; :custom
    ;; (ghub-insecure-hosts '("git.17usoft.com/api/v4"))
    )

(use-package smerge-mode
    :straight t
    :ensure t
    :diminish
    :commands (smerge-mode
	       smerge-auto-leave
	       smerge-next
	       smerge-prev
	       smerge-keep-base
	       smerge-keep-upper
	       smerge-keep-lower
	       smerge-keep-all
	       smerge-keep-current
	       smerge-keep-current
	       smerge-diff-base-upper
	       smerge-diff-upper-lower
	       smerge-diff-base-lower
	       smerge-refine
	       smerge-ediff
	       smerge-combine-with-next
	       smerge-resolve
	       smerge-kill-current)
    :after (hydra magit)
    :hook ((find-file . (lambda ()
			  (save-excursion
			    (goto-char (point-min))
			    (when (re-search-forward "^<<<<<<< " nil t)
			      (smerge-mode 1)))))

	   ( magit-diff-visit-file . (lambda ()
				       (when smerge-mode
					 (hydra-smerge/body))))))

(use-package vdiff
    :straight t)

;; (use-package magit-delta
;;   :straight t
;;   :delight
;;   :if (executable-find "delta")
;;   :hook ((magit-mode . magit-delta-mode))
;;   :custom
;;   ( magit-delta-delta-args
;;     '("--max-line-distance" "0.6" "--24-bit-color" "always" "--color-only" "--dark" ;; "--diff-so-fancy"
;;       ;; "--no-gitconfig"
;;       )))

(use-package code-review
    :straight t
    :bind (:map forge-topic-mode-map
		("C-c r" . code-review-forge-pr-at-point))
    :custom
    (code-review-db-database-file (expand-file-name "code-review-db.sqlite" poly-cache-dir))
    (code-review-log-file (expand-file-name "code-review-error.log" poly-cache-dir))
    :config
    (setq code-review-gitlab-host "git.17usoft.com/api")
    (setq code-review-gitlab-baseurl "git.17usoft.com")
    (setq code-review-gitlab-graphql-host "git.17usoft.com/api"))
#+end_src

Enable diff-hl in based on major modes.

#+begin_src emacs-lisp
  (straight-use-package 'diff-hl)
  (autoload 'diff-hl-mode "diff-hl" nil t)
  (autoload 'diff-hl-dired-mode "diff-hl-dired" nil t)

  (add-hook 'dired-mode-hook 'diff-hl-dired-mode)
  (add-hook 'prog-mode-hook 'diff-hl-mode)
  (add-hook 'conf-mode-hook 'diff-hl-mode)
#+end_src

* Input method with emacs-rime

~librime~ is required for this feature.

~emacs-rime~ is the frontend of rime built with emacs input method API.

#+begin_src emacs-lisp
(defun +rime-predicate-is-back-quote-or-tilde ()
  (or (equal rime--current-input-key ?`)
      (equal rime--current-input-key ?~)))

(use-package rime
  :straight (rime
	     :host github
	     :repo "DogLooksGood/emacs-rime"
	     :files (:defaults "lib.c" "Makefile"))
  :defer t
  :custom
  ;; Disable input method in non-insert state.
  (rime-disable-predicates '(rime-predicate-prog-in-code-p
			     rime-predicate-after-alphabet-char-p
			     meow-normal-mode-p
			     meow-motion-mode-p
			     meow-keypad-mode-p))
  ;; Auto switch to inline ascii state when after a space after a non-ascii character.
  (rime-inline-predicates '(rime-predicate-space-after-cc-p
			    +rime-predicate-is-back-quote-or-tilde
			    rime-predicate-current-uppercase-letter-p))
  (rime-translate-keybindings '("C-f" "C-b" "C-n" "C-p" "C-g"))
  (default-input-method "rime")
  ;; (rime-cursor "˰")
  ;; (rime-librime-root (concat user-emacs-directory "librime/dist"))
  (rime-librime-root "/opt/local")
  (rime-emacs-module-header-root "/opt/local/include/emacs-mac")
  ;; (rime-show-candidate 'minibuffer)
  (rime-show-preedit t)
  (rime-show-candidate 'posframe)
  ;; (rime-show-candidate 'minibuffer)
  ;; (rime-posframe-properties (list :background-color "#202325"
  ;;				  :foreground-color "#ddddde" ;; "#dedddd"
  ;;				  :internal-border-width 6))
  ;; (rime-code-face
  ;;  '((t (:inherit default :background "#ffffff" :foreground "#000000"))))
  ;; (rime-disable-predicates
  ;;  '(evil-normal-state-p
  ;;    rime--after-alphabet-char-p
  ;;    rime--prog-in-code-p
  ;;    ))
  ;; (rime-share-data-dir "")
  (rime-user-data-dir (expand-file-name "rime" poly-local-dir))
  :bind
  (:map rime-active-mode-map
	("<tab>" . rime-inline-ascii)
	:map rime-mode-map
	("C-$" . rime-send-keybinding)
	("M-j" . rime-force-enable)))
#+end_src

* Telegram client with Telega

~telegram-libtd~ is required for this feature.

Use Telega as Telegram client.

#+begin_src emacs-lisp
(use-package telega
  :straight (telega
	     :host github
	     :repo "zevlg/telega.el"
	     :branch "master"
	     :files (:defaults "contrib" "etc" "server" "Makefile"))
  :commands (telega)
  :defer t
  :custom
  ;; (telega-symbol-reply "?")
  (telega-root-show-avatars nil)
  ;; (telega-user-show-avatars nil)
  ;; (telega-avatar-factors-alist '((1 . (0.8 . 0.1))
  ;;				 (2 . (0.8 . 0.1))))
  (telega-animation-play-inline nil)
  (telega-server-libs-prefix "/usr/local")
  (telega-use-images t)
  ;; (telega-proxies
  ;;  (list
  ;;   '(:server "127.0.0.1" :port 6153 :enable nil
  ;;	:type (:@type "proxyTypeSocks5"))))
  (telega-directory (expand-file-name "telega" poly-cache-dir))
  :config
  ;; show previews for photo/video webpages
  (advice-add #'telega-ins--webpage :before-while
	      (lambda (msg &rest args)
		(let ((ht (telega--tl-get msg :content :web_page :type)))
		  (-contains? '("video" "photo") ht))))

  ;; (add-hook 'telega-chat-mode-hook
  ;;	    (lambda ()
  ;;	      (set (make-local-variable 'company-backends)
  ;;		   (append '(telega-company-emoji
  ;;			     telega-company-username
  ;;			     telega-company-hashtag)
  ;;			   (when (telega-chat-bot-p telega-chatbuf--chat)
  ;;			     '(telega-company-botcmd))))
  ;;	      ;; (company-mode 1)
  ;;	      ))
  (unbind-key (kbd "k") telega-msg-button-map)  ;; delete marked or at point (doubled with d)
  (unbind-key (kbd "e") telega-msg-button-map)  ;; msg-edit
  (define-key telega-msg-button-map (kbd "E") 'telega-msg-edit)
  (unbind-key (kbd "n") telega-msg-button-map)  ;; button-forward (seems to not differ from next link)
  (unbind-key (kbd "l") telega-msg-button-map)  ;; redisplay
  (unbind-key (kbd "h") telega-chat-button-map) ;; info (doubled with i)

  (defun +telega-open-file (file)
    (cond
     ;; ((member (downcase (file-name-extension file)) '("png" "jpg" "gif" "jpeg"))
     ;;  (start-process "telega-open-photo" nil "/sbin/imv" file))
     ((member (downcase (file-name-extension file)) '("mp4"))
      (start-process "telega-open-video" nil "/opt/local/bin/mpv" file))
     (t
      (find-file file))))
  (setq telega-open-message-as-file '(photo video)
	telega-open-file-function '+telega-open-file)
  )
#+end_src

* Directory environment support with direnv

#+begin_src emacs-lisp
  (straight-use-package 'direnv)

  (setq direnv-always-show-summary nil)

;;  (define-key toggle-map "e" 'direnv-mode)

  (autoload 'direnv-mode "direnv" nil t)
#+end_src

* savehist

save minibuffer history

#+begin_src emacs-lisp
(use-package savehist
  :straight (:type built-in)
  :custom
  (savehist-file (expand-file-name "history" poly-cache-dir))
  :config
  (savehist-mode 1)
  (setq savehist-additional-variables
	'(kill-ring
	  log-edit-comment-ring
	  search-ring regexp-search-ring shell-command-history)))
#+end_src

* embark

#+begin_src emacs-lisp
(use-package embark
  :straight t
  :ensure t
  :init
  (setq prefix-help-command #'embark-prefix-help-command)
  :bind
  (("C-." . embark-act)         ;; pick some comfortable binding
   ("C-;" . embark-dwim)        ;; good alternative: M-.
   ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'
  :config
  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
	       '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
		 nil
		 (window-parameters (mode-line-format . none)))))

(use-package embark-consult
  :straight t
  :after (embark consult)
  :demand t ; only necessary if you have the hook below
  ;; if you want to have consult previews as you move around an
  ;; auto-updating embark collect buffer
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))

(use-package docker-compose-mode
  :straight t)
#+end_src
* activity log
** activity-watch
#+begin_src emacs-lisp
(use-package activity-watch-mode
    :straight t
    :demand
    :config
    (global-activity-watch-mode))
#+end_src
** wakatime
#+begin_src emacs-lisp
(use-package wakatime-mode
    :straight t
    :init
    (setq +wakatime-hide-filenames t)
    (when IS-MAC
      (setq wakatime-cli-path "/usr/local/bin/wakatime"))
    :hook ((org-mode . wakatime-mode)
           (prog-mode . wakatime-mode))
    :config
    (global-wakatime-mode +1))
#+end_src

* vterm

#+begin_src emacs-lisp

(use-package vterm
  :straight (vterm :type git :flavor melpa
                   :files ("*" (:exclude ".dir-locals.el" ".gitignore" ".clang-format" ".travis.yml") "vterm-pkg.el")
                   :host github :repo "akermu/emacs-libvterm"
 		   :no-native-compile t
                   )
  :demand
  :commands (vterm ds/vterm)
  :custom
  (vterm-max-scrollback 10000)
  (vterm-ignore-blink-cursor nil)
  (vterm-always-compile-module t)
  :init
  (setq vterm-shell "zsh")
  (defun ds/vterm-send-C-x ()
    (interactive)
    (vterm-send "C-x"))
  (defun ds/vterm-send-C-z ()
    (interactive)
    (vterm-send "C-z"))
  (when noninteractive
    (advice-add #'vterm-module-compile :override #'ignore)
    (provide 'vterm-module))
  :bind (:map vterm-mode-map
              ("C-c t" . 'vterm-copy-mode)
              ("C-x C-x" . 'ds/vterm-send-C-x)
	      ("C-z" . vterm-send-C-z)
	      :map vterm-copy-mode-map
              ("C-c t" . 'vterm-copy-mode))
  ;; :after ds-theme
  ;; :config
  ;; :general
  ;; (:keymaps 'vterm-mode-map
  ;;           [escape] #'vterm--self-insert
  ;;           [return] #'vterm--self-insert
  ;;           "p" #'vterm-yank
  ;;           "u" #'vterm-undo
  ;;           "C-y" #'vterm-yank
  ;;           "M-n" #'vterm-send-down
  ;;           "M-p" #'vterm-send-up
  ;;           "M-y" #'vterm-yank-pop
  ;;           "M-/" #'vterm-send-tab
  ;;           )
  :config
  (setq vterm-always-compile-module t)
  (define-key vterm-mode-map (kbd "C-h") 'vterm-send-C-h)
  (define-key vterm-mode-map (kbd "C-z") 'vterm-send-C-z)
  (defun vterm-send-meta-left ()
    "Send `M-<left>' to the libvterm."
    (interactive)
    (vterm-send-key "<left>" nil t))

  (defun vterm-send-meta-right ()
    "Send `M-<right>' to the libvterm."
    (interactive)
    (vterm-send-key "<right>" nil t))
  (define-key vterm-mode-map (kbd "M-<left>") 'vterm-send-meta-left)
  (define-key vterm-mode-map (kbd "M-<right>") 'vterm-send-meta-right)
  (setq vterm-keymap-exceptions (remove "C-h" vterm-keymap-exceptions))
  ;; (defun vterm-send-C-k-and-kill ()
  ;;   "Send `C-k' to libvterm, and put content in kill-ring."
  ;;   (interactive)
  ;;   (kill-ring-save (point) (vterm-end-of-line))
  ;;   (vterm-send-key "k" nil nil t))
  (add-hook 'vterm-mode-hook
            (lambda ()
	      (setq confirm-kill-processes nil)
	      (setq hscroll-margin 0)
              (set (make-local-variable 'buffer-face-mode-face) 'fixed-pitch)
              (buffer-face-mode t)))
  (defun ds/vterm (&optional name)
    (interactive "MName: ")
    (if (< 0 (length name))
        (if (get-buffer name)
            (switch-to-buffer name)
          (vterm name))
      (vterm)))
  (setq vterm-kill-buffer-on-exit t)
  (setq vterm-max-scrollback 6000)
  )

(use-package vterm-toggle
  :straight t
  :when (memq window-system '(mac ns x))
  :bind (([f2] . vterm-toggle)
         ;; ([f9] . vterm-compile)
         :map vterm-mode-map
         ([f2] . vterm-toggle)
         ([(control return)] . vterm-toggle-insert-cd))
  :config
  (setq vterm-toggle-cd-auto-create-buffer nil)
  (defvar vterm-compile-buffer nil)
  (defun vterm-compile ()
    "Compile the program including the current buffer in `vterm'."
    (interactive)
    (let* ((command (eval compile-command))
           (w (vterm-toggle--get-window)))
      (setq compile-command (compilation-read-command command))
      (let ((vterm-toggle-use-dedicated-buffer t)
            (vterm-toggle--vterm-dedicated-buffer (if w (vterm-toggle-hide)
                                                    vterm-compile-buffer)))
        (with-current-buffer (vterm-toggle-cd)
          (setq vterm-compile-buffer (current-buffer))
          (rename-buffer "*vterm compilation*")
          (compilation-shell-minor-mode 1)
          (vterm-send-M-w)
          (vterm-send-string compile-command t)
          (vterm-send-return))))))
#+end_src

* Hideshow

 text folding minor mode

#+begin_src emacs-lisp
;; (defconst hideshow-folded-face '((t (:inherit 'font-lock-comment-face :box t))))
;; (defun hideshow-folded-overlay-fn (ov)
;;   (when (eq 'code (overlay-get ov 'hs))
;;     (let* ((nlines (count-lines (overlay-start ov) (overlay-end ov)))
;;            (info (format " ... #%d " nlines)))
;;       (overlay-put ov 'display (propertize info 'face hideshow-folded-face)))))
;; (setq hs-set-up-overlay 'hideshow-folded-overlay-fn)

;;  (defvar my-hs-hide nil
;;       "Current state of hideshow for toggling all.")
;;  (defun my-toggle-hideshow-all ()
;;       "Toggle hideshow all."
;;       (interactive)
;;       (setq my-hs-hide (not my-hs-hide))
;;       (if my-hs-hide
;;           (hs-hide-all)
;;         (hs-show-all)))

(use-package hideshow
  :straight (:type built-in)
  :diminish hs-minor-mode
  :bind (("C-`" . hs-toggle-hiding)
	 ("C-c <left>" . hs-hide-block)
         ("C-c <right>" . hs-show-block)
         ("C-c <up>" . hs-hide-all)
         ("C-c <down>" . hs-show-all))
  ;; Nicer code-folding overlays (with fringe indicators)
  :hook (prog-mode . hs-minor-mode)
  :custom
  (hs-hide-comments-when-hiding-all nil))
#+end_src

* gpg

#+begin_src emacs-lisp
;; enable EasyPG handling
;; gpg-agent confuses epa when getting passphrase
(defun my-squash-gpg (&rest ignored-frame)
  "Kill any GPG_AGENT_INFO in our environment."
  (setenv "GPG_AGENT_INFO" nil))

(use-package epa-file
    :straight (:type built-in)
    :pdump nil
    :ensure t
    ;; :if (string-match "socrates" (system-name))
    :commands epa-file-enable
    ;; :init (epa-file-enable)
    ;; :custom
    :config
    (setq     epa-file-name-regexp "\\.gpg\\(~\\|\\.~[0-9]+~\\)?\\'\\|\\.asc"
	      ;; (epa-file-name-regexp "\\.\\(gpg\\|asc\\)$")
	      epa-file-cache-passphrase-for-symmetric-encryption t
	      epa-file-select-keys nil
	      epg-gpg-program "/opt/local/bin/gpg2")
    (add-hook 'after-make-frame-functions 'my-squash-gpg t)
    (my-squash-gpg)
    (epa-file-name-regexp-update)
    (epa-file-enable))


(use-package auth-source-pass
    :straight (:type built-in)
    :ensure t
    ;; :if (file-exists-p "~/.password-store")
    :config (auth-source-pass-enable))

(use-package pinentry
    :straight t
    :config
    (pinentry-start)
    (setq epa-pinentry-mode 'loopback))
#+end_src

* Mail

GNUS

#+begin_src emacs-lisp
(use-package gnus
  :straight (:type built-in)
  :ensure t
  ;; :straight (nnhackernews :type built-in)
  ;; :straight (nnreddit :type built-in)
  ;; :bind (("C-c m" . 'gnus))
  ;; :bind (:map gnus-article-mode-map
  ;;             ("o" . gnus-mime-copy-part)
  ;;             :map gnus-topic-mode-map
  ;;             ("<tab>" . gnus-topic-select-group))
  :commands gnus
  :hook
  (gnus-select-group-hook . gnus-group-set-timestamp)
  (gnus-summary-exit-hook . gnus-topic-sort-groups-by-alphabet)
  (gnus-summary-exit-hook . gnus-group-sort-groups-by-rank)
  (gnus-group-mode . gnus-topic-mode)
  ((gnus-browse-mode gnus-server-mode gnus-group-mode gnus-summary-mode) . hl-line-mode)
  (gnus-started-hook . gnus-group-list-all-groups)
  :custom
  (gnus-use-cache t)
  (gnus-use-scoring nil)
  (gnus-keep-backlog 10)
  (gnus-suppress-duplicates t)
  (gnus-novice-user nil)
  (gnus-expert-user t)
  (gnus-interactive-exit 'quiet)
  (gnus-dbus-close-on-sleep t)
  (gnus-use-cross-reference nil)
  (gnus-inhibit-startup-message nil)
  ;; (gnus-select-method '(nnmaildir "" (directory "~/Mail/")))
  ;; (gnus-home-directory (expand-file-name "gnus/" poly-cache-dir))
  ;; (gnus-select-method '(nnfolder ""))
  ;; (gnus-secondary-select-methods
  ;;  '(
  ;;    (nnfolder "")
  ;;    ;; (nnmaildir ""
  ;;    ;; 		(directory "~/Mail/"))
  ;;    )
  ;;  )
  ;; (gnus-select-method
  ;;  '(nnmaildir "MyMail"
  ;;              (directory "~/Mail/")))
  ;; (gnus-secondary-select-methods nil)
  ;; (gnus-select-method '(nnnil))
  ;; (gnus-secondary-select-methods
  ;;  '((nnmaildir "MyMail"
  ;;               (directory "~/Mail/"))))
  ;; (gnus-secondary-select-methods
  ;;  '((nnmaildir ""
  ;;               (directory "~/Mail/"))))
  ;; Render HTML content using gnus-w3m
  (mm-text-html-renderer 'gnus-w3m)
  (browse-url-browser-function #'w3m-browse-url)
  (gnus-inhibit-images nil);; Keep images displayed
  (gnus-blocked-images nil)
  (mm-inline-text-html-with-images t)
  :config
  (auto-image-file-mode t)

  ;; (setq ;; mail-sources
  ;;  mail-sources '((maildir :path "~/Mail/" :subdirs ("cur" "new")))
  ;;  ;; '((maildir :path "~/Mail/Inbox/")
  ;;  ;;   (maildir :path "~/Mail/archive/"))
  ;;  )
  (setq gnus-select-method
	'(nnmaildir "" (directory "~/Mail")))
  ;; (setq gnus-secondary-select-methods nil)

  (setq mail-sources
	'((maildir :path "~/Mail/Inbox"  :subdirs ("cur" "new" "tmp"))))
  ;; (setq mail-sources nil)
  ;; (setq poly/mail-root-dir (expand-file-name "Mail" "~"))
  ;; (let ((gmail (expand-file-name "Inbox"  poly/mail-root-dir))
  ;; 	(work (expand-file-name "work"  poly/mail-root-dir)))
  ;;   (setq mail-sources nil)
  ;;   (if (file-directory-p gmail)
  ;; 	(add-to-list 'mail-sources `(maildir :path ,gmail  :subdirs ("cur" "new" "tmp"))))
  ;;   ;; (if (file-directory-p work)
  ;;   ;; 	(add-to-list 'mail-sources `(maildir :path ,work  :subdirs ("cur" "new"))))

  ;;   ;; (setq gnus-secondary-select-methods
  ;;   ;;   `((nnmaildir "gmail" (directory ,gmail))
  ;;   ;; 	(nnmaildir "work" (directory ,work))))
  ;;   ;; (setq gnus-select-method
  ;;   ;;   '(nnmaildir "Local"
  ;;   ;;               (directory "~/Maildir")
  ;;   ;;               (nnir-search-engine notmuch)
  ;;   ;;   ))

  ;;   ;; (setq gnus-select-method
  ;;   ;; 	  `(nnmaildir "gmail"
  ;;   ;; 		      (directory ,gmail)
  ;;   ;; 		      (expire-age never))
  ;;   ;; 	  ;; `((nnmaildir "gmail" (directory ,gmail))
  ;;   ;; 	  ;;   (nnmaildir "work" (directory ,work)))
  ;;   ;; 	  )
  ;;     (setq gnus-secondary-select-methods
  ;; 	    `((nnmaildir  "" (directory ,gmail))))

  ;;   )

  ;; (setq gnus-select-method nil)
  ;; (setq gnus-select-method '(nnml ""))
  (add-hook 'gnus-group-mode-hook 'gnus-topic-mode)
  (setq gnus-use-trees nil)
  (setq gnus-gcc-mark-as-read t)
  (setq gnus-asynchronous t)
  (setq browse-url-browser-function 'browse-url-default-macosx-browser)
  (setq gnus-check-new-newsgroups nil)
  ;; (setq gnus-select-method '(nnnil ""))

  ;; (setq gnus-permanently-visible-groups ".*")
  ;; (setq gnus-message-archive-group "nnmaildir+gmail:outbox")

  (setq gnu-fetch-old-headers t)
  (setq  mail-source-delete-incoming nil)
  (setq gnus-thread-sort-functions
	'(gnus-thread-sort-by-number
          gnus-thread-sort-by-most-recent-date))

  ;; (setq gnus-secondary-select-methods nil)
  (setq gnus-secondary-select-methods
	'((nnmaildir "Gmail"
		     (directory "~/Mail/Inbox"))
	  (nnmaildir "QQMail"
		     (directory "~/Mail/QQMail"))
	  (nnmaildir "Work"
		     (directory "~/Mail/work"))
	  ))

  ;; (setq mh-mime-save-parts-directory (expand-file-name "Mail/attachments" "~"))

  ;; set default attachement download directory
  (setq mm-default-directory (expand-file-name "Mail/attachments" "~"))

  (setq message-forward-as-mime nil)

  ;; prevent ask "Gnus auto-save file exists"
  (setq gnus-always-read-dribble-file t)

  ;; (setq gnus-select-method
  ;; 	'(nnmaildir ""
  ;; 		    (directory "~/Mail/Inbox")
  ;; 		    (get-new-mail nil)))

  ;; ;; Sent mail
  ;; (setq gnus-message-archive-method gnus-select-method)
  ;; (setq gnus-message-archive-oroup "Sent")

  ;; (setq gnus-secondary-select-methods
  ;; 	'((nnml ""))
  ;; 	mail-user-agent 'gnus-user-agent
  ;; 	read-mail-command 'gnus)

  ;; (setq gnus-secondary-select-methods nil)

  ;; (setq group-name-map '(
  ;; 			 ;; 	 ("nnmaildir+OldEmail:INBOX" . "Gmail-Inbox")
  ;; 			 ;; ("nnmaildir+Work:INBOX" . "Work-Inbox")
  ;; 			 ;; ("nnmaildir+Work:Archive" . "Work-Archive")
  ;; 			 ;; ("nnmaildir+Work:Backlog" . "Work-Backlog")
  ;; 			 ;; ("nnmaildir+Work:Sent Mail" . "Work-Sent")
  ;; 			 ;; ("nnmaildir+Work:org-archive" . "Work-Org-Archive")
  ;; 			 ;; ("nnmaildir+Gmail:INBOX" . "Gmail: Inbox")
  ;; 			 ("Inbox" . "Gmail: Inbox")
  ;; 			 ("QQMail" . "Gmail: QQMail")
  ;; 			 ))

  (setq group-name-map '(
			 ;; 	 ("nnmaildir+OldEmail:INBOX" . "Gmail-Inbox")
			 ;; ("nnmaildir+Work:INBOX" . "Work-Inbox")
			 ;; ("nnmaildir+Work:Archive" . "Work-Archive")
			 ;; ("nnmaildir+Work:Backlog" . "Work-Backlog")
			 ;; ("nnmaildir+Work:Sent Mail" . "Work-Sent")
			 ;; ("nnmaildir+Work:org-archive" . "Work-Org-Archive")
			 ;; ("nnmaildir+Gmail:INBOX" . "Gmail: Inbox")
			 ("Inbox" . "nnmaildir+Gmail:Inbox")
			 ("QQMail" . "Gmail: QQMail")
			 ))
  (setq gnus-group-line-format "%ue%uM %S%p[%5t][%L]\t%P%5y:%B%(%uG%)%O\n")


  ;; You need to replace this key ID with your own key ID!
  (setq mml2015-signers '("FC6BDB92CD5BEB22")
	mml2015-encrypt-to-self t)
  (add-hook 'message-send-hook 'mml-secure-message-sign-pgpmime)

  (setq mm-inline-text-html-with-images t)

  (require 'browse-url)
  ;; (require 'gnus-dired)
  ;; (require 'gnus-topic)

  (setq nnmail-expiry-wait 30)
  (setq mm-encrypt-option 'guided)
  (setq mml-secure-openpgp-encrypt-to-self t)
  (setq mml-secure-openpgp-sign-with-sender t)
  (setq mml-secure-smime-encrypt-to-self t)
  (setq mml-secure-smime-sign-with-sender t)

  ;; gnus article
  (setq gnus-article-browse-delete-temp 'ask)
  (setq gnus-article-over-scroll nil)
  (setq gnus-article-show-cursor t)
  (setq gnus-article-sort-functions
        '((not gnus-article-sort-by-number)
          (not gnus-article-sort-by-date)))
  (setq gnus-article-truncate-lines nil)
  (setq gnus-html-frame-width 80)
  (setq gnus-html-image-automatic-caching t)
  (setq gnus-inhibit-images t)
  (setq gnus-max-image-proportion 0.3)
  (setq gnus-treat-display-smileys nil)
  (setq gnus-article-mode-line-format "%G %S %m")
  ;; (setq gnus-visible-headers
  ;;       '("^From:" "^To:" "^Cc:" "^Newsgroups:" "^Subject:" "^Date:"
  ;;         "Followup-To:" "Reply-To:" "^Organization:" "^X-Newsreader:"
  ;;         "^X-Mailer:"))
  ;; (setq gnus-sorted-header-list gnus-visible-headers)

  ;; Gnus group
  (setq gnus-level-subscribed 6)
  (setq gnus-level-unsubscribed 7)
  (setq gnus-level-zombie 8)
  (setq gnus-list-groups-with-ticked-articles nil)
  )

(use-package gnus-group
  :straight (:type built-in)
  ;; :straight nil
  :after gnus
  :ensure t
  :custom
  (gnus-group-sort-function 'gnus-group-sort-by-server)
  (gnus-level-subscribed 6)
  (gnus-level-unsubscribed 7)
  (gnus-level-zombie 8)
  (gnus-activate-level 2)
  (gnus-list-groups-with-ticked-articles nil)
  (gnus-group-line-format "%M%p%P%5y:%B%(%g%)\n")
  (gnus-group-mode-line-format "%%b")
  :config
  ;; (setq gnus-group-sort-function
  ;;       '((gnus-group-sort-by-unread)
  ;;         (gnus-group-sort-by-alphabet)
  ;;         (gnus-group-sort-by-rank)))
  (defun my-gnus-group-list-subscribed-groups ()
    "List all subscribed groups with or without un-read messages"
    (interactive)
    (gnus-group-list-all-groups 5))

  (define-key gnus-group-mode-map
    ;; list all the subscribed groups even they contain zero un-read messages
    (kbd "o") 'my-gnus-group-list-subscribed-groups)
  :hook ((gnus-group-mode-hook . hl-line-mode)
         (gnus-select-group-hook . gnus-group-set-timestamp))
  :bind (:map gnus-group-mode-map
	      ("M-n" . gnus-topic-goto-next-topic)
	      ("M-p" . gnus-topic-goto-previous-topic)))

(use-package gnus-topic
  :straight (:type built-in)
  :after (gnus gnus-group)
  :ensure nil
  :config
  (setq gnus-topic-display-empty-topics t)
  (add-hook 'gnus-group-mode-hook #'gnus-topic-mode)
  )

(use-package gnus-async
  :straight (:type built-in)
  :after gnus
  :ensure nil
  :defer t
  :config
  (setq gnus-asynchronous t)
  (setq gnus-use-article-prefetch 15))

(use-package gnus-sum
  :straight (:type built-in)
  :after gnus
  :defer t
  :ensure nil
  :config
  (setq gnus-auto-select-first nil)
  (setq gnus-summary-ignore-duplicates t)
  (setq gnus-suppress-duplicates t)
  (setq gnus-save-duplicate-list t)
  (setq gnus-summary-goto-unread nil)
  (setq gnus-summary-make-false-root 'adopt)
  (setq gnus-summary-thread-gathering-function
        'gnus-gather-threads-by-subject)
  (setq gnus-summary-gather-subject-limit 'fuzzy)
  (setq gnus-thread-sort-functions
        '( ;; gnus-thread-sort-by-date
          (not gnus-thread-sort-by-number)
	  (not gnus-thread-sort-by-most-recent-date)
	  ))
  (setq gnus-subthread-sort-functions
        'gnus-thread-sort-by-date)
  (setq gnus-thread-hide-subtree nil)
  (setq gnus-thread-ignore-subject nil)
  (setq gnus-user-date-format-alist
        '(((gnus-seconds-today) . "Today at %R")
          ((+ (* 60 60 24) (gnus-seconds-today)) . "Yesterday, %R")
          (t . "%Y-%m-%d %R")))
  (setq gnus-face-1 'gnus-header-content)
  (setq gnus-face-2 'gnus-header-from)
  (setq gnus-face-3 'gnus-header-subject)
  (setq gnus-summary-line-format "%U%R  %1{%-16,16&user-date;%}  %2{%-25,25f%}  %3{%B%S%}\n")
  (setq gnus-summary-mode-line-format "%p")
  ;; (setq gnus-sum-thread-tree-false-root ""
  ;;       gnus-sum-thread-tree-indent " "
  ;;       gnus-sum-thread-tree-leaf-with-other "├► "
  ;;       gnus-sum-thread-tree-root ""
  ;;       gnus-sum-thread-tree-single-leaf "╰► "
  ;;       gnus-sum-thread-tree-vertical "│")
  (setq gnus-sum-thread-tree-false-root "─┬> ")
  (setq gnus-sum-thread-tree-indent " ")
  (setq gnus-sum-thread-tree-single-indent "")
  (setq gnus-sum-thread-tree-leaf-with-other "├─> ")
  (setq gnus-sum-thread-tree-root "")
  (setq gnus-sum-thread-tree-single-leaf "└─> ")
  (setq gnus-sum-thread-tree-vertical "│"))

(use-package gnus-dired
  :straight (:type built-in)
  :after gnus
  :hook (dired-mode . gnus-dired-mode)
  )

(use-package gnus-art
  :straight (:type built-in)
  :after gnus
  :config
  (setq
   gnus-article-browse-delete-temp 'ask
   gnus-article-over-scroll nil
   gnus-article-show-cursor t
   gnus-article-sort-functions
   '((not gnus-article-sort-by-number)
     (not gnus-article-sort-by-date))
   gnus-article-truncate-lines nil
   gnus-html-frame-width 80
   gnus-html-image-automatic-caching t
   gnus-inhibit-images t
   gnus-max-image-proportion 0.7
   gnus-treat-display-smileys nil
   gnus-article-mode-line-format "%G %S %m"
   gnus-visible-headers
   '("^From:" "^Subject:" "^To:" "^Cc:" "^Newsgroups:" "^Date:"
     "Followup-To:" "Reply-To:" "^Organization:" "^X-Newsreader:"
     "^X-Mailer:")
   gnus-sorted-header-list gnus-visible-headers
   )
  :hook (gnus-article-mode-hook . (lambda () (setq-local fill-column 80))))
#+end_src

** Marking Articles
 https://github.com/cofi/dotfiles/blob/master/gnus.el
 https://github.com/fniessen/gnus-leuven

#+begin_src emacs-lisp
  ;; Unread Articles
  (when (char-displayable-p ?\u2691)
    (setq gnus-ticked-mark ?⚑))

  (when (char-displayable-p ?\u2690)
    (setq gnus-dormant-mark ?⚐))

  (when (char-displayable-p ?\u2709)
    (setq gnus-unread-mark ?✉))

  ;; Read Articles
  (when (char-displayable-p ?\u2717)
    (setq gnus-del-mark ?✗))

  (when (char-displayable-p ?\u2713)
    (setq gnus-read-mark ?✓))

  (setq gnus-ancient-mark ? )

  (when (char-displayable-p ?\u2620)
    (setq gnus-killed-mark ?☠))

  (when (char-displayable-p ?\u2197)
    (setq gnus-canceled-mark ?↗))

  (when (char-displayable-p ?\u267B)
    (setq gnus-expirable-mark ?♻))
  ;; Other marks

  (when (char-displayable-p ?\u21BA)
    (setq gnus-replied-mark ?↺))

  (when (char-displayable-p ?\u21AA)
    (setq gnus-forwarded-mark ?↪))

  (when (char-displayable-p ?\u260D)
    (setq gnus-cached-mark ?☍))

  (when (char-displayable-p ?\u2729)
    (setq gnus-unseen-mark ?✩))

  (when (char-displayable-p ?\u2699)
    (setq gnus-process-mark ?⚙))

  (when (char-displayable-p ?\u2605)
    (setq gnus-recent-mark ?★))

  ;; score variables
  (when (char-displayable-p ?\u2191)
    (setq gnus-score-over-mark ?↑))

  (when (char-displayable-p ?\u2193)
    (setq gnus-score-below-mark ?↓))
#+end_src


** outline

#+begin_src emacs-lisp
(use-package outline
  :straight (:type built-in)
  :diminish outline-minor-mode
  :commands outline-minor-mode
  :init
  (add-hook 'prog-mode-hook 'outline-minor-mode)
  (add-hook 'TeX-mode-hook 'outline-minor-mode)
  (add-hook 'message-mode-hook 'outline-minor-mode)
  ;; (defvar outline-minor-mode-prefix "\M-O")
  :config
  (dolist (buf (buffer-list))
    (with-current-buffer buf
      (when (derived-mode-p 'prog-mode 'tex-mode 'message-mode)
        (outline-minor-mode))))
  ;; (smartrep-define-key outline-minor-mode-map "M-s"
  ;;   '(("p" . outline-previous-visible-heading)
  ;;     ("n" . outline-next-visible-heading)
  ;;     ("u" . outline-up-heading)
  ;;     ("b" . outline-backward-same-level)
  ;;     ("f" . outline-forward-same-level)))
  (define-key outline-minor-mode-map (kbd "<M-S-return>") 'outline-insert-heading)
  (define-key outline-minor-mode-map (kbd "<backtab>") 'outshine-cycle-buffer)
  (define-key outline-minor-mode-map (kbd "C-M-i") nil)
  (add-hook 'outline-insert-heading-hook (lambda ()
                                           (if (string-equal "" head)
                                               (progn (call-interactively 'comment-dwim)
                                                      (insert "* "))
                                             (when (memq major-mode '(c++-mode
                                                                      c-mode
                                                                      arduino-mode))
                                               (save-excursion (insert " */"))))))
  (add-hook 'TeX-mode-hook
            (lambda ()
              (define-key outline-minor-mode-map (kbd "\C-i") '(menu-item "maybe-latex/hide-show" nil :filter
                                                                          (lambda (&rest _)
                                                                            (when (latex//header-at-point)
                                                                              #'outline-cycle))))))
  ;; Copied from latex-extra.
  (defcustom latex/section-hierarchy
    '("\\\\headerbox\\_>"
      "\\\\subparagraph\\*?\\_>"
      "\\\\paragraph\\*?\\_>"
      "\\\\subsubsection\\*?\\_>"
      "\\\\subsection\\*?\\_>"
      "\\\\section\\*?\\_>"
      "\\\\chapter\\*?\\_>"
      "\\\\part\\*?\\_>"
      ;; "\\\\maketitle\\_>"
      "\\\\appendix\\_>\\|\\\\\\(begin\\|end\\){document}"
      "\\\\documentclass\\_>")
    "List of regexps which define what a section can be.Ordered from deepest to highest level."
    :group 'outlines
    :type '(repeat (choice regexp function)))
  (defun latex/section-regexp ()
    "Return a regexp matching anything in `latex/section-hierarchy'."
    (format "^\\(%s\\)" (mapconcat 'identity latex/section-hierarchy "\\|")))
  (defun latex//header-at-point ()
    "Return header under point or nil, as per `latex/section-hierarchy'."
    (save-match-data
      (save-excursion
        (goto-char (line-beginning-position))
        (when (looking-at (latex/section-regexp))
          (match-string-no-properties 0))))))
#+end_src

** outshine

#+begin_src emacs-lisp
(use-package outshine
  :straight t
  :diminish outshine-mode
  :commands (outshine-mode
             outshine-cycle-buffer
             outshine-calc-outline-regexp)
  :init
  (add-hook 'outline-minor-mode-hook
            (lambda () ;; 在latex-mode和org-mode中不开启outshine。
              (unless (derived-mode-p 'latex-mode 'org-mode)
                (outshine-mode))))
  :config
  ;; Heading格式随mode不同，通常是M-;加*加空格
  (setq outshine-use-speed-commands t)
  (setq outshine-imenu-show-headlines-p nil)
  (define-key outshine-mode-map (kbd "M-TAB") nil))
#+end_src

** outorg

#+begin_src emacs-lisp
(use-package outorg
  :straight t
  ;; M-O # current heading.
  ;; C-u M-O # current buffer.
  ;; M-# outorg-copy-edits-and-exit.
  :after outshine)
#+end_src

**  org-download

org-download-paste for clipboard images

#+begin_src emacs-lisp
(use-package org-download
  :straight t
  :ensure t)
#+end_src

** org-msg send mail

#+begin_src emacs-lisp
(use-package org-msg
  :straight t
  :ensure t
  :config
  ;; (setq mail-user-agent 'message-user-agent) ; default
  ;; (setq mail-user-agent 'notmuch-user-agent) ; doesn't work. sends =-=-= blank message
  ;; (setq mail-user-agent 'mu4e-user-agent) ; 20220501
  ;; ; (org-msg-mode-notmuch) adds advice to notmuch-mua-{reply,mail}
  ;; ; notmuch-mua-reply called by try reply, defined by macro for 'r'
  (setq org-msg-options "html-postamble:nil H:5 num:nil ^:{} toc:nil author:nil email:nil \\n:t")
  (setq org-msg-convert-citation t))
#+end_src
