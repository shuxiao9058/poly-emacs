#+title: Addons

Configuration for addons, additional features provided by individual packages.

#+begin_src emacs-lisp
  ;;; -*- lexical-binding: t -*-
#+end_src

* hydra

#+begin_src emacs-lisp
(use-package hydra
  :straight t
  :ensure t
  ;; :after outline
  :custom
  (hydra-if-helpful t)
  :commands (defhydra)
  :bind ("M-o" . hydra-base/body))

;; (use-package hydra-posframe
;;   :straight (hydra-posframe
;;              :host github
;;              :repo "Ladicle/hydra-posframe"
;;              )
;;   :defer t
;;   :after (hydra posframe)
;; :config
;; (hydra-posframe-enable)
;;   )

(defhydra hydra-base ()
  "
_a_genda
_e_in
_o_utline & outshine
_s_traight
_t_ab
_w_indow
"
  ("a" hydra-agenda-view/body :exit t)
  ("d" dumb-jump-hydra/body :exit t)
  ("w" hydra-window/body :exit t)
  ("o" hydra-outline/body :exit t)
  ("s" hydra-straight/body :exit t)
  ("t" hydra-tab/body :exit t)
  ("e" hydra-ein/body :exit t)
  )

(defhydra hydra-straight (:hint nil)
  "
_c_heck all       |_f_etch all     |_m_erge all      |_n_ormalize all   |p_u_sh all
_C_heck package   |_F_etch package |_M_erge package  |_N_ormlize package|p_U_sh package
----------------^^+--------------^^+---------------^^+----------------^^+------------||_q_uit||
_r_ebuild all     |_p_ull all      |_v_ersions freeze|_w_atcher start   |_g_et recipe
_R_ebuild package |_P_ull package  |_V_ersions thaw  |_W_atcher quit    |prun_e_ build"
  ("c" straight-check-all)
  ("C" straight-check-package)
  ("r" straight-rebuild-all)
  ("R" straight-rebuild-package)
  ("f" straight-fetch-all)
  ("F" straight-fetch-package)
  ("p" straight-pull-all)
  ("P" straight-pull-package)
  ("m" straight-merge-all)
  ("M" straight-merge-package)
  ("n" straight-normalize-all)
  ("N" straight-normalize-package)
  ("u" straight-push-all)
  ("U" straight-push-package)
  ("v" straight-freeze-versions)
  ("V" straight-thaw-versions)
  ("w" straight-watcher-start)
  ("W" straight-watcher-quit)
  ("g" straight-get-recipe)
  ("e" straight-prune-build)
  ("q" nil))

(defhydra hydra-window ()
  "
Movement^^        ^Split^         ^Switch^    ^Resize^
----------------------------------------------------------------
_h_ ←         _v_ertical      _b_uffer    _q_ ←→ shrink
_j_ ↓         _x_ horizontal  _f_ind files  _w_ ←→ grow
_k_ ↑         _z_ undo        _a_ce 1   _e_ ↑↓ shrink
_l_ →         _Z_ reset       _s_wap    _r_ ↑↓ grow
_F_ollow       _D_lt Other     _S_ave    max_i_mize
_SPC_ cancel  _o_nly this     _d_elete
"
  ("h" windmove-left )
  ("j" windmove-down )
  ("k" windmove-up )
  ("l" windmove-right )
  ("q" shrink-window-horizontally)
  ("w" enlarge-window-horizontally)
  ("e" shrink-window)
  ("r" enlarge-window)
  ("b" helm-mini)
  ("f" helm-find-files)
  ("F" follow-mode)
  ("a" (lambda ()
	 (interactive)
	 (ace-window 1)
	 (add-hook 'ace-window-end-once-hook
		   'hydra-window/body))
   )
  ("v" (lambda ()
	 (interactive)
	 (split-window-right)
	 (windmove-right))
   )
  ("x" (lambda ()
	 (interactive)
	 (split-window-below)
	 (windmove-down))
   )
  ("s" (lambda ()
	 (interactive)
	 (ace-window 4)
	 (add-hook 'ace-window-end-once-hook
		   'hydra-window/body)))
  ("S" save-buffer)
  ("d" delete-window)
  ("D" (lambda ()
	 (interactive)
	 (ace-window 16)
	 (add-hook 'ace-window-end-once-hook
		   'hydra-window/body)))
  ("o" delete-other-windows)
  ("i" ace-maximize-window)
  ("z" (progn
	 (winner-undo)
	 (setq this-command 'winner-undo)))
  ("Z" winner-redo)
  ("SPC" nil))


;; (defhydra hydra-git-gutter (:body-pre (git-gutter+-mode 1)
;;              :hint nil)
;;   "
;; Git gutter:
;;   _j_: next hunk        _s_tage hunk     _q_uit
;;   _k_: previous hunk    _r_evert hunk    _Q_uit and deactivate git-gutter
;;   ^ ^                   _p_opup hunk
;;   _h_: first hunk
;;   _l_: last hunk
;; "
;;   ;; set start _R_evision
;;   ("j" git-gutter+:next-hunk)
;;   ("k" git-gutter+:previous-hunk)
;;   ("h" (progn (goto-char (point-min))
;;               (git-gutter+:next-hunk 1)))
;;   ("l" (progn (goto-char (point-min))
;;               (git-gutter+:previous-hunk 1)))
;;   ("s" git-gutter+:stage-hunks)
;;   ("r" git-gutter+:revert-hunks)
;;   ("p" git-gutter+:popup-hunk)
;;   ;;("R" git-gutter:set-start-revision)
;;   ("q" nil :color blue)
;;   ("Q" (progn (git-gutter+-mode -1)
;;               ;; git-gutter-fringe doesn't seem to
;;               ;; clear the markup right away
;;               (sit-for 0.1)
;;               ;;(git-gutter:clear)
;;               )
;;    :color blue)
;;   )

;; from https://www.reddit.com/r/emacs/comments/8of6tx/tip_how_to_be_a_beast_with_hydra/
(defhydra hydra-outline (:color blue :hint nil)
  "
    ^Hide^             ^Show^           ^Move
    ^^^^^^------------------------------------------------------
    _q_: sublevels     _a_: all         _u_: up
    _t_: body          _e_: entry       _n_: next visible
    _o_: other         _i_: children    _p_: previous visible
    _c_: entry         _k_: branches    _f_: forward same level
    _l_: leaves        _s_: subtree     _b_: backward same level
    _d_: subtree
    "
  ;; Hide
  ("q" hide-sublevels)    ; Hide everything but the top-level headings
  ("t" hide-body)         ; Hide everything but headings (all body lines)
  ("o" hide-other)        ; Hide other branches
  ("c" hide-entry)        ; Hide this entry's body
  ("l" hide-leaves)       ; Hide body lines in this entry and sub-entries
  ("d" hide-subtree)      ; Hide everything in this entry and sub-entries
  ;; Show
  ("a" show-all)          ; Show (expand) everything
  ("e" show-entry)        ; Show this heading's body
  ("i" show-children)     ; Show this heading's immediate child sub-headings
  ("k" show-branches)     ; Show all sub-headings under this heading
  ("s" show-subtree)      ; Show (expand) everything in this heading & below
  ;; Move
  ("u" outline-up-heading)                ; Up
  ("n" outline-next-visible-heading)      ; Next
  ("p" outline-previous-visible-heading)  ; Previous
  ("f" outline-forward-same-level)        ; Forward - same level
  ("b" outline-backward-same-level)       ; Backward - same level
  ("z" nil "leave")
  )

(defhydra hydra-ein (:hint nil)
  "
 Operations on Cells^^^^^^            On Worksheets^^^^              Other
 ----------------------------^^^^^^   ------------------------^^^^   ----------------------------------^^^^
 [_k_/_j_]^^     select prev/next     [_h_/_l_]   select prev/next   [_t_]^^         toggle output
 [_K_/_J_]^^     move up/down         [_H_/_L_]   move left/right    [_C-l_/_C-S-l_] clear/clear all output
 [_C-k_/_C-j_]^^ merge above/below    [_1_.._9_]  open [1st..last]   [_C-o_]^^       open console
 [_O_/_o_]^^     insert above/below   [_+_/_-_]   create/delete      [_C-s_/_C-r_]   save/rename notebook
 [_y_/_p_/_d_]   copy/paste           ^^^^                           [_x_]^^         close notebook
 [_u_]^^^^       change type          ^^^^                           [_q_]^^         quit transient-state
 [_RET_]^^^^     execute"

  ("q" nil :exit t)
  ;; ("?" spacemacs//ipython-notebook-ms-toggle-doc)
  ("h" ein:notebook-worksheet-open-prev-or-last)
  ("j" ein:worksheet-goto-next-input)
  ("k" ein:worksheet-goto-prev-input)
  ("l" ein:notebook-worksheet-open-next-or-first)
  ("H" ein:notebook-worksheet-move-prev)
  ("J" ein:worksheet-move-cell-down)
  ("K" ein:worksheet-move-cell-up)
  ("L" ein:notebook-worksheet-move-next)
  ("t" ein:worksheet-toggle-output)
  ("d" ein:worksheet-kill-cell)
  ("R" ein:worksheet-rename-sheet)
  ("y" ein:worksheet-copy-cell)
  ("p" ein:worksheet-yank-cell)
  ("o" ein:worksheet-insert-cell-below)
  ("O" ein:worksheet-insert-cell-above)
  ("u" ein:worksheet-change-cell-type)
  ("RET" ein:worksheet-execute-cell-and-goto-next)
  ;; Output
  ("C-l" ein:worksheet-clear-output)
  ("C-S-l" ein:worksheet-clear-all-output)
  ;;Console
  ("C-o" ein:console-open)
  ;; Merge and split cells
  ("C-k" ein:worksheet-merge-cell)
  ("C-j"
   (lambda ()
     (interactive)
     (ein:worksheet-merge-cell (ein:worksheet--get-ws-or-error) (ein:worksheet-get-current-cell) t t)))
  ("s" ein:worksheet-split-cell-at-point)
  ;; Notebook
  ("C-s" ein:notebook-save-notebook-command)
  ("C-r" ein:notebook-rename-command)
  ("1" ein:notebook-worksheet-open-1th)
  ("2" ein:notebook-worksheet-open-2th)
  ("3" ein:notebook-worksheet-open-3th)
  ("4" ein:notebook-worksheet-open-4th)
  ("5" ein:notebook-worksheet-open-5th)
  ("6" ein:notebook-worksheet-open-6th)
  ("7" ein:notebook-worksheet-open-7th)
  ("8" ein:notebook-worksheet-open-8th)
  ("9" ein:notebook-worksheet-open-last)
  ("+" ein:notebook-worksheet-insert-next)
  ("-" ein:notebook-worksheet-delete)
  ("x" ein:notebook-close))

;; keymap https://github.com/Timidger/dotfiles/blob/master/.emacs.d/layers/+emacs/org/packages.el
(defhydra hydra-agenda-view (:hint nil)
  "
Headline^^            Visit entry^^               Filter^^                    Date^^               Toggle mode^^        View^^             Clock^^        Other^^
--------^^---------   -----------^^------------   ------^^-----------------   ----^^-------------  -----------^^------  ----^^---------    -----^^------  -----^^-----------
[_ht_] set status     [_SPC_] in other window     [_ft_] by tag               [_ds_] schedule      [_tf_] follow        [_vd_] day         [_ci_] in      [_gr_] reload
[_hk_] kill           [_TAB_] & go to location    [_fr_] refine by tag        [_dd_] set deadline  [_tl_] log           [_vw_] week        [_co_] out     [_._]  go to today
[_hr_] refile         [_RET_] & del other windows [_fc_] by category          [_dt_] timestamp     [_ta_] archive       [_vt_] fortnight   [_ck_] cancel  [_gd_] go to date
[_hA_] archive        [_o_]   link                [_fh_] by top headline      [_+_]  do later      [_tr_] clock report  [_vm_] month       [_cj_] jump    ^^
[_hT_] set tags       ^^                          [_fx_] by regexp            [_-_]  do earlier    [_td_] diaries       [_vy_] year        ^^             ^^
[_hp_] set priority   ^^                          [_fd_] delete all filters   ^^                   ^^                   [_vn_] next span   ^^             ^^
^^                    ^^                          ^^                          ^^                   ^^                   [_vp_] prev span   ^^             ^^
^^                    ^^                          ^^                          ^^                   ^^                   [_vr_] reset       ^^             ^^
[_q_] quit
"
  ;; Entry
  ("ht" org-agenda-todo)
  ("hk" org-agenda-kill)
  ("hr" org-agenda-refile)
  ("hA" org-agenda-archive-default)
  ("hT" org-agenda-set-tags)
  ("hp" org-agenda-priority)

  ;; Visit entry
  ("SPC" org-agenda-show-and-scroll-up)
  ("<tab>" org-agenda-goto :exit t)
  ("TAB" org-agenda-goto :exit t)
  ("RET" org-agenda-switch-to :exit t)
  ("o"   link-hint-open-link :exit t)

  ;; Date
  ("ds" org-agenda-schedule)
  ("dd" org-agenda-deadline)
  ("dt" org-agenda-date-prompt)
  ("+" org-agenda-do-date-later)
  ("-" org-agenda-do-date-earlier)

  ;; View
  ("vd" org-agenda-day-view)
  ("vw" org-agenda-week-view)
  ("vt" org-agenda-fortnight-view)
  ("vm" org-agenda-month-view)
  ("vy" org-agenda-year-view)
  ("vn" org-agenda-later)
  ("vp" org-agenda-earlier)
  ("vr" org-agenda-reset-view)

  ;; Toggle mode
  ("tf" org-agenda-follow-mode)
  ("tl" org-agenda-log-mode)
  ("ta" org-agenda-archives-mode)
  ("tr" org-agenda-clockreport-mode)
  ("td" org-agenda-toggle-diary)

  ;; Filter
  ("ft" org-agenda-filter-by-tag)
  ("fr" org-agenda-filter-by-tag-refine)
  ("fc" org-agenda-filter-by-category)
  ("fh" org-agenda-filter-by-top-headline)
  ("fx" org-agenda-filter-by-regexp)
  ("fd" org-agenda-filter-remove-all)

  ;; Clock
  ("ci" org-agenda-clock-in :exit t)
  ("co" org-agenda-clock-out)
  ("ck" org-agenda-clock-cancel)
  ("cj" org-agenda-clock-goto :exit t)

  ;; Other
  ("q" nil :exit t)
  ("gr" org-agenda-redo)
  ("." org-agenda-goto-today)
  ("gd" org-agenda-goto-date))

(defhydra dumb-jump-hydra (:color blue :columns 3)
  "Dumb Jump"
  ("j" dumb-jump-go "Go")
  ("o" dumb-jump-go-other-window "Other window")
  ("e" dumb-jump-go-prefer-external "Go external")
  ("x" dumb-jump-go-prefer-external-other-window "Go external other window")
  ("i" dumb-jump-go-prompt "Prompt")
  ("l" dumb-jump-quick-look "Quick look")
  ("b" dumb-jump-back "Back"))

;; (defhydra hydra-clock (:color blue)
;;     "
;;     ^
;;     ^Clock^             ^Do^
;;     ^─────^─────────────^──^─────────
;;     _q_ quit            _c_ cancel
;;     ^^                  _d_ display
;;     ^^                  _e_ effort
;;     ^^                  _i_ in
;;     ^^                  _j_ jump
;;     ^^                  _o_ out
;;     ^^                  _r_ report
;;     ^^                  ^^
;;     "
;;     ("q" nil)
;;     ("c" org-clock-cancel :color pink)
;;     ("d" org-clock-display)
;;     ("e" org-clock-modify-effort-estimate)
;;     ("i" org-clock-in)
;;     ("j" org-clock-goto)
;;     ("o" org-clock-out)
;;     ("r" org-clock-report)
;;   )

;; (defhydra hydra-straight-helper (:hint nil)
;;   "
;; _c_heck all       |_f_etch all     |_m_erge all      |_n_ormalize all   |p_u_sh all
;; _C_heck package   |_F_etch package |_M_erge package  |_N_ormlize package|p_U_sh package
;; ----------------^^+--------------^^+---------------^^+----------------^^+------------||_q_uit||
;; _r_ebuild all     |_p_ull all      |_v_ersions freeze|_w_atcher start   |_g_et recipe
;; _R_ebuild package |_P_ull package  |_V_ersions thaw  |_W_atcher quit    |prun_e_ build"
;;   ("c" straight-check-all)
;;   ("C" straight-check-package)
;;   ("r" straight-rebuild-all)
;;   ("R" straight-rebuild-package)
;;   ("f" straight-fetch-all)
;;   ("F" straight-fetch-package)
;;   ("p" straight-pull-all)
;;   ("P" straight-pull-package)
;;   ("m" straight-merge-all)
;;   ("M" straight-merge-package)
;;   ("n" straight-normalize-all)
;;   ("N" straight-normalize-package)
;;   ("u" straight-push-all)
;;   ("U" straight-push-package)
;;   ("v" straight-freeze-versions)
;;   ("V" straight-thaw-versions)
;;   ("w" straight-watcher-start)
;;   ("W" straight-watcher-quit)
;;   ("g" straight-get-recipe)
;;   ("e" straight-prune-build)
;;   ("q" nil))


;; (defhydra sm/smerge-hydra
;;     (:color pink :hint nil :post (smerge-auto-leave))
;;   "
;; ^Move^       ^Keep^               ^Diff^                 ^Other^
;; ^^-----------^^-------------------^^---------------------^^-------
;; _n_ext       _b_ase               _<_: upper/base        _C_ombine
;; _p_rev       _u_pper              _=_: upper/lower       _r_esolve
;; ^^           _l_ower              _>_: base/lower        _k_ill current
;; ^^           _a_ll                _R_efine
;; ^^           _RET_: current       _E_diff
;; "
;;   ("n" smerge-next)
;;   ("p" smerge-prev)
;;   ("b" smerge-keep-base)
;;   ("u" smerge-keep-upper)
;;   ("l" smerge-keep-lower)
;;   ("a" smerge-keep-all)
;;   ("RET" smerge-keep-current)
;;   ("\C-m" smerge-keep-current)
;;   ("<" smerge-diff-base-upper)
;;   ("=" smerge-diff-upper-lower)
;;   (">" smerge-diff-base-lower)
;;   ("R" smerge-refine)
;;   ("E" smerge-ediff)
;;   ("C" smerge-combine-with-next)
;;   ("r" smerge-resolve)
;;   ("k" smerge-kill-current)
;;   ("ZZ" (lambda ()
;;           (interactive)
;;           (save-buffer)
;;           (bury-buffer))
;;  "Save and bury buffer" :color blue)
;;   ("q" nil "cancel" :color blue))


(defhydra hydra-smerge (:color pink
			       :hint nil
			       :pre (unless smerge-mode (smerge-mode +1))
			       :post (smerge-auto-leave))
  "
							 [smerge]
^Move^       ^Keep^               ^Diff^                 ^Other^
  ╭─────────────────────────────────────────────────────────╯
_n_ext       _b_ase               _<_: upper/base        _C_ombine
_p_rev       _m_ine              _=_: upper/lower       _r_esolve
_C-k_        _o_ther             _>_: base/lower        _R_move
_k_ ↑       _a_ll                _R_efine
_j_ ↓       _RET_: current       _E_diff
_C-j_
"
  ("n" smerge-next)
  ("p" smerge-prev)
  ("C-j" smerge-next)
  ("C-k" smerge-prev)
  ("j" next-line)
  ("k" previous-line)
  ("b" smerge-keep-base)
  ("m" smerge-keep-upper) ;; keep mine
  ("o" smerge-keep-lower) ;; keep other
  ;; ("u" smerge-keep-upper)
  ;; ("l" smerge-keep-lower)
  ("a" smerge-keep-all)
  ("RET" smerge-keep-current)
  ("\C-m" smerge-keep-current)
  ("<" smerge-diff-base-upper)
  ("=" smerge-diff-upper-lower)
  (">" smerge-diff-base-lower)
  ("H" smerge-refine)
  ("E" smerge-ediff)
  ("C" smerge-combine-with-next)
  ("r" smerge-resolve)
  ("R" smerge-kill-current)
  ("ZZ" (lambda ()
	  (interactive)
	  (save-buffer)
	  (bury-buffer))
   "Save and bury buffer" :color blue)
  ("q" nil "cancel" :color blue))

(defhydra hydra-tab (:color red :hint nil)
  "
						^tab^
-------^^-----------------------------^^--------------------------------^^-----------------------^^-------------------
    ^Switch^                        ^Move^                        ^Create & Kill^              ^Other^
_h_:       left tab              _<_: tab to left               _n_: new tab                  _rr_: rename
_l_:       right tab             _>_: tab to right              _N_: new tab with name        _rp_: rename default
[_1_.._9_]: switch [1st..last]     [_m1_..._9_]: move [1st..last]   _x_: kill                     _U_ : undo
											_R_ : redo
"

  ;; ("u" winner-undo)
  ;; ;; doesn't work
  ;; ;; ("C-r" winner-redo)

  ;; ;; tab-bar-mode (Emacs 27)
  ;; ;; `awesome-tab`: https://github.com/manateelazycat/awesome-tab
  ("h"  #'tab-bar-switch-to-prev-tab)
  ("l"  #'tab-bar-switch-to-next-tab)
  ("<"  #'toy/tab-move-left)
  (">"  #'toy/tab-move-right)

  ;; ;; FIXME:
  ;; ;; ("w" #'toy/hydra-window/body)
  ;; ("w" (lambda () (interactive) (hydra-disable)
  ;;           (toy/hydra-window/body)))

  ("rr" #'tab-bar-rename-tab)
  ;; rename to project name
  ("rp" #'toy/set-tab-name-default) ;; NOTE: defined in `ide.el`

  ("n" #'tab-bar-new-tab)
  ;; new tab and set name
  ("N" (lambda () (interactive)
   (tab-bar-new-tab)
   (call-interactively 'tab-bar-rename-tab)))
  ("x" #'tab-bar-close-tab)

  ;; select tab
  ("1" (lambda () (interactive) (tab-bar-select-tab 1)))
  ("2" (lambda () (interactive) (tab-bar-select-tab 2)))
  ("3" (lambda () (interactive) (tab-bar-select-tab 3)))
  ("4" (lambda () (interactive) (tab-bar-select-tab 4)))
  ("5" (lambda () (interactive) (tab-bar-select-tab 5)))
  ("6" (lambda () (interactive) (tab-bar-select-tab 6)))
  ("7" (lambda () (interactive) (tab-bar-select-tab 7)))
  ("8" (lambda () (interactive) (tab-bar-select-tab 8)))
  ("9" (lambda () (interactive) (tab-bar-select-tab 9)))

  ;; move tab
  ("m1" (lambda () (interactive) (tab-bar-move-tab-to 1)))
  ("m2" (lambda () (interactive) (tab-bar-move-tab-to 2)))
  ("m3" (lambda () (interactive) (tab-bar-move-tab-to 3)))
  ("m4" (lambda () (interactive) (tab-bar-move-tab-to 4)))
  ("m5" (lambda () (interactive) (tab-bar-move-tab-to 5)))
  ("m6" (lambda () (interactive) (tab-bar-move-tab-to 6)))
  ("m7" (lambda () (interactive) (tab-bar-move-tab-to 7)))
  ("m8" (lambda () (interactive) (tab-bar-move-tab-to 8)))
  ("m9" (lambda () (interactive) (tab-bar-move-tab-to 9)))

  ;; winner
  ("U" winner-undo)
  ("R" winner-redo)

  ("q" nil "cancel" :color blue)
  )

(defun toy/tab-move-right ()
  (interactive)
  (let* ((ix (tab-bar--current-tab-index))
	 (n-tabs (length (funcall tab-bar-tabs-function)))
	 (next-ix (mod (+ ix 1) n-tabs)))
    ;; use 1-based index
    (tab-bar-move-tab-to (+ 1 next-ix))))

(defun toy/tab-move-left ()
  (interactive)
  (let* ((ix (tab-bar--current-tab-index))
	 (n-tabs (length (funcall tab-bar-tabs-function)))
	 (next-ix (mod (+ ix n-tabs -1) n-tabs)))
    ;; use 1-based index
    (tab-bar-move-tab-to (+ 1 next-ix))))
#+end_src

* Git integration with magit & diff-hl & smerge

To manage the git repository, use builtin package ~vc~.

#+begin_src emacs-lisp
(use-package with-editor
    :straight t
    :ensure t)

(use-package emacsql
    :straight t
    :ensure t)

(use-package magit
    :straight t
    :commands (magit-file-delete magit-status magit-checkout)
    :hook (magit-pop-mode . hide-mode-line-mode)
    :custom
    ;; (magit-refresh-verbose t) ;; debug only
    ;; (magit-display-buffer-function #'magit-display-buffer-fullframe-status-v1)
    (magit-revert-buffers 'silent)
    (git-commit-summary-max-length 50)
    (magit-log-section-commit-count 5)
    (magit-diff-options (quote ("--minimal" "--patience")))
    (magit-tag-arguments (quote ("--annotate" "--sign")))
    (magit-merge-arguments (quote ("--no-ff")))
    (magit-rebase-arguments (quote ("--autostash")))
    ;; use colored graph lines. Could be a performance issue.
    (magit-log-arguments (quote ("-n64" "--graph" "--decorate" "--color" "--stat")))
    (magit-diff-use-overlays nil)
    (magit-use-overlays nil)
    (magit-auto-revert-mode nil)
    (git-rebase-auto-advance  nil)
    (magit-stage-all-confirm nil)
    (magit-commit-squash-commit 'marked-or-curren)
    (magit-push-always-verify ni) ;; cuz it says so
    (magit-diff-refine-hunk nil)
    (git-commit-finish-query-functions nil)
    (magit-log-section-commit-count 10)
    (magit-log-section-arguments '("--graph" "--decorate" "--color"))
    ;; (magit-log-margin '(t "%Y-%m-%d %H:%M:%S" magit-log-margin-width t 18))
    (magit-log-margin  '(t "%m/%d/%Y %H:%M " magit-log-margin-width t 18))
    ;; (magit-log-margin-show-committer-date t)
    ;; (magit-git-executable "/usr/local/bin/git")
    :init
    ;; Must be set early to prevent ~/.emacs.d/transient from being created
    (setq transient-levels-file  (concat poly-etc-dir "transient/levels")
	  transient-values-file  (concat poly-etc-dir "transient/values")
	  transient-history-file (concat poly-etc-dir "transient/history"))

    ;; Have magit-status go full screen and quit to previous
    ;; configuration.  Taken from
    ;; http://whattheemacsd.com/setup-magit.el-01.html#comment-748135498
    ;; and http://irreal.org/blog/?p=2253
    (defadvice magit-status (around magit-fullscreen activate)
      (window-configuration-to-register :magit-fullscreen)
      ad-do-it
      (delete-other-windows))
    (defadvice magit-quit-window (after magit-restore-screen activate)
      (jump-to-register :magit-fullscreen))
    ;; (setq
    ;; ;; Use flyspell in the commit buffer
    ;; (add-hook 'git-commit-setup-hook 'git-commit-turn-on-flyspell)
    :config
    (setq magit-status-sections-hook
	  '(
	    magit-insert-status-headers
	    magit-insert-merge-log
	    magit-insert-rebase-sequence
	    ;; magit-insert-am-sequence
	    ;; magit-insert-sequencer-sequence
	    ;; magit-insert-bisect-output
	    ;; magit-insert-bisect-rest
	    ;; magit-insert-bisect-log
	    magit-insert-untracked-files
	    magit-insert-unstaged-changes
	    magit-insert-staged-changes
	    magit-insert-unpushed-cherries
	    magit-insert-stashes
	    ;; magit-insert-recent-commits
	    magit-insert-unpulled-from-pushremote
	    magit-insert-unpushed-to-upstream
	    ;; magit-insert-unpushed-to-pushremote
	    ;; magit-insert-unpulled-from-upstream
	    ))

    (setq magit-status-headers-hook
	  '(
	    ;; magit-insert-repo-header
	    magit-insert-remote-header
	    ;; magit-insert-error-header
	    magit-insert-diff-filter-header
	    magit-insert-head-branch-header
	    magit-insert-upstream-branch-header
	    magit-insert-push-branch-header
	    magit-insert-tags-header
	    ))

    (setq magit-refresh-status-buffer nil)
    (setq auto-revert-buffer-list-filter
	  'magit-auto-revert-repository-buffer-p)
    (remove-hook 'magit-refs-sections-hook 'magit-insert-tags)
    (remove-hook 'server-switch-hook 'magit-commit-diff)

    ;; Opening repo externally
    (defun poly/parse-repo-url (url)
      "convert a git remote location as a HTTP URL"
      (if (string-match "^http" url)
	  url
	(replace-regexp-in-string "\\(.*\\)@\\(.*\\):\\(.*\\)\\(\\.git?\\)"
				  (concat (if (string-match "17usoft.com" url) "http" "https") "://\\2/\\3")
				  url)))
    (defun poly/magit-open-repo ()
      "open remote repo URL"
      (interactive)
      (let ((url (magit-get "remote" "origin" "url")))
	(progn
	  (browse-url (poly/parse-repo-url url))
	  (message "opening repo %s" url))))

    (defun m/magit-display-buffer-traditional (buffer)
      "Like magit-display-buffer-traditional, but re-uses window for status mode, too."
      (display-buffer
       buffer (if (not (memq (with-current-buffer buffer major-mode)
			     '(magit-process-mode
			       magit-revision-mode
			       magit-diff-mode
			       magit-stash-mode
			       magit-status-mode)))
		  '(display-buffer-same-window)
		nil)))

    (setq magit-display-buffer-function 'm/magit-display-buffer-traditional)

    (defun m/magit-reset-author (&optional args)
      "Resets the authorship information for the last commit"
      (interactive)
      (magit-run-git-async "commit" "--amend" "--no-edit" "--reset-author"))

    ;; (magit-define-popup-action 'magit-commit-popup
    ;;   ?R "Reset author" 'm/magit-reset-author)
    (transient-append-suffix 'magit-commit
	"S"
      '("R" "Reset author" m/magit-reset-author))
    :bind
    (:map transient-base-map
	  ("q" . transient-quit-one)
	  ("<escape>" . transient-quit-one))
    (:map transient-edit-map
	  ("q" . transient-quit-one)
	  ("<escape>" . transient-quit-one))
    (:map transient-sticky-map
	  ("q" . transient-quit-one)
	  ("<escape>" . transient-quit-one)))

(use-package magit-gitflow
    :straight t
    :after magit
    :commands magit-gitflow-popup
    :hook (magit-mode . turn-on-magit-gitflow)
    )

;; ;; Show TODOs in magit
;; (use-package magit-todos
;;     :straight t
;;     :diminish
;;     :after magit
;;     :config
;;     (magit-todos-mode))

;; git-gutter-plus - View, stage and revert Git changes from the buffer (inspired by package of same name from vim)
(use-package git-gutter+
    :straight t
    :diminish git-gutter+-mode
    :demand t
    :bind (("C-c g n" . git-gutter+-next-hunk)
	   ("C-c g p" . git-gutter+-previous-hunk))
    :config
    (defun git-gutter+-remote-default-directory (dir file)
      (let* ((vec (tramp-dissect-file-name file))
	     (method (tramp-file-name-method vec))
	     (user (tramp-file-name-user vec))
	     (domain (tramp-file-name-domain vec))
	     (host (tramp-file-name-host vec))
	     (port (tramp-file-name-port vec)))
	(tramp-make-tramp-file-name method user domain host port dir)))

    (defun git-gutter+-remote-file-path (dir file)
      (let ((file (tramp-file-name-localname (tramp-dissect-file-name file))))
	(replace-regexp-in-string (concat "\\`" dir) "" file)))
    (global-git-gutter+-mode)
    )

(use-package git-gutter-fringe+ :straight t)

;; git-messenger - Provides a function popup commit message at current line (port of package of same name from vim)
(use-package git-messenger
    :straight t
    :bind ("C-c g p" . git-messenger:popup-message)
    :init
    (custom-set-variables
     '(git-messenger:use-magit-popup t))
    (setq git-messenger:show-detail t)
    :config
    (progn
      (define-key git-messenger-map (kbd "RET") 'git-messenger:popup-close)))

;; git-timemachine - Step through historic versions of a git controlled file
(use-package git-timemachine
    :straight t
    :bind ("C-c g t" . git-timemachine-toggle))

;; gitignore-mode - Major mode for various Git configuration files
(use-package git-modes :straight t)

;; browse-at-remote - Browse target page on github/gitlab/bitbucket
(use-package browse-at-remote
    :straight t
    :bind ("C-c g b" . browse-at-remote/browse))

;; based on http://manuel-uberti.github.io/emacs/2018/02/17/magit-bury-buffer/
(defun magit-kill-buffers ()
  "Restore window configuration and kill all Magit buffers."
  (interactive)
  (let ((buffers (magit-mode-get-buffers)))
    (magit-restore-window-configuration)
    (mapc #'kill-buffer buffers)))

;; required by forge
(use-package yaml
    :straight t)

(use-package forge
    :straight t
    :after (magit yaml)
    :commands forge-create-pullreq forge-create-issue
    :custom
    (forge-database-file (expand-file-name "forge/forge-database.sqlite" poly-etc-dir))
    (custom-set-variables '(forge-post-mode-hook '(visual-line-mode)))
    (forge-bug-reference-hooks
     '(git-commit-setup-hook magit-mode-hook))
    :config
    (setq forge-alist
	  (append forge-alist
		  '(("git.17usoft.com" "git.17usoft.com/api/v4" "git.17usoft.com" forge-gitlab-repository)
		    ("github.com" "api.github.com" "github.com" forge-github-repository))))
    ;; ;; remove some hooks for magit performance-s
    ;; (remove-hook 'magit-status-sections-hook 'forge-insert-pullreqs)
    ;; (remove-hook 'magit-status-sections-hook 'forge-insert-issues)
    )

(use-package ghub
    :straight t
    :after (magit forge)
    ;; :custom
    ;; (ghub-insecure-hosts '("git.17usoft.com/api/v4"))
    )

(use-package smerge-mode
    :straight t
    :ensure t
    :diminish
    :commands (smerge-mode
	       smerge-auto-leave
	       smerge-next
	       smerge-prev
	       smerge-keep-base
	       smerge-keep-upper
	       smerge-keep-lower
	       smerge-keep-all
	       smerge-keep-current
	       smerge-keep-current
	       smerge-diff-base-upper
	       smerge-diff-upper-lower
	       smerge-diff-base-lower
	       smerge-refine
	       smerge-ediff
	       smerge-combine-with-next
	       smerge-resolve
	       smerge-kill-current)
    :after (hydra magit)
    :hook ((find-file . (lambda ()
			  (save-excursion
			    (goto-char (point-min))
			    (when (re-search-forward "^<<<<<<< " nil t)
			      (smerge-mode 1)))))

	   ( magit-diff-visit-file . (lambda ()
				       (when smerge-mode
					 (hydra-smerge/body))))))

(use-package vdiff
    :straight t)

;; (use-package magit-delta
;;   :straight t
;;   :delight
;;   :if (executable-find "delta")
;;   :hook ((magit-mode . magit-delta-mode))
;;   :custom
;;   ( magit-delta-delta-args
;;     '("--max-line-distance" "0.6" "--24-bit-color" "always" "--color-only" "--dark" ;; "--diff-so-fancy"
;;       ;; "--no-gitconfig"
;;       )))

(use-package code-review
    :straight t
    :bind (:map forge-topic-mode-map
		("C-c r" . code-review-forge-pr-at-point))
    :custom
    (code-review-db-database-file (expand-file-name "code-review-db.sqlite" poly-cache-dir))
    (code-review-log-file (expand-file-name "code-review-error.log" poly-cache-dir))
    :config
    (setq code-review-gitlab-host "git.17usoft.com/api")
    (setq code-review-gitlab-baseurl "git.17usoft.com")
    (setq code-review-gitlab-graphql-host "git.17usoft.com/api"))
#+end_src

Enable diff-hl in based on major modes.

#+begin_src emacs-lisp
  (straight-use-package 'diff-hl)
  (autoload 'diff-hl-mode "diff-hl" nil t)
  (autoload 'diff-hl-dired-mode "diff-hl-dired" nil t)

  (add-hook 'dired-mode-hook 'diff-hl-dired-mode)
  (add-hook 'prog-mode-hook 'diff-hl-mode)
  (add-hook 'conf-mode-hook 'diff-hl-mode)
#+end_src

* Input method with emacs-rime

~librime~ is required for this feature.

~emacs-rime~ is the frontend of rime built with emacs input method API.

#+begin_src emacs-lisp

  (defun +rime-predicate-is-back-quote-or-tilde ()
    (or (equal rime--current-input-key ?`)
	(equal rime--current-input-key ?~)))

  (use-package rime
    :straight (rime
	       :host github
	       :repo "DogLooksGood/emacs-rime"
	       :files (:defaults "lib.c" "Makefile"))
    :defer t
    :custom
    ;; Disable input method in non-insert state.
    (rime-disable-predicates '(rime-predicate-prog-in-code-p
			       rime-predicate-after-alphabet-char-p
			       meow-normal-mode-p
			       meow-motion-mode-p
			       meow-keypad-mode-p))
    ;; Auto switch to inline ascii state when after a space after a non-ascii character.
    (rime-inline-predicates '(rime-predicate-space-after-cc-p
			      +rime-predicate-is-back-quote-or-tilde
			      rime-predicate-current-uppercase-letter-p))
    (rime-translate-keybindings '("C-f" "C-b" "C-n" "C-p" "C-g"))
    (default-input-method "rime")
    ;; (rime-cursor "˰")
    ;; (rime-librime-root (concat user-emacs-directory "librime/dist"))
    (rime-librime-root "/opt/local")
    (rime-emacs-module-header-root "/opt/local/include/emacs-mac")
    ;; (rime-show-candidate 'minibuffer)
    (rime-show-preedit t)
    (rime-show-candidate 'posframe)
    ;; (rime-show-candidate 'minibuffer)
    ;; (rime-posframe-properties (list :background-color "#202325"
    ;;				  :foreground-color "#ddddde" ;; "#dedddd"
    ;;				  :internal-border-width 6))
    ;; (rime-code-face
    ;;  '((t (:inherit default :background "#ffffff" :foreground "#000000"))))
    ;; (rime-disable-predicates
    ;;  '(evil-normal-state-p
    ;;    rime--after-alphabet-char-p
    ;;    rime--prog-in-code-p
    ;;    ))
    ;; (rime-share-data-dir "")
    (rime-user-data-dir (expand-file-name "rime" poly-local-dir))
    :bind
    (:map rime-active-mode-map
	  ("<tab>" . rime-inline-ascii)
	  :map rime-mode-map
	  ("C-$" . rime-send-keybinding)
	  ("M-j" . rime-force-enable)))
#+end_src

* Telegram client with Telega

~telegram-libtd~ is required for this feature.

Use Telega as Telegram client.

#+begin_src emacs-lisp
(use-package telega
  :straight (telega
	     :host github
	     :repo "zevlg/telega.el"
	     :branch "master"
	     :files (:defaults "contrib" "etc" "server" "Makefile"))
  :commands (telega)
  :defer t
  :custom
  ;; (telega-symbol-reply "?")
  (telega-root-show-avatars nil)
  ;; (telega-user-show-avatars nil)
  ;; (telega-avatar-factors-alist '((1 . (0.8 . 0.1))
  ;;				 (2 . (0.8 . 0.1))))
  (telega-animation-play-inline nil)
  (telega-server-libs-prefix "/usr/local")
  (telega-use-images t)
  ;; (telega-proxies
  ;;  (list
  ;;   '(:server "127.0.0.1" :port 6153 :enable nil
  ;;	:type (:@type "proxyTypeSocks5"))))
  (telega-directory (expand-file-name "telega" poly-cache-dir))
  :config
  ;; show previews for photo/video webpages
  (advice-add #'telega-ins--webpage :before-while
	      (lambda (msg &rest args)
		(let ((ht (telega--tl-get msg :content :web_page :type)))
		  (-contains? '("video" "photo") ht))))

  ;; (add-hook 'telega-chat-mode-hook
  ;;	    (lambda ()
  ;;	      (set (make-local-variable 'company-backends)
  ;;		   (append '(telega-company-emoji
  ;;			     telega-company-username
  ;;			     telega-company-hashtag)
  ;;			   (when (telega-chat-bot-p telega-chatbuf--chat)
  ;;			     '(telega-company-botcmd))))
  ;;	      ;; (company-mode 1)
  ;;	      ))
  (unbind-key (kbd "k") telega-msg-button-map)  ;; delete marked or at point (doubled with d)
  (unbind-key (kbd "e") telega-msg-button-map)  ;; msg-edit
  (define-key telega-msg-button-map (kbd "E") 'telega-msg-edit)
  (unbind-key (kbd "n") telega-msg-button-map)  ;; button-forward (seems to not differ from next link)
  (unbind-key (kbd "l") telega-msg-button-map)  ;; redisplay
  (unbind-key (kbd "h") telega-chat-button-map) ;; info (doubled with i)

  (defun +telega-open-file (file)
    (cond
     ;; ((member (downcase (file-name-extension file)) '("png" "jpg" "gif" "jpeg"))
     ;;  (start-process "telega-open-photo" nil "/sbin/imv" file))
     ((member (downcase (file-name-extension file)) '("mp4"))
      (start-process "telega-open-video" nil "/opt/local/bin/mpv" file))
     (t
      (find-file file))))
  (setq telega-open-message-as-file '(photo video)
	telega-open-file-function '+telega-open-file)
  )
#+end_src

* Directory environment support with direnv

#+begin_src emacs-lisp
  (straight-use-package 'direnv)

  (setq direnv-always-show-summary nil)

;;  (define-key toggle-map "e" 'direnv-mode)

  (autoload 'direnv-mode "direnv" nil t)
#+end_src

* embark

#+begin_src emacs-lisp
(use-package embark
  :straight t
  :init
  (setq prefix-help-command #'embark-prefix-help-command)
  :bind (("C-c o" . embark-act)
	 :map minibuffer-local-map
	 ("M-o"   . embark-act))
  :config
  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
	       '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
		 nil
		 (window-parameters (mode-line-format . none)))))

(use-package embark-consult
  :straight t
  :after (embark consult)
  :demand t ; only necessary if you have the hook below
  ;; if you want to have consult previews as you move around an
  ;; auto-updating embark collect buffer
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))

(use-package savehist
  :straight t
  :custom
  (savehist-file (expand-file-name "history" poly-cache-dir))
  :config
  (savehist-mode 1))

(use-package docker-compose-mode
  :straight t)
#+end_src

* activity-watch
#+begin_src emacs-lisp
(use-package activity-watch-mode
    :straight t
    :demand
    :config
    (global-activity-watch-mode))
#+end_src
* wakatime
#+begin_src emacs-lisp
(use-package wakatime-mode
    :straight t
    :init
    (setq +wakatime-hide-filenames t)
    (when IS-MAC
      (setq wakatime-cli-path "/usr/local/bin/wakatime"))
    :hook ((org-mode . wakatime-mode)
           (prog-mode . wakatime-mode))
    :config
    (global-wakatime-mode +1))
#+end_src

* vterm

#+begin_src emacs-lisp

(use-package vterm
  :straight (vterm :type git :flavor melpa
                   :files ("*" (:exclude ".dir-locals.el" ".gitignore" ".clang-format" ".travis.yml") "vterm-pkg.el")
                   :host github :repo "akermu/emacs-libvterm"
 		   :no-native-compile t
                   )
  :demand
  :commands (vterm ds/vterm)
  :custom
  (vterm-max-scrollback 10000)
  (vterm-ignore-blink-cursor nil)
  :init
  (setq vterm-shell "zsh")
  (defun ds/vterm-send-C-x ()
    (interactive)
    (vterm-send "C-x"))
  (defun ds/vterm-send-C-z ()
    (interactive)
    (vterm-send "C-z"))
  :bind (:map vterm-mode-map
              ("C-c t" . 'vterm-copy-mode)
              ("C-x C-x" . 'ds/vterm-send-C-x)
	      ("C-z" . vterm-send-C-z)
	      :map vterm-copy-mode-map
              ("C-c t" . 'vterm-copy-mode))
  ;; :after ds-theme
  ;; :config
  ;; :general
  ;; (:keymaps 'vterm-mode-map
  ;;           [escape] #'vterm--self-insert
  ;;           [return] #'vterm--self-insert
  ;;           "p" #'vterm-yank
  ;;           "u" #'vterm-undo
  ;;           "C-y" #'vterm-yank
  ;;           "M-n" #'vterm-send-down
  ;;           "M-p" #'vterm-send-up
  ;;           "M-y" #'vterm-yank-pop
  ;;           "M-/" #'vterm-send-tab
  ;;           )
  :config
  (setq vterm-always-compile-module t)
  (define-key vterm-mode-map (kbd "C-h") 'vterm-send-C-h)
  (define-key vterm-mode-map (kbd "C-z") 'vterm-send-C-z)
  (defun vterm-send-meta-left ()
    "Send `M-<left>' to the libvterm."
    (interactive)
    (vterm-send-key "<left>" nil t))

  (defun vterm-send-meta-right ()
    "Send `M-<right>' to the libvterm."
    (interactive)
    (vterm-send-key "<right>" nil t))
  (define-key vterm-mode-map (kbd "M-<left>") 'vterm-send-meta-left)
  (define-key vterm-mode-map (kbd "M-<right>") 'vterm-send-meta-right)
  (setq vterm-keymap-exceptions (remove "C-h" vterm-keymap-exceptions))
  ;; (defun vterm-send-C-k-and-kill ()
  ;;   "Send `C-k' to libvterm, and put content in kill-ring."
  ;;   (interactive)
  ;;   (kill-ring-save (point) (vterm-end-of-line))
  ;;   (vterm-send-key "k" nil nil t))
  (add-hook 'vterm-mode-hook
            (lambda ()
              (set (make-local-variable 'buffer-face-mode-face) 'fixed-pitch)
              (buffer-face-mode t)))
  (defun ds/vterm (&optional name)
    (interactive "MName: ")
    (if (< 0 (length name))
        (if (get-buffer name)
            (switch-to-buffer name)
          (vterm name))
      (vterm)))
  )

(use-package vterm-toggle
  :straight t
  :when (memq window-system '(mac ns x))
  :bind (([f8] . vterm-toggle)
         ([f9] . vterm-compile)
         :map vterm-mode-map
         ([f8] . vterm-toggle)
         ([(control return)] . vterm-toggle-insert-cd))
  :config
  (setq vterm-toggle-cd-auto-create-buffer nil)
  (defvar vterm-compile-buffer nil)
  (defun vterm-compile ()
    "Compile the program including the current buffer in `vterm'."
    (interactive)
    (let* ((command (eval compile-command))
           (w (vterm-toggle--get-window)))
      (setq compile-command (compilation-read-command command))
      (let ((vterm-toggle-use-dedicated-buffer t)
            (vterm-toggle--vterm-dedicated-buffer (if w (vterm-toggle-hide)
                                                    vterm-compile-buffer)))
        (with-current-buffer (vterm-toggle-cd)
          (setq vterm-compile-buffer (current-buffer))
          (rename-buffer "*vterm compilation*")
          (compilation-shell-minor-mode 1)
          (vterm-send-M-w)
          (vterm-send-string compile-command t)
          (vterm-send-return))))))
#+end_src
