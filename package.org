#+title: Package

#+begin_src emacs-lisp
  ;;; -*- lexical-binding: t -*-
#+end_src

* Package Configuration with straight

** setting default directory
#+begin_src emacs-lisp
;; Emacs wants to load `package.el' before the init file,
;; so we do the same with `straight.el'
(setq straight-base-dir poly-local-dir
      straight-repository-branch "master"
      straight-use-package-by-default t
      straight-cache-autoloads t ;; we already do this, and better.
      ;; Doom doesn't encourage you to modify packages in place. Disabling this
      ;; makes 'doom refresh' instant (once everything set up), which is much
      ;; nicer UX than the several seconds modification checks.
      straight-check-for-modifications nil
      ;; We handle package.el ourselves (and a little more comprehensively)
      straight-enable-package-integration t
      ;; Before switching to straight, `doom-local-dir' would average out at
      ;; around 100mb with half Doom's modules at ~230 packages. Afterwards, at
      ;; around 1gb. With shallow cloning, that is reduced to ~400mb. This
      ;; imposes an issue with packages that require their git history for
      ;; certain things to work (like magit and org), but we can deal with that
      ;; when we cross that bridge.
      straight-vc-git-default-clone-depth 1
      ;; Prefix declarations are unneeded bulk added to our autoloads file. Best
      ;; we just don't have to deal with them at all.
      autoload-compute-prefixes nil
      straight-fix-flycheck t
      straight-enable-use-package-integration t
      straight-disable-native-compile t

      ;; ;; Tell straight.el about the profiles we are going to be using.
      ;; straight-profiles
      ;; '((nil . "default.el")
      ;; 	;; Packages which are pinned to a specific commit.
      ;; 	(pinned . "pinned.el"))

      ;; ;; Set package.el variables just in case to avoid polluting
      ;; ;; the root directory.
      ;; package-enable-at-startup nil
      ;; straight-check-for-modifications '(find-when-checking check-on-save)
      use-package-always-demand t)

(when IS-LINUX
  (setq straight-build-dir "build-linux"))

(eval-when-compile
  (defvar bootstrap-version)
  (let ((bootstrap-file
	 (expand-file-name "straight/repos/straight.el/bootstrap.el" poly-local-dir))
	(bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
	  (url-retrieve-synchronously
	   "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	   'silent 'inhibit-cookies)
	(goto-char (point-max))
	(eval-print-last-sexp)))
    ;; catch emacs updates that have native compiled leftovers
    ;; Credits: https://github.com/raxod502/straight.el/643/issues
    (unless (catch 'emacs-version-changed
	      (load bootstrap-file nil 'nomessage))
      ;; remove historian-save-file
      ;; try fix (void-variable _args)
      (when (boundp 'historian-save-file)
	(delete-directory (file-truename (expand-file-name (car historian-save-file))) t)
	)
      (when (boundp 'comp-eln-load-path)
	;; remove leftoversear
	(when (y-or-n-p (format "Delete '%s'? " (car comp-eln-load-path)))
	  (delete-directory (file-truename (expand-file-name (car comp-eln-load-path))) t))
	;; try loading again
	(load bootstrap-file nil 'nomessage))))
  (straight-use-package 'use-package))

;; Straight configs
(setq straight-check-for-modifications '(check-on-save find-when-checking))
(setq straight-vc-git-default-clone-depth 1)
(setq use-package-expand-minimally t)

(add-to-list 'straight-built-in-pseudo-packages 'dired)
(add-to-list 'straight-built-in-pseudo-packages 'dired-async)
(add-to-list 'straight-built-in-pseudo-packages 'replace)
(add-to-list 'straight-built-in-pseudo-packages 'isearch)
(add-to-list 'straight-built-in-pseudo-packages 'abbrev)
(add-to-list 'straight-built-in-pseudo-packages 'ediff)
(add-to-list 'straight-built-in-pseudo-packages 'org)
#+end_src


** add :pdump tag

#+begin_src emacs-lisp
(with-eval-after-load 'use-package-core
  (when (and (boundp 'use-package-keywords)
	     (listp use-package-keywords))
    (setq use-package-keywords (remq :pdump use-package-keywords))
    (add-to-list 'use-package-keywords :pdump t))
  ;; default :pdump to t when poly-use-package-always-pdump is t and no :pdump attribute
  (add-to-list 'use-package-defaults
	       '(:pdump poly-use-package-always-pdump
			(lambda (name args)
			  (and poly-use-package-always-pdump
			       (not (plist-member args :pdump)))))))

(defun use-package-normalize/:pdump (name-symbol keyword args)
  (use-package-only-one (symbol-name keyword) args
    (lambda (label arg)
      ;; (princ (type-of arg))
      ;; (princ arg)
      (cond
       ((and (listp arg) (keywordp (car arg))) arg)
       ((consp arg) arg)
       ((symbolp arg) (symbol-name arg))
       ((stringp arg) (unless (string= "nil" arg) arg))
       (t
	(use-package-error
	 ":pdump wants a bool value"))))))

(defun use-package-handler/:pdump (name _keyword arg rest state)
  (let* ((enable-pdump (if (and (stringp arg) (string= "nil" arg)) nil t)))
    (when enable-pdump
      (poly-pdump-packages `,name))
    ;; arg may contain extra packages
    (when (consp arg)
      (cl-loop for cell in arg
	       do
	       (when  (symbolp cell)
		 (poly-pdump-packages cell))))))
#+end_src


** add :pin tag

#+begin_src emacs-lisp
(with-eval-after-load 'straight
  ;; Add a profile (and lockfile) for stable package revisions.
  (add-to-list 'straight-profiles '(pinned . "pinned.el"))
  (require 'straight-x)

  (autoload #'straight-x-pull-all "straight-x")
  (autoload #'straight-x-freeze-versions "straight-x")
  (defalias 'straight-pull-all #'straight-x-pull-all)
  (defalias 'straight-freeze-versions #'straight-x-freeze-versions))

;; Allow pinning versions from `use-package' using the `:pin-ref' keyword
(with-eval-after-load 'use-package-core
  (when (and (boundp 'use-package-keywords)
	     (listp use-package-keywords))
    (setq use-package-keywords (remq :pin-ref use-package-keywords))
    (add-to-list 'use-package-keywords :pin-ref))

  (defun use-package-normalize/:pin-ref (_name-symbol keyword args)
    (use-package-only-one (symbol-name keyword) args
      (lambda (_label arg)
	(cond
	 ((stringp arg) arg)
	 ((symbolp arg) (symbol-name arg))
	 (t (use-package-error ":pin-ref wants a commit hash or a ref."))))))

  (defun use-package-handler/:pin-ref (name-symbol _keyword ref rest state)
    (let ((body (use-package-process-keywords name-symbol rest state)))
      (if (null ref)
          body
	`((let ((straight-current-profile 'pinned))
            (push '(,(symbol-name name-symbol) . ,ref) straight-x-pinned-packages)
            ,(macroexp-progn body)))))))
#+end_src

** deal with org issue

#+begin_src emacs-lisp
(straight-use-package 'org)
(straight-use-package 'org-contrib)
#+end_src

** env

#+begin_src emacs-lisp

(use-package exec-path-from-shell
  :straight t
  :ensure t
  :if IS-MAC
  :config
  ;; (setq shell-default-term-shell "/bin/zsh")
  ;; (setq exec-path-from-shell-shell-name "/bin/zsh")
  ;; ;; (setq exec-path-from-shell-shell-name "/run/current-system/sw/bin/zsh")
  ;; (setq exec-path-from-shell-arguments '("-l"))
  ;; (when (file-executable-p "/usr/local/bin/fish")
  ;;   (setq exec-path-from-shell-shell-name "/usr/local/bin/fish"
  ;;         exec-path-from-shell-debug nil))

  ;; (setq exec-path-from-shell-arguments '("-l"))
  (setq exec-path-from-shell-variables
	'("PATH"
	  "PWD"
	  "PYENV_ROOT"
	  "JAVA_HOME"
	  "GOPATH"
	  "GOINSECURE"
	  "GOINSECURE"
	  "SDKMAN_DIR"
	  "EMACS_MODULE_HEADER_ROOT"
	  "LIBRIME_ROOT"))

  (setenv "GOPROXY" "")
  (setenv "COLORTERM" "truecolor")

  ;; Load path from zsh login shell
  (when (or IS-LINUX IS-MAC)
    (defvar zsh-executable  "/opt/local/bin/zsh")
    ;; (defvar zsh-executable  "/usr/bin/env zsh")
    (let* ((zshpath (shell-command-to-string
		     (concat zsh-executable " -lc 'printenv PATH'")))
	   (pathlst (split-string zshpath ":")))
      (setq exec-path pathlst)
      (setq eshell-path-env zshpath)
      ;; (princ zshpath)
      (setenv "PATH" zshpath))

    ;; use zsh as default shell
    (setenv "SHELL" "zsh"))

  (exec-path-from-shell-initialize)

  ;; (setenv "LIBRARY_PATH" "/opt/local/lib/gcc11/")
  (if (and poly-enable-native-comp
	   (fboundp 'native-comp-available-p)
	   (native-comp-available-p))
      (progn
	(message "Native comp is available")
	;; Using Emacs.app/Contents/MacOS/bin since it was compiled with
	;; ./configure --prefix="$PWD/nextstep/Emacs.app/Contents/MacOS"
	(add-to-list 'exec-path (concat invocation-directory "bin") t)
	(setenv "LIBRARY_PATH" (concat (getenv "LIBRARY_PATH")
				       (when (getenv "LIBRARY_PATH")
					 ":")
				       ;; This is where Homebrew puts gcc libraries.
				       (car (file-expand-wildcards
					     (expand-file-name "/opt/local/lib/gcc11/")))))

	(setenv "DYLD_LIBRARY_PATH" (concat (getenv "DYLD_LIBRARY_PATH")
					    (when (getenv "DYLD_LIBRARY_PATH") ":")
					    ;; This is where Homebrew puts gcc libraries.
					    (car (file-expand-wildcards
						  (expand-file-name "/opt/local/lib/gcc11/")))))
	;; Only set after LIBRARY_PATH can find gcc libraries.
	(setq comp-deferred-compilation t))
    (message "Native comp is *not* available"))
  )
#+end_src

** core packages

#+begin_src emacs-lisp

(unless (display-graphic-p)
  (advice-add #'tty-run-terminal-initialization :override #'ignore)
  (add-hook 'window-setup-hook
	    (lambda ()
	      (advice-remove #'tty-run-terminal-initialization #'ignore)
	      (tty-run-terminal-initialization (selected-frame) nil t))))


(use-package recentf
  :straight nil
  :commands (recentf-mode
	     recentf-add-file
	     recentf-apply-filename-handlers
	     recentf-open-files)
  ;; :defines no-littering-etc-directory no-littering-var-directory quelpa-packages-dir
  ;; :after no-littering
  :hook (after-init . recentf-mode)
  :custom
  (recentf-save-file (expand-file-name "recentf" poly-cache-dir))
  (recentf-max-saved-items 5000)
  ;; disable recentf-cleanup on Emacs start, because it can cause
  (recentf-auto-cleanup 'never)
  ;; `recentf-add-file' will apply handlers first, then call `string-prefix-p'
  ;; to check if it can be pushed to recentf list.
  (recentf-filename-handlers '(abbreviate-file-name))
  ;; ;; recentf-auto-cleanup 600
  ;; recentf-filename-handlers '(file-truename abbreviate-file-name)
  (recentf-max-menu-items 100)
  (recentf-auto-save-timer (run-with-idle-timer 600 t 'recentf-save-list))
  ;; exclude ** from recentfiles buffer
  (recentf-exclude `(;; ,@(cl-loop  for f in `(
		     ;; ,package-user-dir
		     ;; ,quelpa-packages-dir
		     ;; ,no-littering-var-directory
		     ;; ,no-littering-etc-directory)
		     ;;        collect (abbreviate-file-name f))
		     "\\.\\(?:gz\\|gif\\|svg\\|png\\|jpe?g\\)$"
		     "^/tmp/" "^/ssh:" "\\.?ido\\.last$" "\\.revive$" "/TAGS$"
		     "^/var/folders\\.*" "\\.git/config" "\\.git/COMMIT_EDITMSG"
		     "COMMIT_MSG"
		     "[0-9a-f]\\{32\\}-[0-9a-f]\\{32\\}\\.org"
		     "github.*txt$"
		     "COMMIT_EDITMSG\\'"
		     ".*-autoloads\\.el\\'"
		     "recentf"
		     ".*pang$" ".*cache$"
		     "[/\\]\\.elpa/"
		     ;; Folders on MacOS start
		     "^/private/tmp/"
		     "^/var/folders/"
		     ;; Folders on MacOS end
		     "^/tmp/"
		     "/ssh\\(x\\)?:"
		     "/su\\(do\\)?:"
		     "^/usr/include/"
		     "/TAGS\\'"
		     ;; "COMMIT_EDITMSG\\'"
		     ))
  ;; :config
  ;; (setq recentf-max-saved-items nil
  ;;  recentf-max-menu-items 60
  ;;  recentf-auto-cleanup 'never ;; problems with remote files
  ;;  ;; recentf-auto-cleanup 600
  ;;  recentf-filename-handlers '(file-truename abbreviate-file-name)
  ;;  recentf-save-file (expand-file-name "recentf" poly-cache-dir)
  ;;  )

  ;; (recentf-mode +1)
  ;; (unless noninteractive
  ;;   (add-hook 'kill-emacs-hook #'recentf-cleanup))
  )

(use-package server ; built-in
  :straight nil
  :defer 1
  :init
  (if IS-WINDOWS
      (progn
	(setq server-use-tcp t)
	(setq server-use-socket nil))
    (setq server-use-tcp nil)
    (setq server-use-socket t))

  (defadvice server-ensure-safe-dir
      (around my-around-server-ensure-safe-dir activate)
    "Ignores any errors raised from server-ensure-safe-dir"
    (ignore-errors ad-do-it))
  :config
  (unless (server-running-p)
    (server-start)))

;; (use-package files
;;   :straight nil
;;   :ensure t
;;   :init
;;   (setq make-backup-files nil
;;         enable-local-variables :all
;;         create-lockfiles nil
;;         auto-save-default nil
;;         auto-save-list-file-prefix nil
;;         save-silently t
;;         confirm-kill-processes nil
;;         find-file-suppress-same-file-warnings t))


(use-package autorevert
  :straight nil
  :diminish auto-revert-mode
  :custom
  (auto-revert-verbose nil)
  :config
  (global-auto-revert-mode +1))

;;; Undo-Fu
;; trying another undo package
;; https://gitlab.com/ideasman42/emacs-undo-fu
(use-package undo-fu
  :straight (undo-fu
	     :host gitlab
	     :repo "ideasman42/emacs-undo-fu"
	     :files ("undo-fu.el"))
  :ensure t
  :demand t
  :custom
  ;; Store more undo history to prevent loss of data
  (undo-limit 400000)
  (undo-strong-limit 3000000)
  (undo-outer-limit 3000000))

;; persistent undo across sessions
(use-package undo-fu-session
  :straight t
  :after undo-fu
  :demand t
  :custom
  (undo-fu-session-file-limit nil)
  (undo-fu-session-directory (expand-file-name "undo-fu-session" poly-cache-dir))
  (undo-fu-session-incompatible-files '("/COMMIT_EDITMSG\\'" "/git-rebase-todo\\'")))
:config
(with-eval-after-load 'undo
  (global-undo-fu-session-mode))

(use-package undo-tree
  :disabled
  :straight (:type git :host nil :repo "http://www.dr-qubit.org/git/undo-tree.git")
  ;; :disabled
  ;; :if IS-MAC
  :commands global-undo-tree-mode
  ;; Pull package directly from maintainer, the elpa package is behind.
  ;; :straight (:local-repo  "~/.emacs.d/site-lisp/undo-tree")
  :demand
  :delight
  :ensure t
  :custom
  ;; supposedly causes errors in undo read
  ;; see https://emacs.stackexchange.com/a/34214/11934
  (undo-tree-enable-undo-in-region nil)
  (undo-tree-visualizer-timestamps t)
  (undo-tree-visualizer-diff t)
  ;; (undo-tree-history-directory-alist (list (cons ".*" (expand-file-name "undo-tree-history" poly-cache-dir))))
  ;; ;; stop littering - set undo directory
  (undo-tree-history-directory-alist `(("." . ,(expand-file-name "undo-tree-history" poly-cache-dir))))
  (undo-tree-auto-save-history t)
  (undo-tree-visualizer-lazy-drawing 1000)
  :config
  (global-undo-tree-mode))

(use-package hide-mode-line
  :straight t
  :commands (hide-mode-line-mode))

;; (use-package xclip
;;   :straight t
;;   ;; :if IS-LINUX
;;   :ensure t
;;   :custom
;;   (xclip-method 'xclip)
;;   :config
;;   (xclip-mode +1)
;;   (xterm-mouse-mode +1)
;;   )

(use-package clipetty
  :straight t
  :ensure t
  :hook (after-init . global-clipetty-mode)
  )

(use-package pbcopy
  :straight t
  :if IS-MAC
  :init (turn-on-pbcopy))

(use-package reveal-in-osx-finder
  :straight t
  :if IS-MAC
  :commands reveal-in-osx-finder
  :bind ("C-c z" . reveal-in-osx-finder))

;; (use-package posframe
;;   :straight (posframe
;;       :host github
;;       :repo "tumashu/posframe"
;;       :files ("posframe.el"))
;;   :ensure t)

(use-package restart-emacs
  :straight t
  :ensure t)

;; Sorting and filtering
(use-package prescient
  :straight t)

;; Adopt a sneaky garbage collection strategy of waiting until idle time to
;; collect; staving off the collector while the user is working.
(use-package gcmh
  :straight t
  :custom
  (gcmh-verbose             nil)
  ;; (gcmh-lows
  ;; -cons-threshold #x800000)
  (gcmh-high-cons-threshold most-positive-fixnum)
  ;; (gc-cons-percentage 0.1)
  (gcmh-idle-delay 10)
  :config
  (setq gc-cons-percentage 0.6)
  (when (not noninteractive)
    (gcmh-mode +1)
    (add-function :after after-focus-change-function #'gcmh-idle-garbage-collect)
    ))

;; (use-package command-log-mode
;;   :straight t
;;   :ensure t
;;   :config
;;   (global-command-log-mode))

(use-package transient
  :straight t
  :bind
  (:map transient-map
	([escape] . transient-quit-one)
	("q" . transient-quit-one)))

(use-package multiple-cursors
  :straight t
  :bind (("C-S-c C-S-c" . mc/edit-lines)
	 ("C-<" . mc/mark-next-like-this)
	 ("C->" . mc/mark-previous-like-this)
	 ("C-c C-<" . mc/mark-all-like-this)))

;; required by core-hammerspoon
(use-package dash
  :straight t)

;;;; disable annoying notifications
(defcustom message-filter-regexp-list '("^Starting new Ispell process \\[.+\\] \\.\\.\\.$"
					"^Ispell process killed$"
					".+expected selector or type assertion, found.+"
					".+expected identifier on left side.+"
					"^LSP ::.+"
					".+and \d{1,10} more errors.+"
					"Wrote "
					"Liberime: start with shared dir" ;;; liberime
					".+Starting new Ispell process.+" ;;; ispell
					"Package cl is deprecated"
					"Loading[\s\w\/\.-]+\(module\).+"
					".+search-failed.+"
					;; "Loading[\w\/\d\W]+\(module\).+" ;;; module load
					"For information about GNU Emacs and the GNU system.+"
					)
  "filter formatted message string to remove noisy messages"
  :type '(list string)
  :group 'general)

(defadvice message (around message-filter-by-regexp activate)
  (if (not (ad-get-arg 0))
      ad-do-it
    (let ((formatted-string (apply 'format (ad-get-args 0))))
      (if (and (stringp formatted-string)
	       (cl-some (lambda (re) (string-match re formatted-string)) message-filter-regexp-list))
	  (let ((inhibit-read-only t))
	    (with-current-buffer "*Messages*"
	      (goto-char (point-max))
	      (insert formatted-string "\n")))
	(progn
	  (ad-set-args 0 `("%s" ,formatted-string))
	  ad-do-it)))))

;; Michael Hoffman at the comment of
;; http://endlessparentheses.com/understanding-letf-and-how-it-replaces-flet.html

(defalias 'tl/message-orig (symbol-function 'message))

;; Unfortunately this isn't re-entrant, so if you stack uses of
;; with-suppress-message I think only the innermost regexes will still be
;; suppressed. The this-fn of noflet would be nice but I use this very early in
;; my emacs startup so I wouldn't necessarily have access to it.
(defmacro tl/with-suppress-message (regex &rest body)
  "Suppress any `message' starting with REGEX when executing BODY."
  (declare (indent 1))
  `(cl-letf (((symbol-function 'message)
	      (lambda (format-string &rest args)
		(unless (string-match-p ,regex format-string)
		  (apply 'tl/message-orig format-string args)))))
     ,@body))
#+end_src
