#+title: Editor Basics

Configuration for editor basics.

#+begin_src emacs-lisp
  ;;; -*- lexical-binding: t -*-
#+end_src

* Package management

** Straight

Straight.el is used for package management.
Bind some keys for quick operations.

* Better defaults

This is consulted on every `require', `load' and various path/io functions.  You get a minor speed up by nooping this.

#+begin_src emacs-lisp
(setq auth-sources '("~/.authinfo.gpg")
      ;; auth-sources '("~/.authinfo")
      make-backup-files nil
      enable-local-eval t
      enable-local-variables :all
      bookmark-default-file (expand-file-name "bookmarks" poly-cache-dir)
      prescient-save-file (expand-file-name "prescient-save.el" poly-cache-dir)
      ;; auto-save-default nil
      ;; auto-save-list-file-prefix nil
      auto-save-list-file-prefix (expand-file-name "auto-save-list/save-" poly-cache-dir)
      save-silently t
      find-file-suppress-same-file-warnings t
      vc-follow-symlinks t
      inhibit-startup-screen t
      whitespace-line-column 100
      default-directory (expand-file-name "workspace/" "~")
      vagrant-vagrantfile (expand-file-name "vagrant/Vagrantfile" default-directory)
      max-lisp-eval-depth 10000
      ;; Wrapping
      truncate-lines t
      truncate-partial-width-windows 50
      whitespace-style '(face trailing lines-tail)
      xref-prompt-for-identifier nil)

;; @see https://github.com/emacs-lsp/lsp-mode#performance
(setq read-process-output-max (* 3 1024 1024))

;; Suppress warning when opening large files
(setq large-file-warning-threshold nil)

 (setq ring-bell-function 'ignore)

; From Mastering Emacs
;; https://masteringemacs.org/article/working-coding-systems-unicode-emacs
;; Treat clipboard input as UTF-8 string first; compound text next, etc.
(setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))

;; Gets rid of disabled commands prompting.
(setq disabled-command-function nil)

;; Allow seamless editing of files in a tar/jar/zip file.
(auto-compression-mode 1)


;; Completion ignores case.
(setq read-buffer-completion-ignore-case t)
(setq read-file-name-completion-ignore-case t)


;; Completion ignores filenames ending in any string in this list.
(setq completion-ignored-extensions
      '(".o" ".elc" ".class" "java~" ".ps" ".abs" ".mx" ".~jv" ".bak" ))

;; ;;; lisp
;; (setq ;; lisp-body-indent   2
;;  lisp-indent-function  'lisp-indent-function)

;; enable C-x C-u to upcase-region
(put 'upcase-region 'disabled nil)
(put 'downcase-region 'disabled nil)
(put 'set-goal-column 'disabled nil)
#+end_src

** Encoding
#+begin_src emacs-lisp
;; handle emacs utf-8 input
(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-language-environment "UTF-8")
(set-default-coding-systems 'utf-8)
(prefer-coding-system 'utf-8)
(setenv "LANG" "en_US.UTF-8")
#+end_src

#+begin_src emacs-lisp
(unless noninteractive
  (setq file-name-handler-alist nil))
#+end_src

Disable startup-screen and message
#+begin_src emacs-lisp
(setq inhibit-startup-screen t)
#+end_src

Makes *scratch* empty.
#+begin_src emacs-lisp
(setq initial-scratch-message nil)
#+end_src

Don't show *Buffer list* when opening multiple files at the same time.

#+begin_src emacs-lisp
(setq inhibit-startup-buffer-menu t)
#+end_src

 Delete trailing whitespace before save

#+begin_src emacs-lisp
(add-hook 'before-save-hook 'delete-trailing-whitespace)
(add-hook 'before-save-hook 'whitespace-cleanup)
#+end_src

* Completion for key sequence

** Which-key

* Minibuffer completion reading
**  Vertico & Orderless

- Vertico provides a better UX for completion reading.
- Orderless provides a completion style, which allows you to search with orderless segments.


Enable orderless for minibuffer completion.

* Completion at point

* Templating

** yasnippet

Expand template with =TAB=. Jump between the placeholders with =TAB= and =S-TAB=.

* Project management

** perspective

#+begin_src emacs-lisp
(use-package perspective
  :straight t
  :demand t
  :commands
  (persp-mode)
  :config
  (persp-mode)
  :bind
  ("C-x C-b" . persp-list-buffers)         ; or use a nicer switcher, see below
  :custom
  (persp-mode-prefix-key (kbd "C-c M-p"))  ; pick your own prefix key here
  )

(use-package persp-projectile
  :straight t)
#+end_src

** project.el

To find files/buffers and apply commands on project, use builtin package ~project~.

#+begin_src emacs-lisp
(use-package project
  :straight nil
  :custom
  (project-vc-ignores
   '("vendor/" "*.elc" "*.a"
     "tmp" "dist" "coverage"
     ".idea" ".vscode"
     ".ensime_cache" ".eunit"
     ".git" ".hg" ".fslckout"
     "_FOSSIL_" ".bzr" "_darcs"
     ".tox" ".svn"
     ".stack-work" ".ccls-cache" ".cache" ".clangd")
   '(".log" ".vs" "node_modules")))

(use-package ag
  :straight t
  :ensure t
  :commands (ag ag-regexp ag-project)
  :custom
  (ag-highlight-search t)
  (ag-reuse-buffers t)
  (ag-reuse-window t))

(defcustom find-project-ignore-dir
  '("/usr")
  ""
  :type 'list)


(defun my/projectile-ignored-project-function(project-root)
  (member t (mapcar
	     #'(lambda (dir)
		 (string-prefix-p dir project-root)
		 )
	     find-project-ignore-dir
	     )))


(defun projectile-selection-at-point ()
  (when (use-region-p)
    (buffer-substring-no-properties (region-beginning) (region-end))))

(defun projectile-deadgrep (search-term)
  (interactive (list (deadgrep--read-search-term)))
  (let ((deadgrep-project-root-function #'projectile-project-root))
    (deadgrep search-term)))

(use-package ibuffer-projectile
  :straight t)

(use-package projectile
  :straight t
  :commands projectile-global-mode
  :after rg
  :delight '(:eval (format " [prj: %s]" (projectile-project-name)))
  :after (ibuffer-projectile)
  ;; :init
  ;; (when (executable-find "rg")
  ;;   (setq-default projectile-generic-command "rg --files --hidden"))
  ;; :delight
  :preface
  :custom
  (projectile-buffers-filter-function 'projectile-buffers-with-file-or-process)
  (projectile-indexing-method 'hybrid)
  (projectile-completion-system 'default)
  (projectile-ignored-project-function #'my/projectile-ignored-project-function)
  (projectile-enable-caching t)
  (projectile-sort-order 'recently-active)
  ;; (projectile-sort-order 'modification-time)
  ;; (projectile-search-in-file-rg  (lambda () (projectile-dired) (projectile-commander)))
  ;; (projectile-switch-project-action  (lambda () (projectile-dired) (projectile-commander)))
  ;; :preface
  ;; (defun projectile-rg ()
  ;;   "Run ripgrep in projectile."
  ;;   (interactive)
  ;;   (counsel-rg "" (projectile-project-root))
  ;;   )
  :config
  (projectile-register-project-type
   'npm '("package.json")
   :compile "NODE_OPTIONS=--openssl-legacy-provider npm run build"
   :test "npm run test"
   :run "npm run start"
   :test-suffix ".spec")
  (defun poly/switch-project-action ()
    (interactive)
    (if (magit-git-dir)
	(magit-status)
      (projectile-find-file)))

  (defun my/projectile-dynamic-change-index-method()
    (when (projectile-project-p)
      (if (eq (projectile-project-vcs) 'none)
	  (setq projectile-indexing-method 'native)
	(setq projectile-indexing-method 'hybrid))))

  (add-hook 'find-file-hook #'my/projectile-dynamic-change-index-method)
  (add-hook 'dired-mode-hook #'my/projectile-dynamic-change-index-method)

  (defun reload-dir-locals-for-project ()
    "For every buffer with the same `projectile-project-root' as the
  current buffer's, reload dir-locals."
    (interactive)
    (dolist (buffer (projectile-project-buffer-names))
      (with-current-buffer buffer
	(reload-dir-locals-for-curent-buffer))))


  ;; `ibuffer-projectile'
  (add-hook 'ibuffer-hook
	    (lambda ()
	      ;; (ibuffer-projectile-set-filter-groups)
	      (unless (eq ibuffer-sorting-mode 'alphabetic)
		(ibuffer-do-sort-by-alphabetic))))

  (my/projectile-ignored-project-function "/usr/bin")
  (my/projectile-ignored-project-function "vendor")

  ;; (setq projectile-switch-project-action #'poly/switch-project-action)

  (defun my/projectile-custom-switch-action()
    (my/projectile-dynamic-change-index-method)
    (projectile-find-file))

  (setq projectile-switch-project-action #'my/projectile-custom-switch-action)

  (setq projectile-cache-file (expand-file-name "projectile.cache" poly-cache-dir)
	projectile-known-projects-file (concat poly-cache-dir "projectile-bookmarks.eld"))
  (setq projectile-globally-ignored-directories
	'(".idea"
	  ".ensime_cache"
	  ".eunit"
	  ".extension"
	  ".git"
	  ".hg"
	  ".fslckout"
	  "_FOSSIL_"
	  ".bzr"
	  ".vagrant"
	  "_darcs"
	  "archive-contents"
	  "cache"
	  "target"
	  "coverage"
	  ".tox"
	  ".settings"
	  ".svn"
	  ".github"
	  ".metals"
	  ".bloop"
	  ".ccls-cache"
	  ".stack-work"
	  "doc"
	  "docs"
	  "elpa"
	  "log"
	  "logs"
	  "node_modules"
	  "sorbet"
	  "straight"
	  "tmp"
	  "vendor/assets")
	projectile-globally-ignored-file-suffixes '("*.pyc" "*.class" "*.project" "*.jar")
	projectile-globally-ignored-files '("TAGS" "*.log"))
  ;; Use the faster searcher to handle project files: ripgrep `rg'.
  (when (and (not (executable-find "fd"))
	     (executable-find "rg"))
    (setq projectile-generic-command
	  (let ((rg-cmd ""))
	    (dolist (dir projectile-globally-ignored-directories)
	      (setq rg-cmd (format "%s --glob '!%s'" rg-cmd dir)))
	    (dolist (extfs projectile-globally-ignored-file-suffixes)
	      (setq rg-cmd (format "%s -g '!%s'" rg-cmd extfs)))
	    (concat "rg -0 --files --color=never --hidden" rg-cmd))))
  (projectile-global-mode)
  :bind (
	 :map projectile-command-map
	 ("s s" . projectile-deadgrep)))

(defun poly/find-file()
  "my find file"
  (interactive)
  (if (and (bound-and-true-p projectile-mode) (not (eq (projectile-project-vcs) 'none)))
      (projectile-find-file)
    (call-interactively #'find-file)
    ))

(defun my-filter-buffer(buffers)
  (cl-remove-if
   (lambda (b)
     (let ((buf-name (buffer-file-name b)))
       (if buf-name
	   (string-match-p (buffer-file-name b) "\\`\\*")
	 t))) buffers))

(defun poly/switch-to-buffer()
  "My switch to buffer."
  (interactive)
  (if (and (bound-and-true-p projectile-mode) (not (eq (projectile-project-vcs) 'none)))
      (let ((projectile-buffers-filter-function #'projectile-buffers-with-file))
	(projectile-switch-to-buffer))
    (call-interactively #'switch-to-buffer)
    ))
#+end_src

* Enanced completion commands

** consult

* Text searching

** COMMENT deadgrep

** rg.el

#+begin_src emacs-lisp
(use-package rg
  :straight t
  ;; :hook (rg-mode . wgrep-ag-setup)
  :custom
  (rg-custom-type-aliases
   '(("clojure" . "*.clj *.cljs *.cljc *.cljx *.edn")))
  (rg-group-result t)
  (rg-show-columns t)
  (rg-ignore-case 'smart)
  (rg-show-header t)
  :config
  (rg-enable-default-bindings)
  ;; (rg-define-search bl/rg-regexp-project
  ;;   :query ask
  ;;   :format regexp
  ;;   :files current
  ;;   :dir project
  ;;   :confirm never)
  )
#+end_src
* tab-bar

Tab bar represents a named persistent window configuration.

#+begin_src emacs-lisp
(use-package tab-bar
  :straight nil
  :custom
  (tab-bar-close-button-show nil)
  (tab-bar-new-tab-choice "*scratch*")
  (tab-bar-close-last-tab-choice 'tab-bar-mode-disable)
  (tab-bar-close-tab-select 'recent)
  ;; Start a new tab with the current buffer.
  ;; (tab-bar-new-tab-choice t)
  ;; (tab-bar-new-tab-to 'right)
  (tab-bar-new-tab-to 'rightmost)
  (tab-bar-position nil)
  ;; Keep tab-bar hidden.
  (tab-bar-show t)
  (tab-bar-tab-hints t)
  ;; (tab-bar-tab-name-function 'tab-bar-tab-name-all)
  (tab-bar-border 0)
  (tab-bar-close-button nil)
  (tab-bar-back-button nil)
  (tab-bar-new-button nil)
  (tab-bar-format '(tab-bar-format-tabs))
  (tab-bar-tab-name-format-function '+tab-bar-tab-format-function)
  :config
  ;; Enable `tab-bar-mode' by default.
  (tab-bar-mode t)
  (global-tab-line-mode -1)
  ;; Check `winner-mode' that keeps track of layout changes.
  (tab-bar-history-mode -1)

  (defun my/tab-bar-select-tab-dwim ()
    "Do-What-I-Mean function for getting to a `tab-bar-mode' tab.
If no other tab exists, create one and switch to it.  If there is
one other tab (so two in total) switch to it without further
questions.  Else use completion to select the tab to switch to."
    (interactive)
    (let ((tabs (mapcar (lambda (tab)
			  (alist-get 'name tab))
			(tab-bar--tabs-recent))))
      (cond ((eq tabs nil)
	     (tab-new))
	    ((eq (length tabs) 1)
	     (tab-next))
	    (t
	     (tab-bar-switch-to-tab (completing-read "Select tab: " tabs))))))

  (defun +tab-bar-switch-project ()
    "Switch to project in a new tab, project name will be used as tab name.
No tab will created if the command is cancelled."
    (interactive)
    (let (succ)
      (unwind-protect
	  (progn
	    (tab-bar-new-tab)
	    (call-interactively #'project-switch-project)
	    (when-let ((proj (project-current)))
	      (tab-bar-rename-tab (format "%s" (file-name-nondirectory (directory-file-name (cdr proj)))))
	      (setq succ t)))
	(unless succ
	  (tab-bar-close-tab)))))

  (defun +tab-bar-tab-format-function (tab i)
    (let ((current-p (eq (car tab) 'current-tab)))
      (concat
       (propertize (concat
		    " "
		    (alist-get 'name tab)
		    " ")
		   'face
		   (funcall tab-bar-tab-face-function tab))
       " ")))

  (global-set-key (kbd "C-x t .") #'tab-bar-rename-tab)
  (global-set-key (kbd "C-x t l") #'+tab-bar-switch-project)

  (tab-bar-mode 1)
  :bind
  ("H-t" . an/hydra-window-management/body)
  ("C-x t t" . my/tab-bar-select-tab-dwim)
  ;; ("s-t" . tab-new)
  ("s-<left>" . tab-previous)
  ("s-<right>" . tab-next)
  ;; monkey-with-hammer.png
  ("s-1" .  (lambda () (interactive) (tab-bar-select-tab 1)))
  ("s-2" .  (lambda () (interactive) (tab-bar-select-tab 2)))
  ("s-3" .  (lambda () (interactive) (tab-bar-select-tab 3)))
  ("s-4" .  (lambda () (interactive) (tab-bar-select-tab 4)))
  ("s-5" .  (lambda () (interactive) (tab-bar-select-tab 5)))
  ("s-6" .  (lambda () (interactive) (tab-bar-select-tab 6)))
  ("s-7" .  (lambda () (interactive) (tab-bar-select-tab 7)))
  ("s-8" .  (lambda () (interactive) (tab-bar-select-tab 8)))
  ("s-9" .  (lambda () (interactive) (tab-bar-select-tab 9))))

;; use project name as default tab name
(defun toy/set-tab-name-default ()
  (interactive)
  (if (buffer-file-name (current-buffer))
      (let ((proj-name (projectile-project-name)))
	(unless (or (= (length proj-name) 0) (string= proj-name "-"))
	  ;; (message proj-name)
	  (tab-bar-rename-tab proj-name)))))

(advice-add 'tab-bar-new-tab :after (lambda (&rest x) (toy/set-tab-name-default)))
(advice-add 'tab-bar-tab-name-format-function :after (lambda (&rest x) (toy/set-tab-name-default)))
(add-hook 'window-setup-hook #'toy/set-tab-name-default)
#+end_src


* Window Management

** ace

#+begin_src emacs-lisp

;; winum users can use `winum-select-window-by-number' directly.
(defun my-select-window-by-number (win-id)
  "Use `ace-window' to select the window by using window index.
WIN-ID : Window index."
  (let ((wnd (nth (- win-id 1) (aw-window-list))))
    (if wnd
	(aw-switch-to-window wnd)
      (message "No such window."))))

(defun my-select-window ()
  (interactive)
  (let* ((event last-input-event)
	 (key (make-vector 1 event))
	 (key-desc (key-description key)))
    (my-select-window-by-number
     (string-to-number (car (nreverse (split-string key-desc "-")))))))

(use-package ace-window
  :straight t
  :ensure t
  :defer t
  :init
  (global-set-key [remap other-window] #'ace-window)
  :custom
  (aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
  (aw-scope 'global)
  (aw-background t)
  :bind
  (("C-x o" . ace-window)))

;;;###autoload
(defun ace-maximize-window ()
  "Ace maximize window."
  (interactive)
  (select-window (aw-select " Ace - Maximize Window"))
  (delete-other-windows))
#+end_src

** windswap

#+begin_src emacs-lisp
(use-package windswap
  :straight t
  ;; https://github.com/amnn/windswap
  ;; windswap-left|right|up|down
  :commands (windswap-up windswap-down windswap-left windswap-right))
#+end_src

** move frame to side

#+begin_src emacs-lisp

(defun current-monitor-pixel-dimensions ()
  "Get current monitor pixel dimensions."
  (let* ((current-frame (selected-frame))
	  (monitor-attributes (display-monitor-attributes-list
			      ;; (frame-parameter nil 'display)
			      current-frame)))
    (list (nth 3 (assq 'geometry (nth 0 monitor-attributes)))
	  (nth 4 (assq 'geometry (nth 0 monitor-attributes))))))

;; (defun current-monitor-pixel-width ()
;;   (car (current-monitor-pixel-dimensions)))

;; (defun current-monitor-pixel-height ()
;;   (nth 1 (current-monitor-pixel-dimensions )))

(defun move-frame-left-or-right-side (left)
  (when (display-graphic-p)
    (let* ((frame (selected-frame))
	   (fullscreen (frame-parameter frame 'fullscreen))
	   (monitor-width-height-in-pixel (current-monitor-pixel-dimensions))
	   (monitor-width (car monitor-width-height-in-pixel))
	   (monitor-height (nth 1 monitor-width-height-in-pixel)))
      (when (eq fullscreen 'maximized)
	(toggle-frame-maximized))
      (set-frame-width frame (- (/ monitor-width 2) 31) nil t)
      (set-frame-height frame (- monitor-height  55) nil t)
      (if left
	  (set-frame-position frame 0 0)
	;; (set-frame-position (selected-frame) (/ (display-pixel-width) 2) 0)
	(let ((frame-width-pixel (frame-native-width frame))
	      (screen-width-pixel (display-pixel-width)))
	  (set-frame-position frame (- monitor-width frame-width-pixel 30) 0))))))

(defun move-frame-top-or-bottom-side (top)
  (when (display-graphic-p)
    (let* ((frame (selected-frame))
	   (fullscreen (frame-parameter frame 'fullscreen))
	   (monitor-width-height-in-pixel (current-monitor-pixel-dimensions))
	   (monitor-width (car monitor-width-height-in-pixel))
	   (monitor-height (nth 1 monitor-width-height-in-pixel)))
      (when (eq fullscreen 'maximized)
	(toggle-frame-maximized))
      (set-frame-height frame (- (/ monitor-height 2) 31) nil t)
      (set-frame-width frame (- monitor-width 50) nil t)
      (if top
	  (set-frame-position frame 0 0)
	(let ((frame-width-pixel (frame-native-width frame))
	      (frame-height-pixel (frame-native-height frame))
	      (screen-width-pixel (display-pixel-width)))
	  (set-frame-position frame 0 (- monitor-height frame-height-pixel 30)))))))

(defun move-frame-to-left-side ()
  "Move frame to left side."
  (interactive)
  (if (display-graphic-p)
      (move-frame-left-or-right-side t)))

(defun move-frame-to-right-side ()
  "Move frame to right side."
  (interactive)
  (if (display-graphic-p)
      (move-frame-left-or-right-side nil)))

(defun move-frame-to-top-side ()
  "Move frame to top side."
  (interactive)
  (if (display-graphic-p)
      (move-frame-top-or-bottom-side t)))

(defun move-frame-to-bottom-side ()
  "Move frame to bottom side."
  (interactive)
  (if (display-graphic-p)
      (move-frame-top-or-bottom-side nil)))

;; preserve smartparens's shortcut
;; (bind-key "C-M-<left>" #'move-frame-to-left-side)
;; (bind-key "C-M-<right>" #'move-frame-to-right-side)

(bind-key "C-M-s-<left>" #'move-frame-to-left-side)
(bind-key "C-M-s-<right>" #'move-frame-to-right-side)
(bind-key "C-M-s-<up>" #'move-frame-to-top-side)
(bind-key "C-M-s-<down>" #'move-frame-to-bottom-side)
#+end_src

* shackle

don't pop windows everywhere!

#+begin_src emacs-lisp

(when (fboundp 'mac-auto-operator-composition-mode)
  (mac-auto-operator-composition-mode))

;; don't pop windows everywhere!
(use-package shackle
  :straight t
  :hook (after-init . shackle-mode)
  :custom
  (shackle-default-size 0.5)
  (shackle-default-alignment 'below)
  (shackle-rules
   '((magit-log-mode       :select t :inhibit-window-quit t :same t)
     ("*quickrun*"         :select t :inhibit-window-quit t :same t)
     (profiler-report-mode :select t)
     (apropos-mode         :select t :align t :size 0.3)
     (help-mode            :select t :align t :size 0.4)
     (comint-mode          :select t :align t :size 0.4)
     (grep-mode            :select t :align t)
     (rg-mode              :select t :align t)
     ("*Flycheck errors*"         :select t   :align t :size 10)
     ("*Backtrace*"               :select t   :align t :size 15)
     ("*ydcv*"                    :select nil :align t :size 0.4)
     ("*Shell Command Output*"    :select nil :align t :size 0.4)
     ("*Async Shell Command*"     :select nil :align t :size 0.4)
     ("*Org-Babel Error Output*"  :select nil :align t :size 0.3)
     ("*package update results*"  :select nil :align t :size 10)
     ("*Process List*"            :select t   :align t :size 0.3)
     ("*Help*"                    :select t   :align t :size 0.3)
     ("*Occur*"                   :select t   :align right)
     ("\\*ivy-occur .*\\*"        :select t   :align right :regexp t)
     ("\\*eldoc\\( for \\)?.*\\*" :select nil :align t :size 15 :regexp t))))
#+end_src

* pair

#+begin_src emacs-lisp

(use-package paredit
    :straight t
    ;; :straight (:type git
    ;;		   :host github
    ;;		   :repo "emacsmirror/paredit")
    :ensure t
    :defer t
    :hook ((;; scheme-mode
	    ;; emacs-lisp-mode lisp-mode ielm-mode
	    clojure-mode cider-repl-mode
	    ;; cask-mode
	    ) . paredit-mode)
    :commands paredit-mode enable-paredit-mode
    ;; :config
    ;; (autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
    )

;; electric-pair-mode or smartparens-mode

;; keeps our parentheses balanced and allows for easy manipulation
(use-package smartparens
    :straight t
    :ensure t
    :diminish smartparens-mode
    :commands
    smartparens-strict-mode
    smartparens-mode
    sp-restrict-to-pairs-interactive
    sp-local-pair
    :hook  (after-init . smartparens-global-mode)
    :init
    (setq sp-interactive-dwim t)
    :custom
    (sp-base-key-bindings 'sp)
    ;; (sp-show-pair-from-inside t)
    ;; (sp-autoskip-closing-pair 'always)
    ;; (sp-hybrid-kill-entire-symbol nil)
    ;; (sp-autowrap-region nil)
    :config
    (show-smartparens-global-mode t)
    ;; (smartparens-global-mode t)
    (require 'smartparens-config)
    (sp-use-smartparens-bindings)
    ;; Only use smartparens in web-mode
    (with-eval-after-load 'smartparens
      (setq web-mode-enable-auto-pairing nil)
      (sp-local-pair 'web-mode "<% " " %>")
      (sp-local-pair 'web-mode "{ " " }")
      (sp-local-pair 'web-mode "<%= "  " %>")
      (sp-local-pair 'web-mode "<%# "  " %>")
      (sp-local-pair 'web-mode "<%$ "  " %>")
      (sp-local-pair 'web-mode "<%@ "  " %>")
      (sp-local-pair 'web-mode "<%: "  " %>")
      (sp-local-pair 'web-mode "{{ "  " }}")
      (sp-local-pair 'web-mode "{% "  " %}")
      (sp-local-pair 'web-mode "{%- "  " %}")
      (sp-local-pair 'web-mode "{# "  " #}"))

    (sp-pair "(" ")" :wrap "C-(") ;; how do people live without this?
    (sp-pair "[" "]" :wrap "s-[") ;; C-[ sends ESC
    (sp-pair "{" "}" :wrap "C-{")


    ;; WORKAROUND https://github.com/Fuco1/smartparens/issues/543
    (bind-key "C-<left>" nil smartparens-mode-map)
    (bind-key "C-<right>" nil smartparens-mode-map)

    (bind-key "s-<delete>" 'sp-kill-sexp smartparens-mode-map)
    (bind-key "s-<backspace>" 'sp-backward-kill-sexp smartparens-mode-map)

    ;; ;; fix conflict with move frame left/right side
    ;; (unbind-key "C-M-<left>" smartparens-mode-map)
    ;; (unbind-key "C-M-<right>" smartparens-mode-map)
    )
#+end_src

* rainbow-mode

Visualizing Color Codes with rainbow-mode.

#+begin_src emacs-lisp
(use-package rainbow-mode
    :straight t
    :diminish rainbow-mode
    :commands rainbow-mode
    ;; :init
    ;; (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
    )

;; Colored parentheses
(use-package rainbow-delimiters
    :straight t
    :ensure t
    :diminish rainbow-delimiters-mode
    :commands rainbow-delimiters-mode
    :init
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
#+end_src

* highlight indent & parentheses

#+begin_src emacs-lisp
(use-package highlight-indent-guides
  :straight t
  :hook (prog-mode . highlight-indent-guides-mode)
  :delight highlight-indent-guides-mode
  :init
  (setq highlight-indent-guides-method 'character
	highlight-indent-guides-auto-enabled nil
        ;; default is \x2502 but it is very slow on Mac
        highlight-indent-guides-character ?\xFFE8
        highlight-indent-guides-responsive 'top)
  ;; :config
  ;; (set-face-background 'highlight-indent-guides-odd-face "darkgray")
  ;; (set-face-background 'highlight-indent-guides-even-face "dimgray")
  ;; (set-face-foreground 'highlight-indent-guides-character-face "dimgray")
  )

(use-package display-fill-column-indicator
  :if EMACS27+
  :straight nil
  :hook ((prog-mode . display-fill-column-indicator-mode)
         (text-mode . display-fill-column-indicator-mode)))

;; copied from +spacemacs/spacemacs-editing-visual
(use-package highlight-parentheses
  :straight t
  :hook (prog-mode . highlight-parentheses-mode)
  :init
  (setq hl-paren-delay 0.2)
  (setq hl-paren-colors
	'("SpringGreen3" "IndianRed1" "IndianRed3" "IndianRed4"))
  ;; :config
  ;; (set-face-attribute 'hl-paren-face nil :weight 'bold)
  ;; (custom-set-faces '(show-paren-match ((t (:foreground "SpringGreen1" :underline t)))))
  )
#+end_src

* icon

#+begin_src emacs-lisp
(use-package all-the-icons
  :straight t
  :if IS-GUI
  ;; :if (or IS-GUI (daemonp))
  ;; :init
  ;; (setq all-the-icons-scale-factor 0.8)
  )

(use-package all-the-icons-dired
  :straight t
  :if IS-GUI
  :after (all-the-icons dired)
  :hook (dired-mode . all-the-icons-dired-mode))

(use-package all-the-icons-ibuffer
  :straight t
  :if IS-GUI
  :after (all-the-icons ibuffer)
  :config
  (all-the-icons-ibuffer-mode t))
#+end_src

* python

#+begin_src emacs-lisp :tangle no
(use-package jupyter
  :straight (emacs-jupyter :type git :host github :repo "nnicandro/emacs-jupyter")
  :custom
  (jupyter-repl-echo-eval-p t)
  (org-babel-default-header-args:jupyter-python '((:async . "yes")
                                                  (:session . "py")
                                                  (:kernel . "python3")))
  (org-babel-default-header-args:jupyter-julia '((:async . "yes")
                                                 (:session . "jl")
                                                 (:kernel . "julia-1.8")))
  (ob-async-no-async-languages-alist '("python" "jupyter-python" "julia" "jupyter-julia"))
  :bind (("C-c C-x r" . jupyter-repl-restart-kernel)
         ("C-c C-x h" . jupyter-org-restart-and-execute-to-point))
  :config
  (setq jupyter--debug t))

(use-package ob-jupyter
  :defer t
  :straight nil
  :commands (org-babel-execute:jupyter-python)
  :bind
  (:map jupyter-repl-mode-map
        ("C-l" . jupyter-repl-clear-cells)
        ("C-<up>" . jupyter-repl-history-previous)
        ("C-<down>" . jupyter-repl-history-next)))

(use-package zmq
  :custom
  (module-file-suffix ".a")
  :straight(zmq :type git :host github
                :repo "dzop/emacs-zmq"
                :files (:defaults "Makefile" "src" "*.so")))

(use-package simple-httpd
  :straight t)

(setenv "PYDEVD_DISABLE_FILE_VALIDATION" "1")

(use-package ansi-color
  :straight t
  :ensure t
  :init
  (defun colorize-compilation-buffer ()
    (read-only-mode)
    (ansi-color-apply-on-region compilation-filter-start (point))
    (read-only-mode))
  (add-hook 'compilation-filter-hook 'colorize-compilation-buffer))
#+end_src


* org

** org-mode config
#+begin_src emacs-lisp
(with-eval-after-load "org"
  ;; NOTE org-fold-core-style needs to be set before org is loaded
  (setq org-fold-core-style 'overlays)

  (setq org-directory "~/Dropbox/org")
  (setq org-beorg-directory (expand-file-name "~/Library/Mobile Documents/iCloud~com~appsonthemove~beorg/Documents/org/beorg/"))
  (setq +org-mu4e-icalendar-org-capture-file (expand-file-name "mu4e.org" org-beorg-directory))
  (setq +org-calfw-org-capture-file (expand-file-name "calfw.org" org-beorg-directory))
  (setq +org-capture-gtd-file (expand-file-name  "personal-gtd.org" org-beorg-directory))
  (setq +org-capture-notes-file (expand-file-name  "personal-note.org" org-beorg-directory))
  (setq +org-capture-work-gtd-file (expand-file-name "work-gtd.org" org-beorg-directory))
  (setq +org-capture-work-team-gtd-file (expand-file-name "work-team-gtd.org" org-beorg-directory))
  (setq +org-capture-work-notes-file (expand-file-name "work-note.org" org-beorg-directory))
  (setq +org-capture-work-talk-file (expand-file-name "work-talk.org" org-beorg-directory))
  (setq +org-capture-work-meeting-file (expand-file-name "work-meeting.org" org-beorg-directory))
  (setq +org-capture-work-weekly-file (expand-file-name "work-weekly.org" org-beorg-directory))

  (setq org-todo-keywords '((sequence "TODO(t)" "DOING(i)" "WAITING(w)" ;; "HOLD(h!)" "NEXT(n!)" "WAIT(w!)"
				      "DELAYED(y)" "|" "DONE(d!)" "DEFERRED(F)" "CANCELLED(c@/!)")
			    (sequence "MEETING(m)" "DOING(i)" "WAITING(w)" "|" "DONE(d!)" "CANCELLED(c@/!)")
			    (sequence "REPORT(r)" "BUG(b)" "KNOWNCAUSE(k)" "|" "FIXED(f!)")))
  (setq org-todo-keyword-faces
	'(("TODO"       :foreground "#7c7c75" :weight bold)
	  ("DOING"      :foreground "goldenrod" :weight bold)
	  ("DELAYED"    :foreground "white" :background "#f44242" :weight bold)
	  ("MEETING"    :foreground "#7c7c75" :weight bold)
	  ;; ("HOLD"       :foreground "#feb24c" :weight bold)
	  ;; ("NEXT"       :foreground "#0098dd" :weight bold)
	  ;; ("WAIT"       :foreground "#9f7efe" :weight bold)
	  ("WAITING"    :foreground "#9f7efe" :weight bold)
	  ("DONE"       :foreground "#50a14f" :weight bold)
	  ("DEFERRED"   :foreground "#ff6480" :weight bold)
	  ("CANCELLED"  :foreground "#ff6480" :weight bold)
	  ("REPORT"     :foreground "magenta" :weight bold)
	  ("BUG"        :foreground "red"     :weight bold)
	  ("KNOWNCAUSE" :foreground "yellow"  :weight bold)
	  ("FIXED"      :foreground "green"   :weight bold)))
  (setq org-use-fast-todo-selection 'expert)
  ;; (org-use-fast-todo-selection 'auto)
  (setq org-enforce-todo-dependencies t)
  (setq org-enforce-todo-checkbox-dependencies t)
  (setq org-priority-faces '((?A :foreground "red")
			     (?B :foreground "orange")
			     (?C :foreground "yellow")))
  (setq org-global-properties '(("EFFORT_ALL" . "0:15 0:30 0:45 1:00 2:00 3:00 4:00 5:00 6:00")
				("STYLE_ALL" . "habit")))
  ;; (org-columns-default-format "%25ITEM %TODO %SCHEDULED %DEADLINE %3PRIORITY %TAGS %CLOCKSUM %EFFORT{:}")
  (setq org-columns-default-format "%40ITEM(Task) %Effort(EE){:} %CLOCKSUM(Time Spent) %SCHEDULED(Scheduled) %DEADLINE(Deadline)")
  ;; Remove CLOSED: [timestamp] after switching to non-DONE states
  (setq org-closed-keep-when-no-todo t)

  ;; log
  (setq org-log-done 'time
	org-log-repeat 'time
	org-log-redeadline 'note
	org-log-reschedule nil
	org-log-into-drawer t
	org-log-state-notes-insert-after-drawers nil)
  ;; (org-log-states-order-reversed t)

  ;; tags
  (setq org-tags-column 0
	org-fast-tag-selection-single-key t
	org-track-ordered-property-with-tag t)

  ;; calendar
  (setq org-time-stamp-custom-formats '("<%A, %e. %B %Y>" . "<%A, %e. %B %Y %H:%M>")
	org-agenda-start-on-weekday 1
	calendar-week-start-day 1
	org-display-custom-times t
	org-confirm-babel-evaluate nil)

  (add-to-list 'org-modules 'org-capture)
  (add-to-list 'org-modules 'org-habit)
  (add-to-list 'org-modules 'org-timer)
  (add-to-list 'org-modules 'org-protocol)
  ;; (add-to-list 'org-modules 'org-cliplink)
  ;; (add-to-list 'org-modules 'org-journal)
  (add-to-list 'org-modules 'org-agenda)
  (add-to-list 'org-modules 'org-element)

  (require 'ox-confluence)

  ;; (add-to-list 'org-modules 'org-bars)
  ;; (add-to-list 'org-modules 'org-pdfview)
  ;; (add-to-list 'org-modules 'org-download)

  (defun my/org-add-ids-to-headlines-in-file ()
    "Add ID properties to all headlines in the current file which
do not already have one."
    (interactive)
    (if (and (boundp 'org-auto-add-ids-to-headlines-in-file) org-auto-add-ids-to-headlines-in-file)
	(org-map-entries 'org-id-get-create)))
  (add-hook 'org-mode-hook
            (lambda ()
	      (add-hook 'before-save-hook 'my/org-add-ids-to-headlines-in-file nil 'local)))

  (add-hook 'org-capture-prepare-finalize-hook 'org-id-get-create)

  (add-hook 'org-mode-hook
	    (lambda () (setq truncate-lines nil)))

  (dolist (face '(org-level-1
		  org-level-2 org-level-3
		  org-level-4 org-level-5
		  org-level-6 org-level-7
		  org-level-8))
    (set-face-attribute face nil :weight 'normal))

  (setq prettify-symbols-unprettify-at-point 'right-edge)
  (add-hook 'org-mode-hook
            (lambda ()
              "Beautify Org Checkbox Symbol"
              (push '("[ ]" . "☐") prettify-symbols-alist)
              (push '("[X]" . "☑") prettify-symbols-alist)
              (push '("[-]" . "❍") prettify-symbols-alist)
              (prettify-symbols-mode)))

  (setq org-agenda-files (list
			  +org-capture-gtd-file
			  +org-capture-work-gtd-file
			  +org-capture-work-team-gtd-file
			  +org-capture-work-talk-file
			  +org-capture-work-meeting-file
			  +org-mu4e-icalendar-org-capture-file))

  ;; archived location
  (setq org-archive-location (expand-file-name "archive/%s_archive::" org-directory))

  (setq org-refile-targets
	`((org-agenda-files :maxlevel . 2)
	  (,(list +org-capture-notes-file
		  +org-capture-work-notes-file
		  +org-capture-work-team-gtd-file
		  +org-capture-work-weekly-file) :maxlevel . 2)))

  (setq org-tag-alist
	'(("ignore" . ?i)
	  ("crypt" . ?c)))

  (setq org-capture-templates
	'(("t" "Personal todo" entry
	   (file+headline +org-capture-gtd-file "P-GTD")
	   "* TODO %?\n%i%U\n" :kill-buffer nil)
	  ("n" "Personal notes" entry
	   (file+headline +org-capture-notes-file "P-Note")
	   "* %u %?\n%i%U\n%a" :kill-buffer nil)

	  ("w" "Templates for work")
	  ("wt" "Work todo" entry
	   (file+olp +org-capture-work-gtd-file "W-GTD")
	   "* TODO %?\n%i%U\n" :kill-buffer nil)
	  ;; "* TODO %T%?\n%i\n:LOGBOOK:\n\n:END:\n" :prepend t :kill-buffer t)
	  ("wm" "Work meeting" entry
	   (file+olp +org-capture-work-meeting-file  "W-Meeting")
	   "* TODO %?\n%i%U\n")
	  ("wn" "Work notes" entry
	   (file+olp +org-capture-work-notes-file  "W-Note")
	   "* %u %?\n%i\n%a" :kill-buffer nil)
	  ("ww" "Work weekly" entry
	   (file+olp +org-capture-work-weekly-file "W-Weekly")
	   "* %U 周汇报\n\n   本周事项：\n\n     - %?\n\n   下周计划：\n\n     -    \n\n%i\n")

	  ("p" "Templates for projects")
	  ("pt" "Project todo" entry ; {project-root}/todo.org
	   (file+headline +org-capture-project-todo-file "Todo")
	   "* TODO %T%?\n%i\n%a" :prepend nil :kill-buffer t)
	  ("pn" "Project notes" entry ; {project-root}/notes.org
	   (file+headline +org-capture-project-notes-file "Note")
	   "* TODO %?\n%i%U\n%a" :prepend nil :kill-buffer t)
	  ("pc" "Project changelog" entry ; {project-root}/changelog.org
	   (file+headline +org-capture-project-notes-file "Changelog")
	   "* TODO %?\n%i%U\n%a" :prepend nil :kill-buffer t)
	  ("j" "Journal" entry
	   (file+olp+datetree (expand-file-name "journal.org" org-beorg-directory))
	   "* %T%?\nEntered on %U\n %i\n" :empty-lines 1)))
  (setq org-format-latex-options (plist-put org-format-latex-options :scale 1.8))

  ;; minted required:
  ;; 1. xelatex -shell-escape
  ;; 2. pip install pygments
  ;; 3. pip install git+https://github.com/hg2c/terminal-pygments#egg=terminal-pygments
  (setq org-latex-listings 'minted)

  (setq org-latex-minted-langs  '((emacs-lisp "common-lisp")
				  (cc "c++")
				  (cperl "perl")
				  (shell-script "bash")
				  (caml "ocaml")
				  (emacs-lisp "common-lisp")
				  ;; (lisp "common-lisp")
				  (clojure "Lisp")
				  (c "C")
				  (cc "c++")
				  ;; (fortran "fortran")
				  ;; (perl "Perl")
				  ;; (cperl "Perl")
				  (python "Python")
				  ;; (ruby "Ruby")
				  ;; (html "HTML")
				  ;; (xml "XML")
				  ;; (tex "TeX")
				  ;; (latex "TeX")
				  (shell-script "bash")
				  ;; (gnuplot "Gnuplot")
				  ;; (ocaml "Caml")
				  (sql "SQL")
				  (sqlite "sql")
				  ;; (R-mode "R")
				  (go "go")
				  (lua "lua")
				  (shell "shell")
				  (caml "ocaml")
				  (csp "text")
				  ))
  (setq org-latex-minted-options
        '(;; ("obeytabs" "true")
          ;; ("mathescape" "true")
          ("linenos" "false")
          ;; ;; ("numbersep" "5pt")
          ;; ;; ("frame" "none")
          ;; ("frame" "leftline")
	  ("frame" "lines")
          ;; ("framerule" "0.2pt")
          ("framesep" "2mm")
          ;; ;; ("bgcolor" "lgray")
          ;; ;; ("bgcolor" "mintedbg")
          ("tabsize" "2")
          ("fontsize" "\\scriptsize")
          ;; ;; ("fontsize" "\\scriptsize")
          ))

  ;; plantuml
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((ditaa . t)
     (dot . t)
     (emacs-lisp . t)
     (gnuplot . t)
     (js . t)
     (latex . t)
     (lilypond . t)
     (octave . t)
     ;; (perl . t)
     (plantuml . t)
     (python . t)
     ;; (ruby . t)
     (shell . t)
     ;; (sqlite . t)
     ;; (R . t)
     ))
  (add-to-list 'org-src-lang-modes '("plantuml" . plantuml))
  (setq org-plantuml-jar-path "/opt/local/share/java/plantuml/plantuml.jar")

  (add-hook 'org-babel-after-execute-hook
            (lambda ()
              (when org-inline-image-overlays
		(org-redisplay-inline-images))))

  ;; (add-to-list 'auto-mode-alist '("\\.puml\\'" . plantuml-mode))
  ;; (add-to-list 'auto-mode-alist '("\\.plantuml\\'" . plantuml-mode))

  ;; default article
  (setq org-latex-classes
	'(("article" "
	%!TEX TS-program = xelatex
	%!TEX encoding = UTF-8 Unicode

	\\documentclass[11pt,titlepage,a4paper]{article}
	\\usepackage{ctex}
	\\usepackage[top=3truecm,bottom=2.5truecm,left=1.1truecm,right=1.1truecm,bindingoffset=1.0truecm,
		     headsep=1.6truecm,
		     footskip=1.5truecm,
		     headheight=15pt    % 标准中没有要求页眉的高度，这里设置成15pt了
		     ]{geometry}
	%\\XeTeXlinebreaklocale \"zh\"
	%\\XeTeXlinebreakskip = 0pt plus 1pt minus 0.1pt
	%\\usepackage[top=1in,bottom=1in,left=0.8in,right=0.8in]{geometry}
	%\\usepackage[table]{xcolor}
	%\\definecolor{link}{HTML}{0366D6}
	%\\definecolor{lightgray}{rgb}{0.83, 0.83, 0.83}
	%\\definecolor{mintcream}{rgb}{0.96, 1.0, 0.98}
	%\\rowcolors{3}{lightgray!30}{white}
	%\\usepackage{fontspec}
	%\\newfontfamily\\zhfont[BoldFont=PingFang SC]{PingFang SC}
	%\\newfontfamily\\zhpunctfont{PingFang SC}
	%\\setmainfont{PingFang SC}
	%\\setsansfont{Hiragino Sans GB}
	%\\setmonofont[Scale=0.9]{PingFang SC}
	%\\usepackage{zhspacing}
	%\\zhspacing
	%\\usepackage{indentfirst}
	%\\usepackage[table]{xcolor}
	\\usepackage{xcolor}
	%\\definecolor{link}{HTML}{0366D6}
	% \\definecolor{lightgray}{rgb}{0.83, 0.83, 0.83}
	%\\definecolor{mintcream}{rgb}{0.96, 1.0, 0.98}
	%\\rowcolors{3}{lightgray!30}{white}
	\\usepackage{hyperref}
	%\\hypersetup{
	%  colorlinks=true,
	%   linkcolor=link,
	%   citecolor=[rgb]{0,0.47,0.68},
	%   filecolor=link,
	%   urlcolor=link,
	%   pagebackref=true,
	%   linktoc=all,
	% }
	%\\usepackage[outputdir=./build/tex]{minted}
	\\usepackage[utf8]{inputenc}
	\\usepackage{alltt}
	\\usepackage{caption}
	\\usepackage{listings}
	%                        \\usepackage{xcolor}
	\\usepackage{graphicx}
	\\usepackage{lmodern}
	\\DeclareCaptionFormat{listing}{\\rule{\\dimexpr\\textwidth+17pt\\relax}{0.4}\\vskip1pt#1#2#3}
	% \\captionsetup[lstlisting]{singlelinecheck=false, margin=0pt, font={bf,footnotesize}}
	\\definecolor{wine-stain}{rgb}{0.4,0.3,0.3}
	\\hypersetup{colorlinks,linkcolor=wine-stain,anchorcolor=black,linktoc=all,
	citecolor=black}
	[NO-DEFAULT-PACKAGES]
	"
	   ("\\section{%s}" . "\\section*{%s}")
	   ("\\subsection{%s}" . "\\subsection*{%s}")
	   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
	   ("\\paragraph{%s}" . "\\paragraph*{%s}")
	   ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))


  (unless (assoc "beamer" org-latex-classes)
    (add-to-list 'org-latex-classes
		 '("beamer" "
		     %!TEX TS-program = xelatex
		     %!TEX encoding = UTF-8 Unicode

		  \\documentclass[presentation]{beamer}
		     \\usepackage{ctex}
		     "
		   ("\\section{%s}" . "\\section*{%s}")
		   ("\\subsection{%s}" . "\\subsection*{%s}")
		   ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))))

  (add-to-list 'org-latex-packages-alist '("" "minted"))
  (setq org-latex-listings 'minted)

  ;; LaTex
  ;; (add-to-list 'org-latex-packages-alist '("" "listings" nil))
  ;; (setq org-latex-listings t)
  ;; rather do that for each file separately in header!!!
  (setq org-latex-listings-options
	'(("basicstyle" "\\small")
	  ;; ("keywordstyle" "\\color{black}\\bfseries\\underbar")
	  ("basicstyle" "\\footnotesize")
	  ("breakatwhitespace" "false")
	  ("breaklines" "true")
	  ("captionpos" "b")
	  ("deletekeywords" "{...}")
	  ("escapeinside" "{\\%*}{*)}")
	  ("extendedchars" "true")
	  ("frame" "single")
	  ("keepspaces" "true")
	  ("keywordstyle" "\\color{blue}")
	  ("otherkeywords" "{*,...}")
	  ("numbers" "left")
	  ("numbersep" "5pt")
	  ("numberstyle" "\\tiny\\color{black}")
	  ("rulecolor" "\\color{black}")
	  ("showspaces" "false")
	  ("showstringspaces" "false")
	  ("showtabs" "false")
	  ("stepnumber" "1")
	  ("tabsize" "2")))
  ;; (setq org-latex-listings-options '(("breaklines" "true")
  ;;                                    ("numberstyle" "\\tiny\\color{black}")
  ;;                                    ))

  ;; ;; letter
  ;; (add-to-list 'org-latex-classes
  ;;              '("letter"
  ;;                "\\documentclass[11pt]{letter}\n
  ;;                   \\usepackage[utf8]{inputenc}\n
  ;;                   \\usepackage[T1]{fontenc}\n
  ;;                   \\usepackage{color}"

  ;;                ("\\section{%s}" . "\\section*{%s}")
  ;;                ("\\subsection{%s}" . "\\subsection*{%s}")
  ;;                ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
  ;;                ("\\paragraph{%s}" . "\\paragraph*{%s}")
  ;;                ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))


  ;; (add-to-list 'org-latex-packages-alist '("" "ctex"))
  ;; ;; (add-to-list 'org-latex-packages-alist '("" "minted"))
  ;; (add-to-list 'org-latex-packages-alist '("" "color"))
  ;; (add-to-list 'org-latex-packages-alist '("" "geometry"))
  (add-to-list 'org-latex-packages-alist '("" "tabularx"))
  (add-to-list 'org-latex-packages-alist '("" "tabu"))
  (setq org-latex-default-table-environment "tabu")
  ;; (add-to-list 'org-latex-packages-alist '("" "fancyhdr"))
  ;; (add-to-list 'org-latex-packages-alist '("" "natbib"))
  ;; (add-to-list 'org-latex-packages-alist '("" "titlesec"))

  ;; code snippet comes from
  ;; ;; http://joat-programmer.blogspot.com/2013/07/org-mode-version-8-and-pdf-export-with.html
  ;; ;; Include the latex-exporter
  ;; ;; check whether org-mode 8.x is available
  ;; (when (require 'ox-latex nil 'noerror)
  ;;   ;; You need to install pygments to use minted
  ;;   (when (executable-find "pygmentize")
  ;;     ;; Add minted to the defaults packages to include when exporting.
  ;;     (add-to-list 'org-latex-packages-alist '("" "minted"))
  ;;     ;; (add-to-list 'org-latex-minted-langs '(calc "mathematica"))

  ;;     ;; Tell the latex export to use the minted package for source
  ;;     ;; code coloration.
  ;;     (setq org-latex-listings 'minted)

  ;;     ;; ;; Let the exporter use the -shell-escape option to let latex
  ;;     ;; ;; execute external programs.
  ;;     ;; ;; This obviously and can be dangerous to activate!
  ;;     ;; (setq org-latex-minted-options
  ;;     ;;       '(;; ("obeytabs" "true")
  ;;     ;;         ;; ("mathescape" "true")
  ;;     ;;         ("linenos" "false")
  ;;     ;;         ;; ;; ("numbersep" "5pt")
  ;;     ;;         ;; ;; ("frame" "none")
  ;;     ;;         ;; ("frame" "leftline")
  ;;     ;;         ;; ;; ("frame" "lines")
  ;;     ;;         ;; ("framerule" "0.2pt")
  ;;     ;;         ;; ("framesep" "2mm")
  ;;     ;;         ;; ;; ("bgcolor" "lgray")
  ;;     ;;         ;; ;; ("bgcolor" "mintedbg")
  ;;     ;;         ("tabsize" "2")
  ;;     ;;         ("fontsize" "\\scriptsize")
  ;;     ;;         ;; ;; ("fontsize" "\\scriptsize")
  ;;     ;;         ))
  ;;     ;; (setq org-latex-pdf-process
  ;;     ;;       '("xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
  ;;     ;;         "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
  ;;     ;;         "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
  ;;     ;;         "rm -fr %b.out %b.log %b.tex auto"
  ;;     ;;         ))
  ;;     ))
  ;;
  ;;

  ;; (setq org-latex-pdf-process '("xelatex -interaction nonstopmode %f"
  ;;				  "xelatex -interaction nonstopmode %f"))
  ;; (setq org-latex-pdf-process
  ;;       '("xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
  ;;         "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
  ;;         "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
  ;;         "rm -fr %b.out %b.log %b.tex auto"
  ;;         ))

  ;; (setq org-latex-default-packages-alist
  ;;	  (remove '("AUTO" "inputenc" t) org-latex-default-packages-alist))

  (setq
   org-export-preserve-breaks t
   org-latex-caption-above nil ;; 表格等标题置于下方
   org-export-latex-listings t
   org-export-latex-tables-column-borders t ;; 表格边框
   org-latex-image-default-width "0.5\\textwidth"
   org-latex-toc-command "\\tableofcontents\n\\clearpage\n" ;; 目录自动分页
   ;; org-latex-pdf-process  '("xelatex -shell-escape -interaction nonstopmode -output-directory %o %f")
   org-latex-pdf-process
   '("xelatex --shell-escape -interaction nonstopmode -output-directory %o %f"
     "xelatex --shell-escape -interaction nonstopmode -output-directory %o %f"
     "xelatex --shell-escape -interaction nonstopmode -output-directory %o %f")

   ;; org-latex-pdf-process '("/Library/TeX/texbin/latexmk -pdflatex='xelatex -shell-escape -interaction nonstopmode' -pdf -f %f")

   ;; org-latex-pdf-process   '("/Library/TeX/texbin/latexmk -pdflatex='pdflatex -interaction nonstopmode' -pdf -bibtex -f %f")
   ;; (setq org-latex-pdf-process '("/Library/TeX/texbin/latexmk -e '$latex=q/uplatex %S/' -e '$bibtex=q/upbibtex %B/' -e '$biber=q/biber --bblencoding=utf8 -u -U --output_safechars %B/' -e '$makeindex=q/upmendex -o %D %S/' -e '$dvipdf=q/dvipdfmx -o %D %S/' -norc -gg -pdfdvi %f"))
   ;; (setq org-latex-pdf-process '("/Library/TeX/texbin/latexmk -e '$latex=q/uplatex %S/' -e '$bibtex=q/upbibtex %B/' -e '$biber=q/biber --bblencoding=utf8 -u -U --output_safechars %B/' -e '$makeindex=q/upmendex -o %D %S/' -e '$dvips=q/dvips -Ppdf -z -f %S | convbkmk -u > %D/' -e '$ps2pdf=q/ps2pdf %S %D/' -norc -gg -pdfps %f"))
   ;; (setq org-latex-pdf-process '("/Library/TeX/texbin/latexmk -e '$pdflatex=q/platex-ng %S/' -e '$bibtex=q/upbibtex %B/' -e '$biber=q/biber --bblencoding=utf8 -u -U --output_safechars %B/' -e '$makeindex=q/upmendex -o %D %S/' -norc -gg -pdf %f"))
   ;; (setq org-latex-pdf-process '("/Library/TeX/texbin/latexmk -e '$pdflatex=q/pdflatex %S/' -e '$bibtex=q/bibtex %B/' -e '$biber=q/biber --bblencoding=utf8 -u -U --output_safechars %B/' -e '$makeindex=q/makeindex -o %D %S/' -norc -gg -pdf %f"))
   ;; org-latex-pdf-process
   ;; '("/Library/TeX/texbin/latexmk -e '$pdflatex=q/lualatex %S/' -e '$bibtex=q/upbibtex %B/' -e '$biber=q/biber --bblencoding=utf8 -u -U --output_safechars %B/' -e '$makeindex=q/upmendex -o %D %S/' -norc -gg -pdf %f")
   ;; (setq org-latex-pdf-process '("/Library/TeX/texbin/latexmk -e '$pdflatex=q/luajitlatex %S/' -e '$bibtex=q/upbibtex %B/' -e '$biber=q/biber --bblencoding=utf8 -u -U --output_safechars %B/' -e '$makeindex=q/upmendex -o %D %S/' -norc -gg -pdf %f"))
   ;; (setq org-latex-pdf-process '("/Library/TeX/texbin/latexmk -e '$pdflatex=q/xelatex %S/' -e '$bibtex=q/upbibtex %B/' -e '$biber=q/biber --bblencoding=utf8 -u -U --output_safechars %B/' -e '$makeindex=q/upmendex -o %D %S/' -norc -gg -pdf %f"))
   org-file-apps
   ;; '(("pdf" . "/usr/bin/open -a PDFGuru\\ Pro.app %s"))
   '(("pdf" . "/usr/bin/open -a Preview.app %s")
     ;; ("pdf" . "/usr/bin/open -a PDF\\ Reader\\ X\\ Pro.app %s")
     ;; ("pdf" . "/usr/bin/open -a /Applications/Skim.app %s")
     )
   ;; org-latex-toc-command "\\tableofcontents\\newpage"
   ;; org-latex-pdf-process
   ;;    '("xelatex -shell-escape -interaction nonstopmode %f"
   ;;      "xelatex -shell-escape -interaction nonstopmode %f"
   ;;      "xelatex -shell-escape -interaction nonstopmode %f")
   ;; org-latex-pdf-process
   ;; '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
   ;;   "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
   ;;   "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
   ;;   "rm -fr %b.out %b.log %b.tex auto")
   ;; org-latex-pdf-process '(
   ;;                         "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
   ;;                         "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
   ;;                         "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
   ;;                         "rm -fr %b.out %b.log %b.tex auto"
   ;;                         )
   org-latex-default-class "article")
  ;; ;; auto save all org files after doing a common action
  ;; (advice-add 'org-agenda-quit      :before #'org-save-all-org-buffers)
  ;; ;; (advice-add 'org-agenda-schedule  :after #'org-save-all-org-buffers)
  ;; (advice-add 'org-agenda-todo      :after #'org-save-all-org-buffers)
  ;; (advice-add 'org-agenda-refile    :after #'org-save-all-org-buffers)
  ;; (advice-add 'org-agenda-clock-in  :after #'org-save-all-org-buffers)
  ;; ;; (advice-add 'org-agenda-clock-out :after #'org-save-all-org-buffers)

  ;; ;; (advice-add 'org-deadline         :after #'org-save-all-org-buffers)
  ;; ;; (advice-add 'org-schedule         :after #'org-save-all-org-buffers)
  ;; ;; (advice-remove 'org-schedule  #'org-save-all-org-buffers)

  ;; (advice-add 'org-todo             :after #'org-save-all-org-buffers)
  ;; (advice-add 'org-refile           :after #'org-save-all-org-buffers)
  ;; ;; (advice-add 'org-clock-in         :after #'org-save-all-org-buffers)
  ;; ;; (advice-add 'org-clock-out        :after #'org-save-all-org-buffers)
  ;; (advice-add 'org-store-log-note   :after #'org-save-all-org-buffers)

  ;; (advice-add 'org-deadline       :after (η #'org-save-all-org-buffers))
  ;; (advice-add 'org-schedule       :after (η #'org-save-all-org-buffers))
  ;; (advice-add 'org-store-log-note :after (η #'org-save-all-org-buffers))
  ;; (advice-add 'org-todo           :after (η #'org-save-all-org-buffers))
  ;; (advice-add 'org-refile         :after (η #'org-save-all-org-buffers))
  ;; (advice-add 'org-clock-in       :after (η #'org-save-all-org-buffers))
  ;; (advice-add 'org-clock-out      :after (η #'org-save-all-org-buffers))
  ;; (advice-add 'org-agenda-todo    :after (η #'org-save-all-org-buffers))
  ;; (advice-add 'org-agenda-refile  :after (η #'org-save-all-org-buffers))
  ;; (advice-add 'org-agenda-clock-in :after (η #'org-save-all-org-buffers))
  ;; (advice-add 'org-agenda-quit :after (η #'org-save-all-org-buffers))
  ;; (setq org-modules (append org-modules '(org-drill)))
  (dolist (command '(org-agenda-archive
		     org-agenda-archive-default
		     org-sort-entries
		     org-roam-refile
		     org-roam-extract-subtree
		     org-agenda-quit
		     org-agenda-todo
		     org-agenda-refile
		     org-agenda-clock-in
		     org-agenda-clock-out
		     org-deadline
		     org-schedule
		     org-todo
		     org-refile
		     org-clock-in
		     org-clock-out
		     org-clock-report
		     org-clock-cancel
		     org-archive-subtree
		     org-archive-subtree-default
		     org-agenda-set-effort
		     org-cut-special
		     org-pomodoro))
    (advice-add command :after (η #'org-save-all-org-buffers))
    ;; (advice-add command :after  #'org-save-all-org-buffers)
    ))

(bind-key "C-c l" #'org-store-link)
(bind-key "C-c c" #'org-capture)
(bind-key "C-c a" #'org-agenda)

(use-package org-contrib
  :after org
  :straight t)
#+end_src

** org-download

#+begin_src emacs-lisp
(use-package org-download
  :straight t
  :ensure t
  :hook ((org-mode dired-mode) . org-download-enable)
  :commands (org-download-enable
               org-download-yank
               org-download-screenshot
	       )
  :config
  (defun my-org-download-method (link)
      (let ((filename
             (file-name-nondirectory
              (car (url-path-and-query
                    (url-generic-parse-url link)))))
            (dirname (concat "imgs/" (file-name-sans-extension (buffer-name)))))
        (unless (file-exists-p dirname)
          (make-directory dirname))
        (expand-file-name filename dirname)))
    (setq org-download-method 'my-org-download-method)
  ;; (setq-default org-download-image-dir "~/Pictures/foo/")
  ;; (setq-default org-download--dir "~/Pictures/foo/")

  ;; (defun +org-download-method (link)
  ;;   (org-download--fullname (org-link-unescape link)))
  ;; (setq org-download-method '+org-download-method)

  ;; (setq org-download-annotate-function (lambda (_link) "")
  ;;       org-download-method 'attach
  ;;       org-download-screenshot-method "screencapture -i %s")
  ;; (setq org-download-method 'directory)
  ;; (setq org-download-image-dir "./images/")
    (setq org-download-method 'my-org-down-method)
  (setq org-download-heading-lvl nil)
  (setq org-download-timestamp "%Y%m%d-%H%M%S_")
  (setq org-image-actual-width 300)
  (setq  org-download-image-attr-list '("#+ATTR_HTML: :width 80% :align center"))
  :bind
  ("<f6>" . org-download-screenshot))
#+end_src

** org-agenda
#+begin_src emacs-lisp
(use-package org-agenda
  :ensure nil
  :straight nil
  :after (org hydra)
  :hook (org-agenda-finalize . org-agenda-to-appt)
  :config
  ;; ;; update appt list per 10 minutes
  ;; (run-at-time nil 600 'org-agenda-to-appt)
  :init
  (unless (fboundp 'native-comp-available-p)
    ;; Fix `void-function native-comp-available-p`
    (defun native-comp-available-p ()
      nil))
  :custom
  ;; appt
  (appt-display-format 'window)
  (appt-disp-window-function
   (lambda(min-to-app new-time msg)(terminal-notify "Reminder" (format "%s" msg))))
  (appt-display-interval 1) ;; 每过1分钟提醒一次
  (appt-message-warning-time 5) ;; set appt waring to 15 minutes prior to appointment
  ;; (appt-display-duration 20) ;; 这里已经被notify-send接管了，所以此处持续时间无效)
  (appt-display-mode-line t) ;; show in the modeline
  ;; (org-agenda-files `(,org-directory))
  (org-agenda-insert-diary-extract-time t)
  (org-agenda-compact-blocks t)
  (org-agenda-block-separator nil)
  (org-agenda-sticky t)
  ;; Do not dim blocked tasks
  (org-agenda-dim-blocked-tasks nil)
  ;; Compact the block agenda view
  (org-agenda-compact-blocks t)
  ;; holidays
  (org-agenda-include-diary t)
  (org-agenda-include-deadlines t)
  (org-agenda-todo-ignore-deadlines nil)
  (org-agenda-follow-indirect t)
  (org-agenda-inhibit-startup t)
  (org-agenda-show-all-dates t)
  (org-agenda-time-leading-zero t)
  (org-agenda-start-with-log-mode t)
  (org-agenda-start-with-clockreport-mode t)
  (org-agenda-hide-tags-regexp ":\\w+:")
  (org-agenda-todo-ignore-with-date nil)
  (org-agenda-todo-ignore-deadlines 'far)
  ;; (org-agenda-todo-ignore-scheduled 'all)
  (org-agenda-todo-ignore-timestamp nil)
  (org-agenda-skip-deadline-if-done t)
  (org-agenda-skip-scheduled-if-done t)
  (org-agenda-skip-timestamp-if-done t)
  (org-agenda-skip-unavailable-files t)
  (org-agenda-skip-scheduled-delay-if-deadline t)
  (org-agenda-skip-scheduled-if-deadline-is-shown t)
  (org-agenda-skip-additional-timestamps-same-entry t)
  (org-agenda-text-search-extra-files '(agenda-archives))
  (org-agenda-clockreport-parameter-plist
   '(:link t :maxlevel 5 :fileskip0 t :compact nil :narrow 80))
  (org-agenda-columns-add-appointments-to-effort-sum t)
  (org-agenda-restore-windows-after-quit t)
  (org-agenda-window-setup 'current-window)
  ;; starts from Monday
  (org-agenda-start-on-weekday 1)
  (org-agenda-use-time-grid t)
  (org-agenda-timegrid-use-ampm nil)
  (org-agenda-search-headline-for-time nil)
  (org-agenda-prefix-format
   '((agenda . " %i %-12:c%?-12t% s%b")
     (todo . " %i %b")
     ;; (todo . "[%-4e] % t % s %?-17b")
     ;;(tags . "[%-4e] %-17(org-format-outline-path (org-get-outline-path))")
     ;; (search . "[%-4e] %?-17b")
     )
   )
  (org-agenda-custom-commands `(
				("1" "Events" agenda "display deadlines and exclude scheduled"
				 ((org-agenda-span 'month)
				  (org-agenda-time-grid nil)
				  (org-agenda-show-all-dates nil)
				  (org-agenda-entry-types '(:deadline)) ;; this entry excludes :scheduled
				  (org-deadline-warning-days 0)))
				("2" "Show Work GTD & meeting appointment" todo ""
				 ((org-agenda-files '(,+org-capture-work-gtd-file
						      ,+org-capture-work-meeting-file))))))
  (org-id-locations-file (expand-file-name "org-id-locations" poly-cache-dir))
  :config
  (appt-activate 1)
  ;; (org-agenda-to-appt)
  )
#+end_src
** Write codes in org-mode
#+begin_src emacs-lisp
  (use-package org-src
  :straight nil
  :ensure nil
  :after org
  :hook (org-babel-after-execute . org-redisplay-inline-images)
  :bind (:map org-src-mode-map
              ;; consistent with separedit/magit
              ("C-c C-c" . org-edit-src-exit))
  :custom
  (org-src-fontify-natively t)
  (org-src-tab-acts-natively t)
  (org-src-preserve-indentation t)
  (org-src-window-setup 'current-window)
  (org-confirm-babel-evaluate nil)
  (org-edit-src-content-indentation 0)
  (org-src-lang-modes '(("C"      . c)
                        ("C++"    . c++)
                        ("bash"   . sh)
                        ("cpp"    . c++)
                        ("dot"    . graphviz-dot)
                        ("elisp"  . emacs-lisp)
                        ("ocaml"  . tuareg)
                        ("shell"  . sh)
                        ("sqlite" . sql)))
  (org-babel-load-languages '((awk        . t)
                              (C          . t)
                              (calc       . t)
                              (dot        . t)
                              (emacs-lisp . t)
                              (eshell     . t)
                              (gnuplot    . t)
                              (ocaml      . t)
                              (python     . t)
                              (shell      . t)
                              (sql        . t))))
;; (use-package ob
;;   :straight nil
;;   :after org
;;   :config
;;   (require 'ob-clojure)
;;   (setq org-babel-clojure-backend 'cider))
#+end_src

** org-tempo

#+begin_src emacs-lisp
    (use-package org-tempo
      :straight nil
      :hook (org-mode . (lambda()
			  (require 'org-tempo)))
      )
#+end_src

** org-habbit
#+begin_src emacs-lisp
       (use-package org-habit
         :straight nil
         :ensure nil
         :after org
         :custom
         (org-habit-show-habits t)
         (org-habit-show-all-today t))
#+end_src
** task
#+begin_src emacs-lisp
(use-package ox-taskjuggler
  :straight (:type built-in)
  :after (org osx)
  :custom
  (org-taskjuggler-process-command  "tj3 --silent --no-color --output-dir %o %f && open %o/Plan.html")
  :init
  (setq org-taskjuggler-default-global-properties
	"shift s39 \"Full time shift\" {
	   workinghours mon-fri 9:00-12:00,13:00-19:00
	}")
  (setq org-duration-units `(("min" . 1)
			     ("h" . 60)
			     ("d" . ,(* 60 8))
			     ("w" . ,(* 60 8 5))
			     ("m" . ,(* 60 8 5 4))
			     ("y" . ,(* 60 8 5 4 10))))
  (org-duration-set-regexps)
  :hook (org-mode . (lambda()
		      (require 'ox-taskjuggler)))
  :config
  (add-to-list 'org-export-backends 'taskjuggler)
  ;; (require 'ox-taskjuggler)
  ;; (require 'ox-taskjuggler)
  ;; (require 'taskjuggler-mode)
  ;; (setq org-export-taskjuggler-target-version 3.6
  ;;	org-export-taskjuggler-project-tag "project"
  ;;	org-export-taskjuggler-resource-tag "resource"
  ;;	org-export-taskjuggler-default-project-duration 16256
  ;;	org-export-taskjuggler-default-global-properties "rversion")
  ;; ;; (setq org-taskjuggler-default-reports '("include \"/Users/chenlong/.emacs.d/lisp/reports.tji\""))
  )
#+end_src

** bullet
#+begin_src emacs-lisp
(use-package org-bullets
  :straight t
  :commands (org-bullets-mode org-bullets)
  :hook (org-mode . org-bullets-mode)
  :custom
  (org-bullets-bullet-list '("⊢" "⋮" "⋱" "⋱" "⋱"))
  ;; (setq org-bullets-bullet-list '("🐳" "🐬" "🐠" "🐟" "🐤"))
  ;; (setq )
  ;; (setq org-bullets-bullet-list '("①" "②" "③" "④" "⑤" "⑥" "⑦" "⑧" "⑨"))
  )
#+end_src

** kanban
#+begin_src emacs-lisp
(use-package org-kanban
  :straight t
  :commands (org-kanban/initialize-at-end)
  :after org
  :config
  (setq-default org-kanban/layout '("..." . 30))
  )
#+end_src

** org-crypt
#+begin_src emacs-lisp
(use-package org-crypt
  :straight nil
  :after org
  :config
  (org-crypt-use-before-save-magic)
  (setq org-tags-exclude-from-inheritance (quote ("crypt")))
  ;; (setq org-crypt-disable-auto-save 'encrypt)
  (setq org-crypt-disable-auto-save t)
  ;; GPG key to use for encryption
  ;; Either the Key ID or set to nil to use symmetric encryption.
  (setq org-crypt-key "FC6BDB92CD5BEB22")
  :bind
  (:map org-mode-map
	("C-c e" . org-encrypt-entry)
	("C-c E" . org-encrypt-entries)
	("C-c d" . org-decrypt-entry)
	("C-c D" . org-decrypt-entries)
	;; ("C-c I" . org-insert-epa-file-local-variables)
	))
#+end_src
** Toggle markup visibility with visible mode
#+begin_src emacs-lisp
  (with-eval-after-load "org"
    (define-key org-mode-map (kbd "C-c v") 'visible-mode))
#+end_src

** org-dashboard
#+begin_src emacs-lisp
(use-package org-dashboard
  :straight t
  :after org
  )
#+end_src

#+begin_src emacs-lisp
(defun org-unlinkify ()
  "Replace an org-link with the path, or description."
  (interactive)
  (let ((eop (org-element-context)))
    (when (eq (org-element-type eop) 'link)
      (save-excursion
	(let* ((start (org-element-property :begin eop))
	       (end (org-element-property :end eop))
	       (contents-begin (org-element-property :contents-begin eop))
	       (contents-end (org-element-property :contents-end eop))
	       (path (org-element-property :path eop))
	       (desc (and contents-begin
			  contents-end
			  (buffer-substring-no-properties contents-begin contents-end))))
	  (setf (buffer-substring-no-properties start end) (or desc path)))))))

(defalias 'org-delinkify 'org-unlinkify)

(defun org-refile-and-link ()
  "Refile heading, adding a link to the new location.
Prefix arguments are interpreted by `org-refile'."
  (interactive)
  (when (member current-prefix-arg '(3 (4) (16)))
    (user-error "Linking is incompatible with that prefix argument"))
  (let ((heading  (org-get-heading t t))
	(orig-file (buffer-file-name)))
    (call-interactively #'org-refile)
    (let* ((refile-file
	    (bookmark-get-filename
	     (assoc (plist-get org-bookmark-names-plist :last-refile)
		    bookmark-alist)))
	   (same-file (string= orig-file refile-file))
	   (link (if same-file
		     (concat "*" heading)
		   (concat refile-file "::*" heading)))
	   (desc heading))
      (open-line 1)
      (insert (org-make-link-string link desc)))))

(defun my-org-insert-last-stored-link (arg)
  "Insert the last link stored in `org-stored-links' like
`org-insert-last-stored-link', but without a trailing newline."
  (interactive "p")
  (org-insert-all-links arg "" ""))

(bind-key [remap org-insert-last-stored-link]  #'my-org-insert-last-stored-link 'org-mode-map)
#+end_src

** org-present

#+begin_src emacs-lisp
(use-package org-present
  :straight t
  :after org
  :config
  (add-hook 'org-present-mode-hook
            (lambda ()
	      (org-present-big)
	      (org-display-inline-images)
	      ;; (global-linum-mode -1)
	      (global-hl-line-mode -1)))
  (add-hook 'org-present-mode-quit-hook
            (lambda ()
	      (org-present-small)
	      (org-remove-inline-images)
	      ;; (global-linum-mode)
	      (global-hl-line-mode 1))))
#+end_src

** others

#+BEGIN_SRC emacs-lisp
  (use-package org-ref
    :straight t
    :after org
    :config
    (setq
     org-latex-prefer-user-labels t
     ;; open pdf inside emacs
     bibtex-completion-pdf-open-function 'find-file
     ;; open pdf outside emacs
     ;; bibtex-completion-pdf-open-function 'org-open-file
     org-ref-get-pdf-filename-function 'org-ref-get-pdf-filename-helm-bibtex
     ;; reftex-default-bibliography (list zot_bib)
     ;; org-ref-default-bibliography (list zot_bib)
     ;; org-ref-bibliography-notes (concat org_notes "notes.org")
     org-ref-note-title-format "* TODO %y - %t\n :PROPERTIES:\n  :Custom_ID: %k\n  :NOTER_DOCUMENT: %F\n :ROAM_KEY: cite:%k\n  :AUTHOR: %9a\n  :JOURNAL: %j\n  :YEAR: %y\n  :VOLUME: %v\n  :PAGES: %p\n  :DOI: %D\n  :URL: %U\n :END:\n\n"
     ;; org-ref-notes-directory org_notes
     org-ref-notes-function 'orb-edit-notes))

(use-package bibtex
  :straight t
  :after org
  :config
  (setq
   ;; org-ref-completion-library 'org-ref-ivy-cite
   ;; bibtex-completion-notes-path org_notes
   ;; bibtex-completion-bibliography zot_bib
   bibtex-completion-pdf-field "file"
   bibtex-completion-additional-search-fields '(tags)
   bibtex-completion-notes-template-multiple-files (concat
						    "#+TITLE: ${title}\n"
						    "#+ROAM_KEY: cite:${=key=}\n"
						    "* TODO Notes\n"
						    ":PROPERTIES:\n"
						    ":Custom_ID: ${=key=}\n"
						    ":NOTER_DOCUMENT: %(orb-process-file-field \"${=key=}\")\n"
						    ":AUTHOR: ${author-abbrev}\n"
						    ":JOURNAL: ${journaltitle}\n"
						    ":DATE: ${date}\n"
						    ":YEAR: ${year}\n"
						    ":DOI: ${doi}\n"
						    ":URL: ${url}\n"
						    ":END:\n\n"
						    )
   ;; bibtex-completion-display-formats
   ;;     '((article       . "${author:36} ${title:*} ${journal:40} ${year:4} ${=has-pdf=:1}${=has-note=:1} ${=type=:3}")
   ;;       (inbook        . "${author:36} ${title:*} Chapter ${chapter:32} ${year:4} ${=has-pdf=:1}${=has-note=:1} ${=type=:3}")
   ;;       (incollection  . "${author:36} ${title:*} ${booktitle:40} ${year:4} ${=has-pdf=:1}${=has-note=:1} ${=type=:3}")
   ;;       (inproceedings . "${author:36} ${title:*} ${booktitle:40} ${year:4} ${=has-pdf=:1}${=has-note=:1} ${=type=:3}")
   ;;       (t             . "${author:36} ${title:*} ${year:4} ${=has-pdf=:1}${=has-note=:1} ${=type=:3}"))
   ))
#+END_SRC

** org-noter
#+begin_src emacs-lisp
(use-package org-noter
  :after (org pdf-tools)
  :straight t
  :config
  (setq
   ;; The WM can handle splits
   ;; org-noter-notes-window-location 'other-frame
   ;; todo frame jump
   ;; Please stop opening frames
   ;; org-noter-always-create-frame nil
   org-noter-always-create-frame nil
   org-noter-auto-save-last-location t
   ;; org-noter-notes-window-location 'other-frame
   ;; I want to see the whole file
   org-noter-hide-other nil
   ;; Everything is relative to the main notes file
   ;; org-noter-notes-search-path (list org_notes)
   ))
#+end_src

** Clocking

#+begin_src emacs-lisp
(use-package org-clock
  :straight nil
  ;; ensure we always run org-clock-persistence-insinuate below
  :demand t
  :after (org alert)
  :custom
  (org-clock-persist 'history)
  (org-clock-persist-file (expand-file-name "org-clock-save.el" poly-cache-dir))
  (org-clock-sound t)
  (org-clock-in-resume t)
  (org-clock-idle-time 10)
  (org-clock-into-drawer t)
  (org-clock-out-when-done t)
  (org-clock-history-length 20)
  (org-clock-mode-line-total 'today)
  (org-clock-display-default-range 'thisweek)
  (org-clock-in-switch-to-state "DOING")
  ;; (org-clock-out-switch-to-state "WAIT")
  (org-clock-out-remove-zero-time-clocks t)
  (org-clock-report-include-clocking-task t)
  (org-clock-clocked-in-display 'mode-line)
  ;; (org-clock-clocked-in-display nil)
  :config
  (org-clock-persistence-insinuate)
  (setq org-show-notification-handler
	'(lambda (m)
	   (let ((ring-bell-function nil))
	     (org-clock-play-sound org-clock-sound)
	     (alert m :timeout 1200 :title "Org Clock Notify" :severity 'high))))
  :bind
  ("C-c C-x C-i" . org-clock-in)
  ("C-c C-x C-o" . org-clock-out)
  ("C-c C-x C-x" . org-clock-in-last))

(use-package org-clock-budget
  :straight (org-clock-budget
             :host github
             :repo "Fuco1/org-clock-budget"
             )
  :commands (org-clock-budget-report)
  :init
  (defun my-buffer-face-mode-org-clock-budget ()
    "Sets a fixed width (monospace) font in current buffer"
    (interactive)
    ;; (setq buffer-face-mode-face '(:family "Iosevka" :height 1.0))
    (buffer-face-mode)
    (setq-local line-spacing nil))
  :config
  (add-hook 'org-clock-budget-report-mode-hook (lambda()
						 (progn
						   (toggle-truncate-lines 1)
						   (my-buffer-face-mode-org-clock-budget)
						   )
						 ))
  )

;; (use-package secretaria
;;   :straight t
;;   :after (alert f s)
;;   :custom
;;   (secretaria-clocked-task-save-file
;;    (expand-file-name "secretaria-clocked-task" poly-cache-dir))
;;   ;; remind me about every 10 minutes
;;   (secretaria-clocked-in-reminder-every-minutes 10)
;;   (secretaria-today-unknown-time-appt-remind-every 10)
;;   :config
;;   ;; use this for getting a reminder every 30 minutes of those tasks scheduled
;;   ;; for today and which have no time of day defined.
;;   (add-hook 'after-init-hook #'secretaria-unknown-time-always-remind-me))

;; (use-package org-mru-clock
;;   :straight t
;;   :after (org org-clock)
;;   :bind (("C-c C-x C-j" . org-clock-goto)
;;          ("C-c C-x C-k" . org-mru-clock-in))
;;   :custom
;;   (org-mru-clock-how-many 100)
;;   (org-mru-clock-keep-formatting t)
;;   (org-mru-clock-predicate nil))

(defvar poly/previously-clocking '())

(defun poly/temporarily-clock-out ()
  (interactive)
  (save-window-excursion
    (if (org-clocking-p)
        (progn
          (org-clock-goto)
          (add-to-list 'poly/previously-clocking
		       (cons org-clock-heading (org-id-get-create)))
          (org-clock-out))
      (message "No clock is active now.")
      )))

(defun poly/mark-clocking-task-as-todo-and-clock-out ()
  (interactive)
  (save-window-excursion
    (if (org-clocking-p)
        (progn
          (org-clock-goto)
          (add-to-list 'poly/previously-clocking
		       (cons org-clock-heading (org-id-get-create)))
          (org-todo 'todo)
          (org-clock-out)
          (save-buffer))
      (message "No clock is active now."))))

(defun poly/resume-previous-clock (id)
  (interactive)
  (save-window-excursion
    (org-id-goto id)
    (org-clock-in)
    (poly/remove-previous-clock id)))

(defun poly/remove-previous-clock (id)
  (when (not (null id))
    (setq poly/previously-clocking
          (--remove (s-equals? id (cdr it)) poly/previously-clocking))))

(defun poly/mark-clocking-task-as-done ()
  "Find current clocking task and mark it as done."
  (interactive)
  (save-window-excursion
    (if (org-clocking-p)
        (progn
          (org-clock-goto)
          (org-todo 'done)
          (poly/remove-previous-clock (org-id-get))
          (save-buffer))
      (message "No clock is active now."))))

(bind-key "C-c C-x C-d" 'poly/mark-clocking-task-as-done)
(bind-key "C-c C-x C-d" 'poly/mark-clocking-task-as-done org-mode-map)
#+end_src

** org-roam

#+begin_src emacs-lisp
;; https://github.com/iecaser/Configurations/blob/a7e61c25c49556b33d7888599a853da9d4c9cb95/.doom.d/note.el
;; https://www.orgroam.com/manual/Installation-_00281_0029.html#Installation-_00281_0029
(use-package org-roam
  :straight t
  ;; ;; :straight (:files (:defaults "extensions/*"))
  ;; :straight (:host github :repo "org-roam/org-roam"
  ;; 		     :files (:defaults "extensions/*"))
  :ensure t
  :hook
  (after-init . org-roam-mode)
  :init
  (setq org-roam-v2-ack t)
  :commands (org-roam-buffer-toggle-display
             org-roam-find-file
             org-roam-graph
             org-roam-insert
             org-roam-switch-to-buffer
             org-roam-dailies-date
             org-roam-dailies-today
             org-roam-dailies-tomorrow
             org-roam-dailies-yesterday)
  :after org
  :custom
  (org-roam-file-exclude-regexp ".pdf$|.tex$|.bib$|.html$|.log$|.out$|.xml$|agendas.org$")
  (org-roam-verbose nil)  ; https://youtu.be/fn4jIlFwuLU
  (org-roam-buffer-no-delete-other-windows t); make org-roam buffer sticky
  ;; org-roam-graph-viewer "google-chrome-stable"
  (org-roam-completion-system 'default)
  (org-roam-completion-everywhere t)
  (org-roam-db-location (expand-file-name "org-roam.db" poly-cache-dir))
  :config
  (setq org-roam-directory (expand-file-name "Library/Mobile Documents/iCloud~com~appsonthemove~beorg/Documents/org/beorg/" "~"))
  ;; For org-roam to update LAST_MODIFIED field
  (require 'time-stamp)
  (add-hook 'write-file-functions 'time-stamp) ; update when saving
  ;; for org-roam-buffer-toggle
  ;; Recommendation in the official manual
  (add-to-list 'display-buffer-alist
	       '("\\*org-roam\\*"
                 (display-buffer-in-direction)
                 (direction . right)
                 (window-width . 0.33)
                 (window-height . fit-window-to-buffer)))

  ;; #+LATEX_HEADER: \\addbibresource{~/Cloud/Documents/bib/zotLib.bib}
  ;;     (setq org-roam-capture-templates
  ;; 	  (quote
  ;; 	   (("d" "default" plain
  ;; 		 (function org-roam-capture--get-point)
  ;; 		 "%?" :file-name "%<%Y%m%d%H%M%S>-${slug}"
  ;; 		 :head "#+LATEX_HEADER: \\usepackage[citestyle=authoryear-icomp,bibstyle=authoryear, hyperref=true,backref=true,maxcitenames=3,url=true,backend=bibtex,natbib=true] {biblatex}
  ;; #+SETUPFILE: ~/.config/emacs/.local/etc/org-html-themes/setup/theme-readtheorg.setup
  ;; #+TITLE: ${title}
  ;; #+CREATED: %u
  ;; Time-stamp: <>
  ;; - tags ::
  ;; " :unnarrowed t))))

  (setq org-roam-capture-templates
	'((
	   "d" "default" plain
	   "%?"
	   :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+date: %U\n")
	   :unnarrowed t
	   )
          (
	   "l" "programming language" plain
	   "* Characteristics:\n\n- Family: %?\n- Inspired by: \n\n* Reference:\n\n"
	   :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
	   :unnarrowed t
	   )
          ("b" "book notes" plain
	   "\n* Source\n\nAuthor: %^{Author}\nTitle: ${title}\nYear: %^{Year}\n\n* Summary\n\n%?"
	   :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
	   :unnarrowed t
	   )
          ("p" "project" plain
	   "* Goals\n\n%?\n\n* Tasks\n\n** TODO Add initial tasks\n\n*Dates\n\n"
	   :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+filetags:Project")
	   :unnarrowed t
	   ))
	org-roam-dailies-capture-templates '(
                                             (
					      "d" "default" entry
					      "* %<%I:%M %p>: %?"
					      :if-new (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n")
					      ))
	;; ;; optimise local variable evaluate and babel
	;; enable-local-variables :all
	;; ;; remote zsh related
	;; shell-prompt-pattern '"^[^#$%>\n]*~?[#$%>] *"
	)

  ;; ;; Normally, the org-roam buffer doesn't open until you explicitly call
  ;; ;; `org-roam'. If `+org-roam-open-buffer-on-find-file' is non-nil, the
  ;; ;; org-roam buffer will be opened for you when you use `org-roam-find-file'
  ;; ;; (but not `find-file', to limit the scope of this behavior).
  ;; (add-hook 'find-file-hook
  ;; 	    (defun +org-roam-open-buffer-maybe-h ()
  ;; 	      (and +org-roam-open-buffer-on-find-file
  ;; 		   (memq 'org-roam-buffer--update-maybe post-command-hook)
  ;; 		   (not (window-parameter nil 'window-side)) ; don't proc for popups
  ;; 		   (not (eq 'visible (org-roam-buffer--visibility)))
  ;; 		   (with-current-buffer (window-buffer)
  ;; 		     (org-roam-buffer--get-create)))))
  (add-hook 'org-roam-buffer-prepare-hook #'hide-mode-line-mode)
  (require 'org-roam-protocol)
  (require 'org-roam-dailies)
  (org-roam-setup) ;; can cause failure of dump
  ;; :bind (("C-c z l" . org-roam-buffer-toggle)
  ;;        ("C-c z f" . org-roam-node-find)
  ;;        ("C-c z i" . org-roam-node-insert)
  ;;        ("C-c z r" . org-roam-node-random)
  ;;        :map org-mode-map
  ;;        (("C-M-i" . completion-at-point)
  ;;         ("C-c z t" . org-roam-tag-add)
  ;;         ("C-c z a" . org-roam-alias-add)
  ;;         ("C-c z I" . org-roam-node-insert-immediate))
  ;;        :map org-roam-dailies-map
  ;;        ("Y" . org-roam-dailies-capture-yesterday)
  ;;        ("T" . org-roam-dailies-capture-tomorrow))
  ;; :bind-keymap
  ;; ("C-c z d" . org-roam-dailies-map)
  )


(use-package org-roam-ui
  :straight (:type git :host github :repo "org-roam/org-roam-ui" :files ("*.el" "out"))
  :after org-roam
  :custom
  (org-roam-ui-sync-theme t)
  (org-roam-ui-follow t)
  (org-roam-ui-update-on-save t)
  (org-roam-ui-open-on-start t))

;; required by org-roam-ui
(use-package websocket
  :straight t)

;; (unless (server-running-p)
;;   (org-roam-server-mode))
#+end_src

** Clock

#+begin_src emacs-lisp
(defun poly/org-pomodoro-clocking-info()
  (interactive)
  (when (org-pomodoro-active-p)
    (let ((s (cl-case org-pomodoro-state
               (:pomodoro
		(propertize org-pomodoro-format 'face 'org-pomodoro-mode-line))
               (:overtime
		(propertize org-pomodoro-overtime-format
                            'face 'org-pomodoro-mode-line-overtime))
               (:short-break
		(propertize org-pomodoro-short-break-format
                            'face 'org-pomodoro-mode-line-break))
               (:long-break
		(propertize org-pomodoro-long-break-format
                            'face 'org-pomodoro-mode-line-break))))
	  (clock-is-active (org-clock-is-active)))
      (let ((pomo-status (when (and (org-pomodoro-active-p) (> (length s) 0))
			   (string-trim (concat "[" (format s (org-pomodoro-format-seconds)) "] "))))
	    (pomo-state (string-trim (format s ""))))
	(list pomo-state pomo-status (string-trim (org-clock-get-clock-string)))))))

(defun poly/org-clock-info()
  (when (org-clock-is-active)
    (let ((clock-string (string-trim (org-clock-get-clock-string)))
	  (current-clock-time
	   (let ((currently-clocked-time
		  (floor (org-time-convert-to-integer
			  (time-since org-clock-start-time)) 60)))
	     (org-duration-from-minutes currently-clocked-time))))
      (list nil (concat "[" current-clock-time "]") clock-string))))

(defun poly/org-clock-tick(&optional event)
  (interactive)
  (if (not event)
      (let* ((clock-info
	      (cond((org-pomodoro-active-p) (poly/org-pomodoro-clocking-info))
		   ((org-clock-is-active) (poly/org-clock-info))
		   (t (list nil nil "No Task"))))
	     (state (car clock-info))
	     (status (nth 1 clock-info))
	     (clock-string (nth 2 clock-info)))
	(if clock-string
            (tl/open-hammerspoon-url "Clocking" "status" status "state" state "clockString" clock-string)
	  (tl/open-hammerspoon-url "Clocking" "status" status "state" state)))
    (cond ((string= event "org-clock-out")
	   (unless (org-pomodoro-active-p)
	     (tl/open-hammerspoon-url "Clocking" "status" "No Task")))
	  ((string= event "org-pomodoro-killed-or-break-finished")
	   (tl/open-hammerspoon-url "Clocking" "status" "No Task")))))

(use-package org-pomodoro
  :straight t
  :ensure t
  :after org
  :commands org-pomodoro
  :custom
  (org-pomodoro-format "Pomo %s")
  (org-pomodoro-short-break-format "Break %s")
  (org-pomodoro-long-break-format "Long break %s")
  (org-pomodoro-long-break-length 10)
  (org-pomodoro-start-sound-p nil)
  (org-pomodoro-ticking-sound-p nil)
  (org-pomodoro-ticking-sound-states '(:pomodoro))
  (org-pomodoro-ticking-frequency 5)
  :config
  (add-hook 'org-pomodoro-finished-hook
	    (lambda () (terminal-notify "A pomodoro is finished, take a break !!!" "Pomo")))
  (add-hook 'org-pomodoro-short-break-finished-hook
            (lambda () (terminal-notify "A short break done, ready a new pomodoro !!!" "Pomo")))
  (add-hook 'org-pomodoro-long-break-finished-hook
            (lambda () (terminal-notify "A long break done, ready a new pomodoro !!!" "Pomo")))

  ;; init emacs startup
  (add-hook 'after-init-hook (lambda() (tl/open-hammerspoon-url "Clocking" "status" "No Task")))

  (add-hook 'kill-emacs-hook (lambda() (tl/open-hammerspoon-url "Clocking" "status" "Emacs Stopped")))

  ;; (setq org-pomodoro-tick-hook nil)

  (add-hook 'org-pomodoro-tick-hook #'poly/org-clock-tick)
  (add-hook 'org-clock-out-hook (lambda() (poly/org-clock-tick "org-clock-out")))
  (add-hook 'org-pomodoro-break-finished-hook (lambda() (poly/org-clock-tick "org-pomodoro-killed-or-break-finished")))
  (add-hook 'org-pomodoro-killed-hook (lambda() (poly/org-clock-tick "org-pomodoro-killed-or-break-finished")))

  ;; (advice-remove 'org-clock-update-mode-line #'tl/update-hammerspoon-org-clock-bar)
  (advice-add 'org-clock-update-mode-line :after #'poly/org-clock-tick)
  ;; (advice-add 'org-pomodoro-kill :after (lambda() (poly/org-clock-tick "org-pomodoro-killed-or-break-finished")))
  ;; (add-hook 'org-pomodoro-started-hook 'my-start-vitamin-r)
  ;; (add-hook 'org-pomodoro-finished-hook 'my-stop-vitamin-r)
  ;; (add-hook 'org-pomodoro-killed-hook 'my-abort-vitamin-r)
  :bind
  (("C-c C-x C-p" . org-pomodoro)
   :map org-mode-map
   ("C-c C-x C-p" . org-pomodoro)))
#+end_src

** org-mind

  This is an Emacs package that creates graphviz directed graphs from  the headings of an org file

#+begin_src emacs-lisp
(use-package org-mind-map
    :straight t
    :init
    (require 'ox-org)
    :ensure t
    ;; Uncomment the below if 'ensure-system-packages` is installed
    ;;:ensure-system-package (gvgen . graphviz)
    ;; :config
    :custom
    (org-mind-map-engine "dot")
    ;; (setq org-mind-map-engine "dot")       ; Default. Directed Graph
    ;; (setq org-mind-map-engine "neato")  ; Undirected Spring Graph
    ;; (setq org-mind-map-engine "twopi")  ; Radial Layout
    ;; (setq org-mind-map-engine "fdp")    ; Undirected Spring Force-Directed
    ;; (setq org-mind-map-engine "sfdp")   ; Multiscale version of fdp for the layout of large graphs
    ;; (setq org-mind-map-engine "twopi")  ; Radial layouts
    ;; (setq org-mind-map-engine "circo")  ; Circular Layout
    )

#+end_src

** markdown

#+begin_src emacs-lisp
(use-package markdown-mode
  :straight t
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :commands (markdown-mode gfm-mode)
  :hook ((markdown-mode . markdown-toggle-inline-images)
	 ;; (markdown-mode . variable-pitch-mode)
	 ;; (markdown-mode . visual-line-mode)
	 )
  :custom
  (markdown-list-item-bullets '("●" "○" "•"))
  (markdown-hide-markup nil)
  (markdown-footnote-location 'header)
  (markdown-max-image-size '(400 . 400))
  (markdown-indent-on-enter 'indent-and-new-item)
  (markdown-hide-urls t)
  (markdown-hide-markup nil)
  (markdown-header-scaling t)
  ;; (markdown-nested-imenu-heading-index nil)
  (markdown-command "multimarkdown")
  (markdown-coding-system 'utf-8)
  (markdown-enable-math t)
  (markdown-enable-wiki-links t)
  (markdown-asymmetric-header t)
  (markdown-italic-underscore t)
  (markdown-fontify-code-blocks-natively t)
  (markdown-fontify-code-block-default-mode t)
  (markdown-make-gfm-checkboxes-buttons t)
  (markdown-gfm-uppercase-checkbox t)
  (markdown-gfm-additional-languages '("Mermaid" "sh" "Go" "Java" "Python"))
  (markdown-content-type "application/xhtml+xml")
  (markdown-xhtml-header-content "\n<meta name=\"viewport\" content=\"width=device-width\">")
  :config
  ;; HACK Due to jrblevin/markdown-mode#578, invoking `imenu' throws a
  ;;      'wrong-type-argument consp nil' error if you use native-comp.
  (setq markdown-nested-imenu-heading-index (not (ignore-errors (native-comp-available-p))))
  ;; A sensible and simple default preamble for markdown exports that
  ;; takes after the github asthetic (plus highlightjs syntax coloring).
  (setq markdown-css-paths '("https://cdn.jsdelivr.net/npm/github-markdown-css/github-markdown.min.css"
                             "https://cdn.jsdelivr.net/gh/highlightjs/cdn-release/build/styles/github.min.css"))
  (setq markdown-xhtml-header-content "
<meta name='viewport' content='width=device-width, initial-scale=1, shrink-to-fit=no'>
<style>
.markdown-body {
  box-sizing: border-box;
  max-width: 980px;
  min-width: 200px;
  width: 100%;
  margin: 0 auto;
  padding: 45px;
  // margin: 40px auto;
  // padding: 0 10px;
}

@media (max-width: 767px) {
 .markdown-body {
    padding: 15px;
 }
}
</style>
<link rel='stylesheet' href='https://cdn.jsdelivr.net/gh/highlightjs/cdn-release/build/styles/default.min.css'>
<script src='https://cdn.jsdelivr.net/gh/highlightjs/cdn-release/build/highlight.min.js'></script>
<script>
document.addEventListener('DOMContentLoaded', () => {
  document.body.classList.add('markdown-body');
  document.querySelectorAll('pre code').forEach((code) => {
    if (code.className != 'mermaid') {
      hljs.highlightBlock(code);
    }
  });
});
</script>
<script src='https://unpkg.com/mermaid@8.4.8/dist/mermaid.min.js'></script>
<script>
mermaid.initialize({
  theme: 'neutral',  // default, forest, dark, neutral
  startOnLoad: true
});
</script>
")
  ;; (setq markdown-xhtml-header-content "
  ;; <meta name='viewport' content='width=device-width, initial-scale=1, shrink-to-fit=no'>
  ;; <style>
  ;; body {
  ;;   box-sizing: border-box;
  ;;   max-width: 740px;
  ;;   width: 100%;
  ;;   margin: 40px auto;
  ;;   padding: 0 10px;
  ;; }
  ;; </style>
  ;; <link rel='stylesheet' href='https://cdn.jsdelivr.net/gh/highlightjs/cdn-release/build/styles/default.min.css'>
  ;; <script src='https://cdn.jsdelivr.net/gh/highlightjs/cdn-release/build/highlight.min.js'></script>
  ;; <script>
  ;; document.addEventListener('DOMContentLoaded', () => {
  ;;   document.body.classList.add('markdown-body');
  ;;   document.querySelectorAll('pre code').forEach((code) => {
  ;;     if (code.className != 'mermaid') {
  ;;       hljs.highlightBlock(code);
  ;;     }
  ;;   });
  ;; });
  ;; </script>
  ;; <script src='https://unpkg.com/mermaid@8.4.8/dist/mermaid.min.js'></script>
  ;; <script>
  ;; mermaid.initialize({
  ;;   theme: 'default',  // default, forest, dark, neutral
  ;;   startOnLoad: true
  ;; });
  ;; </script>
  ;; ")
  )

(use-package markdown-toc
  :straight t
  :commands (markdown-toc-generate-toc markdown-toc-generate-or-refresh-toc)
  :hook ((markdown-mode . markdown-toc-mode))
  :custom
  (markdown-toc-header-toc-start "<!-- markdown-toc start -->")
  (markdown-toc-indentation-space 2)
  (markdown-toc-header-toc-title "\n**Table of Contents**")
  :config
  ;; ISSUE https://github.com/ardumont/markdown-toc/issues/47
  (defun markdown-toc-refresh-before-save ()
    "Refresh markdown TOC before save."
    (when (and (derived-mode-p 'markdown-mode)
               (require 'markdown-toc)
               (markdown-toc--toc-already-present-p))
      (markdown-toc-generate-toc t)))
  (add-hook 'before-save-hook #'markdown-toc-refresh-before-save))

(use-package edit-indirect
  :straight t)

(use-package grip-mode
  :straight t
  :bind (:map markdown-mode-command-map
              ("g" . grip-mode)))

(use-package mmm-mode
  :straight t
  :hook (markdown-mode . mmm-mode))

(use-package pandoc-mode
  :ensure-system-package pandoc
  :defer t
  :hook ((markdown-mode . pandoc-mode)
         (pandoc-mode . pandoc-load-default-settings)))
#+end_src

** notdeft

#+begin_src emacs-lisp
(use-package notdeft
  :init  (setenv "XAPIAN_CJK_NGRAM" "1")
  :custom
  (notdeft-allow-org-property-drawers t)
  :straight (:host github :repo "hasu/notdeft" :files ("*.el" "extras/*.el" "xapian"))
  :config
  (setq notdeft-directories `(,org-beorg-directory)
	notdeft-extension "org")
  (add-hook 'org-mode-hook 'notdeft-note-mode)
  (require 'notdeft-global)
  (require 'notdeft-global-hydra))
#+end_src

*** plantuml

#+begin_src emacs-lisp
(use-package plantuml-mode
  :straight (:host github :repo "shuxiao9058/plantuml-mode"
		   :branch "develop")
  :ensure t
  :config
  ;; (setq plantuml-mode-debug-enabled t)
  (setq plantuml-default-exec-mode 'server
	;; plantuml-server-url "http://localhost:8080"
	;; plantuml-server-url "https://www.plantuml.com/plantuml"
        plantuml-jar-path "/opt/local/share/java/plantuml/plantuml.jar"
	;; plantuml-jar-args '("-Djava.awt.headless=true" "-jar" "-charset" "UTF-8")
	)
  ;; (add-to-list 'plantuml-executable-args "-config")
  ;; (add-to-list 'plantuml-executable-args "~/.config/plantuml/config.cfg")
  (add-to-list 'org-src-lang-modes '("plantuml" . plantuml)))
#+end_src

valign for org-mode & markdown table

#+begin_src emacs-lisp :tangle no
(use-package valign
  :straight t
  :config
  (valign-mode)
  (add-hook 'gfm-mode-hook 'valign-mode)
  (add-hook 'markdown-mode-hook 'valign-mode)
  (add-hook 'org-mode-hook 'valign-mode))
#+end_src

** tributary

 edit Atlassian Confluence wiki pages.

 #+begin_src emacs-lisp
(use-package tributary
  :straight (:host github :repo "mrkrd/tributary" :files ("*.el" "confluence.rnc"))
  :custom
  (tributary-api-url "http://wiki.17usoft.com/rest/api/content/"))
 #+end_src

** calendar

*** built in calendar

#+begin_src emacs-lisp
(use-package calendar
  :straight (:type built-in)
  :custom
  (calendar-week-start-day 1))
#+end_src

*** calfw: graphical calendar

#+begin_src emacs-lisp
(use-package calfw
  :straight t
  :config
  (setq cfw:fchar-junction ?╋
        cfw:fchar-vertical-line ?┃
        cfw:fchar-horizontal-line ?━
        cfw:fchar-left-junction ?┣
        cfw:fchar-right-junction ?┫
        cfw:fchar-top-junction ?┯
        cfw:fchar-top-left-corner ?┏
        cfw:fchar-top-right-corner ?┓))

(use-package calfw-ical
  :straight t
  :after calfw)

(use-package calfw-org
  :straight t
  :custom
  (cfw:org-agenda-schedule-args '(:timestamp))
  (cfw:org-overwrite-default-keybinding t)
  (cfw:display-calendar-holidays nil)
  (cfw:org-capture-template
   `("c" "calfw2org" entry (file+headline ,+org-calfw-org-capture-file "Calendrier")
     "* %?\nSCHEDULED: %(cfw:org-capture-day)" :empty-lines 1))
  :init
  (define-prefix-command 'mdrp-calfw-map nil "Cal-")
  :commands (cfw:open-org-calendar cfw:org-create-source my-open-calendar)
  :config
  (require 'calfw-org)
  (require 'calfw-ical)
  (defun my-open-calendar ()
    (interactive)
    (cfw:open-calendar-buffer
     :contents-sources
     (list
      (cfw:org-create-source "Green")  ; orgmode source
      ;; (cfw:howm-create-source "Blue")  ; howm source
      ;; (cfw:cal-create-source "Orange") ; diary source
      (cfw:ical-create-source "Moon" "~/moon.ics" "Gray")  ; ICS source1
      ;; (cfw:ical-create-source "gcal" "https://..../basic.ics" "IndianRed") ; google calendar ICS
      )))
  (defun cfw:org-capture-day ()
    (with-current-buffer  (get-buffer-create cfw:calendar-buffer-name)
      (let ((pos (cfw:cursor-to-nearest-date)))
        (concat "<"
                (format-time-string  "%Y-%m-%d %a 09:00"
                                     (encode-time 0 0 0
                                                  (calendar-extract-day pos)
                                                  (calendar-extract-month pos)
                                                  (calendar-extract-year pos)))
                ">"))))
  :bind (:map mdrp-calfw-map
	      ("c" . #'cfw:open-calendar-buffer)
	      ("o" . #'cfw:open-org-calendar))
  (:map cfw:calendar-mode-map
	("RET" . #'cfw:org-open-agenda-day)))
#+end_src

** Org super agenda

#+begin_src emacs-lisp
(use-package org-super-agenda
  :defer t
  :config
  (setq org-super-agenda-groups
        '(;; Each group has an implicit Boolean OR operator between its selectors.
          (:name "Rendez-vous"  ; Optionally specify section name
                 :time-grid t  ; Items that appear on the time grid
                 )
          ;; After the last group, the agenda will display items that didn't
          ;; match any of these groups, with the default order position of 99
          ))
  (org-super-agenda-mode)
  (when use-org-agenda-startup (org-agenda nil "a")))
#+end_src


** UI TODO & NOTE

#+begin_src emacs-lisp
(use-package svg-tag-mode
  ;; :disabled
  :defer t
  :config
  (setq svg-tag-tags
        '((":TODO:" . ((lambda (tag)
                         (svg-tag-make "TODO" :face 'org-tag
                                       :radius 0 :inverse t :margin 0))))
          (":NOTE:" . ((lambda (tag)
                         (svg-tag-make "NOTE" :face 'font-lock-comment-face
                                       :inverse nil :margin 0 :radius 0))))
          ("\([0-9a-zA-Z]\)" . ((lambda (tag)
                                  (svg-tag-make tag :beg 1 :end -1 :radius 12))))
          ("\([0-9a-zA-Z][0-9a-zA-Z]\)" . ((lambda (tag)
                                             (svg-tag-make tag :beg 1 :end -1 :radius 8))))))
  (svg-tag-mode)
  (global-svg-tag-mode))
#+end_src

** sudo

#+begin_src emacs-lisp

(defun poly--sudo-file-path (file)
  (let ((host (or (file-remote-p file 'host) "localhost")))
    (concat "/" (when (file-remote-p file)
                  (concat (file-remote-p file 'method) ":"
                          (if-let (user (file-remote-p file 'user))
                              (concat user "@" host)
                            host)
                          "|"))
            "sudo:root@" host
            ":" (or (file-remote-p file 'localname)
                    file))))

(defun poly/sudo-find-file (file)
  "Open FILE as root."
  (interactive "FOpen file as root: ")
  (find-file (poly--sudo-file-path file)))

(defun poly/sudo-this-file ()
  "Open the current file as root."
  (interactive)
  (find-file
   (poly--sudo-file-path
    (or buffer-file-name
        (when (or (derived-mode-p 'dired-mode)
                  (derived-mode-p 'wdired-mode))
          default-directory)))))

(defun poly/sudo-save-buffer ()
  "Save this file as root."
  (interactive)
  (let ((file (poly--sudo-file-path buffer-file-name)))
    (if-let (buffer (find-file-noselect file))
        (let ((origin (current-buffer)))
          (copy-to-buffer buffer (point-min) (point-max))
          (unwind-protect
              (with-current-buffer buffer
                (save-buffer))
            (unless (eq origin buffer)
              (kill-buffer buffer))
            (with-current-buffer origin
              (revert-buffer t t))))
      (user-error "Unable to open %S" file))))
#+end_src
