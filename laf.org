#+title: Look & Feel

Configuration for look and feels, make UI looks better.

#+begin_src emacs-lisp
  ;;; -*- lexical-binding: t -*-
#+end_src

* Core UI configuration
#+begin_src emacs-lisp
;; Hide the mouse while typing:
(setq make-pointer-invisible t)

;; Make bell visible, not aural.
(setq visible-bell t)

;; Always flash for parens.
(show-paren-mode 1)

;; Rearrange the menubars, so it goes tools | buffers | help.
(setq menu-bar-final-items '(tools buffer help-menu))

;; very long line performence optimizy
(global-so-long-mode t)

;;; highlight current line
(global-hl-line-mode)

;; ;; disable mode-line
;; (global-hide-mode-line-mode 1)

;; Removes *scratch* from buffer after the mode has been set.
(defun remove-scratch-buffer ()
  (if (get-buffer "*scratch*")
      (kill-buffer "*scratch*")))
(add-hook 'after-change-major-mode-hook 'remove-scratch-buffer)

;; Silences the warning when running a snippet with backticks (runs a command in the snippet)
(require 'warnings)
(add-to-list 'warning-suppress-types '(undo discard-info))

;; auto maximized frame
;; (when (and IS-MAC IS-GUI)
;;   ;; (add-to-list 'initial-frame-alist '(fullscreen . maximized))
;;   ;; (add-to-list 'default-frame-alist '(fullscreen . fullheight))
;;  ;; (add-to-list 'default-frame-alist '(fullscreen . maximized))
;;  )

;; Prevent the glimpse of un-styled Emacs by disabling these UI elements early.
;; (push '(menu-bar-lines . 0) default-frame-alist)
;; (push '(tool-bar-lines . 0) default-frame-alist)
(push '(vertical-scroll-bars) default-frame-alist)
(push '(inhibit-double-buffering . t) default-frame-alist)

(add-hook 'window-size-change-functions
          #'frame-hide-title-bar-when-maximized)

(when IS-MAC
  (setq frame-resize-pixelwise t
	mac-command-modifier 'super
	mac-option-modifier  'meta)
  (when (featurep 'ns)
    (setq ns-use-thin-smoothing t
          ns-use-fullscreen-animation t
          ns-use-native-fullscreen t
          ns-use-proxy-icon nil
          ns-use-mwheel-momentum t
          ns-use-mwheel-acceleration t
	  ns-use-srgb-colorspace nil)
    ;; (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
    ;; (add-to-list 'default-frame-alist '(ns-appearance . dark))
    ))

;; ;; Sets `ns-transparent-titlebar' and `ns-appearance' frame parameters so window
;; ;; borders will match the enabled theme.
;; (and (or (daemonp)
;;          (display-graphic-p))
;;      (require 'ns-auto-titlebar nil t)
;;      (ns-auto-titlebar-mode +1))

;; Clear Window clutter and set up the look and feel
(when (and (fboundp 'menu-bar-mode) (not (eq menu-bar-mode -1)))
  (menu-bar-mode -1))

(when (and (fboundp 'tool-bar-mode) (not (eq tool-bar-mode -1)))
  (tool-bar-mode -1))
;; (when (and (fboundp 'scroll-bar-mode) (not (eq scroll-bar-mode -1)))
;;   (scroll-bar-mode -1))
;; (when (and (fboundp 'horizontal-scroll-bar-mode) (not (eq horizontal-scroll-bar-mode -1)))
;;   (scroll-bar-mode -1))

(scroll-bar-mode +1)
(pixel-scroll-precision-mode +1)

;; Display column number in Mode line
(when (and (fboundp 'column-number-mode) (not (eq column-number-mode t)))
  (column-number-mode t))

(when (and (fboundp 'use-file-dialog) (not (eq use-file-dialog -1)))
  (use-file-dialog -1))
(when (and (fboundp 'use-dialog-box) (not (eq use-dialog-box -1)))
  (use-dialog-box -1))
(when (and (fboundp 'blink-cursor-mode) (not (eq blink-cursor-mode -1)))
  (blink-cursor-mode -1))

;; emacs 28 new feature, CJK word breaking lines
(when (boundp 'word-wrap-by-category)
  (setq word-wrap-by-category t))

(tooltip-mode nil)
(setq tooltip-use-echo-area nil)
(setq x-gtk-use-system-tooltips nil)

;; ;; Display visited file's path in the frame title
;; ;; @See http://emacsredux.com/blog/2013/04/07/display-visited-files-path-in-the-frame-title/
;; (setq frame-title-format
;;       `((:eval (if (buffer-file-name)
;;                    (abbreviate-file-name (buffer-file-name))
;;                  "%b"))))


;; ;; Activate winner mode for quickly changing window sizes, etc
;; (when (fboundp 'winner-mode)
;;   (winner-mode 1))

(defun up-slightly () (interactive) (scroll-up 5))
(defun down-slightly () (interactive) (scroll-down 5))
(global-set-key [mouse-4] 'down-slightly)
(global-set-key [mouse-5] 'up-slightly)

(defun up-one () (interactive) (scroll-up 1))
(defun down-one () (interactive) (scroll-down 1))
(global-set-key [(shift mouse-4)] 'down-one)
(global-set-key [(shift mouse-5)] 'up-one)

(defun up-a-lot () (interactive) (scroll-up))
(defun down-a-lot () (interactive) (scroll-down))
(global-set-key [(control mouse-4)] 'down-a-lot)
(global-set-key [(control mouse-5)] 'up-a-lot)

(when IS-GUI
  (defun toggle-fullscreen ()
    "Toggle full screen"
    (interactive)
    (set-frame-parameter
     nil 'fullscreen
     (when (not (frame-parameter nil 'fullscreen)) 'fullboth)))

  (defun poly/startup-maximize-frame()
    (let* ((top (frame-parameter nil 'top))
	   (left (frame-parameter nil 'left))
	   (fullscreen (frame-parameter nil 'fullscreen)))
      (unless (eq 'maximized fullscreen)
	(toggle-frame-maximized))
      (when (or (> top 50) (> left 50))
	;; (message "set left & top, fullscreen: %s" fullscreen)
        (set-frame-parameter nil 'top 36)
	(set-frame-parameter nil 'left 0)
	;; Give focus to emacs window at startup
	(x-focus-frame nil))))

 (add-hook 'emacs-startup-hook #'poly/startup-maximize-frame)
 )

;; Call this function to increase/decrease font size.
(defun bcm/zoom (n)
  "With positive N, increase the font size, otherwise decrease it."
  (set-face-attribute 'default (selected-frame) :height
                      (+ (face-attribute 'default :height)
                         (* (if (> n 0) 1 -1) 10))))
;; Add some zoom keybindings.
(keymap-global-set "C-+" #'(lambda () (interactive) (bcm/zoom 1)))
(keymap-global-set "C--" #'(lambda () (interactive) (bcm/zoom -1)))

(when (and IS-GUI IS-MAC)
  (add-hook 'focus-in-hook
	    (lambda() (tl/open-hammerspoon-url "Emacs" "action" "FocusIn" "pid" poly/emacs-pid-str)))
  (add-hook 'emacs-startup-hook
	    (lambda() (tl/open-hammerspoon-url "Emacs" "action" "StartUp" "pid" poly/emacs-pid-str)))
  (add-hook 'focus-out-hook
	    (lambda() (tl/open-hammerspoon-url "Emacs" "action" "FocusOut" "pid" poly/emacs-pid-str))))
#+end_src

*  since emacs 28

#+begin_src emacs-lisp
(setq use-short-answers t)
(setq create-lockfiles nil)
#+end_src

*  initial frame
#+begin_src emacs-lisp
;; Visit files opened outside of Emacs in existing frame, not a new one
(setq ns-pop-up-frames nil)

;; reference | http://d.hatena.ne.jp/IMAKADO/20090215/1234699972
(defun my-toggle-transparency ()
  "Toggle transparency."
  (interactive)
  (let ((frame  (selected-frame)))
    (when (display-graphic-p frame)
      (let* ((current-alpha (or (car (cdr (assoc 'alpha (frame-parameters frame)))) 1.0))
       (new-alpha (or (cl-case current-alpha ((0.85) 1.0)
             ;; ((100) 93)
             ;; ((93) 91)
             ;; ((91) 78) ((78) 66) ((66) 50)
             ;; (t 100)
             ) 0.85)))
  ;; (princ current-alpha)
  (when new-alpha (set-frame-parameter frame 'alpha `(,new-alpha ,new-alpha)))))))
#+end_src

* Font

#+begin_src emacs-lisp
;; "JetBrains Mono"
(setq +font-family "JetBrainsMono Nerd Font Mono")

;; (setq +font-family "Monaco")
;; (setq +font-family "MonoLisa Nerd Font Mono")

;; (setq +font-family "SF Mono";; "JetBrains Mono"
;;       )

;; (setq +ufont-family "Sarasa Mono SC")
;; (defvar +ufont-family "PingFang SC")
(defvar +ufont-family "Sarasa Fixed SC")
;; chinese font
;; (setq +fixed-pitch-family "Sarasa Mono SC")
;; (setq +fixed-pitch-family "JetBrains Mono")
;; (setq +variable-pitch-family "Sarasa Mono SC")
(setq +fixed-pitch-family "JetBrainsMono Nerd Font Mono")
(setq +variable-pitch-family "Sarasa Mono SC")

(defun poly/font-exist-p (fontname)
  "test if this font is exist or not."
  (when (and fontname (not (string= fontname "")))
    (when (x-list-fonts fontname) t)))

;; (setq english-font-size 13)
;; (setq chinese-font-size 15)

(setq english-font-size 12)
(setq chinese-font-size 13)

(defun +load-font (&optional frame)
  (interactive)
  (setq english-fonts `(,+font-family))
  (setq chinese-fonts `(,+ufont-family))
  (set-face-attribute 'default nil
		      ;; (format "%s-%d" (car english-fonts) 12)
                      :font (format "%s:pixelsize=%d" (car english-fonts) english-font-size) ;; 11 13 17 19 23
		      )
  (dolist (charset '(kana han symbol cjk-misc bopomofo))
    (set-fontset-font  nil ;; (frame-parameter nil 'font)
		       charset
		       (font-spec :family +ufont-family
				  ;; (car chinese-fonts)
				  :size chinese-font-size))) ;; 14 16 20 22 28
  (set-face-attribute 'variable-pitch nil :font (format "%s-%d" +ufont-family chinese-font-size))
  (set-face-attribute 'fixed-pitch nil :font (format "%s-%d" +ufont-family chinese-font-size))

  ;; (setq face-font-rescale-alist `((,+ufont-family . 1.2)))
  ;; (setq face-font-rescale-alist `((,+ufont-family . 1.24)))

  ;; emoji
  (when IS-MAC
    (if (version< "27.0" emacs-version)
	(set-fontset-font "fontset-default" 'unicode "Apple Color Emoji" nil 'prepend)
      (set-fontset-font t 'symbol (font-spec :family "Apple Color Emoji" :size 13) nil 'prepend)))

  (let* ((+font-size 12)
	 (font-spec (format "%s-%d" +font-family 12))
         (variable-pitch-font-spec (format "%s-%d" +variable-pitch-family +font-size))
         (fixed-pitch-font-spec (format "%s-%d" +fixed-pitch-family +font-size)))
    (set-fontset-font nil nil (font-spec :family +font-family
					 :size +font-size
					 :width 'normal) frame)
    ;; (set-frame-font font-spec frame)
    (set-face-attribute 'variable-pitch nil :font variable-pitch-font-spec)
    (set-face-attribute 'fixed-pitch nil :font fixed-pitch-font-spec))
  ;; (+load-ext-font)
  )

;; (when (IS-GUI)
;;   (+load-font nil))
;; (add-hook 'after-init-hook
;;     (lambda ()
;;       (when (IS-GUI)
;;         (+load-font nil))))

;; (add-hook 'telega-root-mode-hook '+load-font)
;; (add-hook 'after-init-hook
;;     (lambda ()
;;       (when (IS-GUI)
;;         (+load-font nil))))

;; (defun max/set-font (FONT-NAME CN-FONT-NAME &optional INITIAL-SIZE CN-FONT-RESCALE-RATIO)
;;   "Set different font-family for Latin and Chinese charactors."
;;   (let* ((size (or INITIAL-SIZE 14))
;; 	 (ratio (or CN-FONT-RESCALE-RATIO 0.0))
;; 	 (main (font-spec :name FONT-NAME :size size))
;; 	 (cn (font-spec :name CN-FONT-NAME)))
;;     (set-face-attribute 'default nil :font main)
;;     (dolist (charset '(kana han symbol cjk-misc bopomofo))
;;       (set-fontset-font t charset cn))
;;     (setq face-font-rescale-alist (if (/= ratio 0.0) `((,CN-FONT-NAME . ,ratio)) nil))))

(when IS-GUI
  (add-hook 'after-init-hook
	    (lambda ()
	      ;; (max/set-font "Monaco" "Sarasa Mono SC" 13 1.25)
	      ;; (max/set-font "JetBrainsMono Nerd Font Mono";; "JetBrainsMono Nerd Font"
	      ;; 		    ;; "JetBrains Mono"
	      ;; 		   ;; "JetBrainsMono Nerd Font"
	      ;; 		   "Hiragino Sans GB"
	      ;; 		    13 1.25)

	      ;; (max/set-font "Fira Code" "Source Han Serif SC" 13 1.3)
              (+load-font nil))))

(set-face-attribute 'fixed-pitch-serif nil :family "Latin Modern Mono")
(set-fontset-font t 'symbol "Noto Color Emoji")
(set-fontset-font t 'symbol "Noto Sans Symbols" nil 'append)
(set-fontset-font t 'symbol "Symbola" nil 'append)
;; (max/set-font "Fira Code" "Hiragino Sans GB" 13 1.25)

;; (set-face-attribute 'default nil :family "Jetbrains Mono NL" :height 135)
;; (set-face-attribute 'fixed-pitch nil :family "Jetbrains Mono NL")
;; (set-face-attribute 'variable-pitch nil :family "Jetbrains Mono NL")
#+end_src

* ligatures

enable ligatures with emacs-mac, must install font first

#+begin_src emacs-lisp
(when (fboundp 'mac-auto-operator-composition-mode)
  ;; Function available in railwaycat Emacs only:
  ;; `mac-auto-operator-composition-mode' automatically composes
  ;; consecutive occurrences of characters consisting of the elements
  ;; of `mac-auto-operator-composition-characters' if the font
  ;; supports such a composition.
  (mac-auto-operator-composition-mode t))
#+end_src

#+begin_src emacs-lisp
;; (let ((ligatures `((?-  . ,(regexp-opt '("-|" "-~" "---" "-<<" "-<" "--" "->" "->>" "-->")))
;;                    (?/  . ,(regexp-opt '("/**" "/*" "///" "/=" "/==" "/>" "//")))
;;                    (?*  . ,(regexp-opt '("*>" "***" "*/")))
;;                    (?<  . ,(regexp-opt '("<-" "<<-" "<=>" "<=" "<|" "<||" "<|||::=" "<|>" "<:" "<>" "<-<"
;;                                          "<<<" "<==" "<<=" "<=<" "<==>" "<-|" "<<" "<~>" "<=|" "<~~" "<~"
;;                                          "<$>" "<$" "<+>" "<+" "</>" "</" "<*" "<*>" "<->" "<!--")))
;;                    (?:  . ,(regexp-opt '(":>" ":<" ":::" "::" ":?" ":?>" ":=")))
;;                    (?=  . ,(regexp-opt '("=>>" "==>" "=/=" "=!=" "=>" "===" "=:=" "==")))
;;                    (?!  . ,(regexp-opt '("!==" "!!" "!=")))
;;                    (?>  . ,(regexp-opt '(">]" ">:" ">>-" ">>=" ">=>" ">>>" ">-" ">=")))
;;                    (?&  . ,(regexp-opt '("&&&" "&&")))
;;                    (?|  . ,(regexp-opt '("|||>" "||>" "|>" "|]" "|}" "|=>" "|->" "|=" "||-" "|-" "||=" "||")))
;;                    (?.  . ,(regexp-opt '(".." ".?" ".=" ".-" "..<" "...")))
;;                    (?+  . ,(regexp-opt '("+++" "+>" "++")))
;;                    (?\[ . ,(regexp-opt '("[||]" "[<" "[|")))
;;                    (?\{ . ,(regexp-opt '("{|")))
;;                    (?\? . ,(regexp-opt '("??" "?." "?=" "?:")))
;;                    (?#  . ,(regexp-opt '("####" "###" "#[" "#{" "#=" "#!" "#:" "#_(" "#_" "#?" "#(" "##")))
;;                    (?\; . ,(regexp-opt '(";;")))
;;                    (?_  . ,(regexp-opt '("_|_" "__")))
;;                    (?\\ . ,(regexp-opt '("\\" "\\/")))
;;                    (?~  . ,(regexp-opt '("~~" "~~>" "~>" "~=" "~-" "~@")))
;;                    (?$  . ,(regexp-opt '("$>")))
;;                    (?^  . ,(regexp-opt '("^=")))
;;                    (?\] . ,(regexp-opt '("]#"))))))
;;   (dolist (char-regexp ligatures)
;;     (set-char-table-range composition-function-table (car char-regexp)
;;                           `([,(cdr char-regexp) 0 font-shape-gstring]))))

;; (global-auto-composition-mode -1)

;; (defun aa/enable-auto-composition ()
;;   (auto-composition-mode))

;; (add-hook 'prog-mode-hook #'aa/enable-auto-composition)

(use-package composite
  :ensure nil
  :init (defvar composition-ligature-table (make-char-table nil))
  :hook (((prog-mode
           conf-mode nxml-mode markdown-mode help-mode
           shell-mode eshell-mode term-mode vterm-mode eat-mode)
          . (lambda () (setq-local composition-function-table composition-ligature-table))))
  :config
  ;; support ligatures, some toned down to prevent hang
  (let ((alist
         '((33  . ".\\(?:\\(==\\|[!=]\\)[!=]?\\)")
           (35  . ".\\(?:\\(###?\\|_(\\|[(:=?[_{]\\)[#(:=?[_{]?\\)")
           (36  . ".\\(?:\\(>\\)>?\\)")
           (37  . ".\\(?:\\(%\\)%?\\)")
           (38  . ".\\(?:\\(&\\)&?\\)")
           (42  . ".\\(?:\\(\\*\\*\\|[*>]\\)[*>]?\\)")
           ;; (42 . ".\\(?:\\(\\*\\*\\|[*/>]\\).?\\)")
           (43  . ".\\(?:\\([>]\\)>?\\)")
           ;; (43 . ".\\(?:\\(\\+\\+\\|[+>]\\).?\\)")
           (45  . ".\\(?:\\(-[->]\\|<<\\|>>\\|[-<>|~]\\)[-<>|~]?\\)")
           ;; (46 . ".\\(?:\\(\\.[.<]\\|[-.=]\\)[-.<=]?\\)")
           (46  . ".\\(?:\\(\\.<\\|[-=]\\)[-<=]?\\)")
           (47  . ".\\(?:\\(//\\|==\\|[=>]\\)[/=>]?\\)")
           ;; (47 . ".\\(?:\\(//\\|==\\|[*/=>]\\).?\\)")
           (48  . ".\\(?:x[a-zA-Z]\\)")
           (58  . ".\\(?:\\(::\\|[:<=>]\\)[:<=>]?\\)")
           (59  . ".\\(?:\\(;\\);?\\)")
           (60  . ".\\(?:\\(!--\\|\\$>\\|\\*>\\|\\+>\\|-[-<>|]\\|/>\\|<[-<=]\\|=[<>|]\\|==>?\\||>\\||||?\\|~[>~]\\|[$*+/:<=>|~-]\\)[$*+/:<=>|~-]?\\)")
           (61  . ".\\(?:\\(!=\\|/=\\|:=\\|<<\\|=[=>]\\|>>\\|[=>]\\)[=<>]?\\)")
           (62  . ".\\(?:\\(->\\|=>\\|>[-=>]\\|[-:=>]\\)[-:=>]?\\)")
           (63  . ".\\(?:\\([.:=?]\\)[.:=?]?\\)")
           (91  . ".\\(?:\\(|\\)[]|]?\\)")
           ;; (92 . ".\\(?:\\([\\n]\\)[\\]?\\)")
           (94  . ".\\(?:\\(=\\)=?\\)")
           (95  . ".\\(?:\\(|_\\|[_]\\)_?\\)")
           (119 . ".\\(?:\\(ww\\)w?\\)")
           (123 . ".\\(?:\\(|\\)[|}]?\\)")
           (124 . ".\\(?:\\(->\\|=>\\||[-=>]\\||||*>\\|[]=>|}-]\\).?\\)")
           (126 . ".\\(?:\\(~>\\|[-=>@~]\\)[-=>@~]?\\)"))))
    (dolist (char-regexp alist)
      (set-char-table-range composition-ligature-table (car char-regexp)
                            `([,(cdr char-regexp) 0 font-shape-gstring]))))
  (set-char-table-parent composition-ligature-table composition-function-table))
#+end_src

* modeline
** doom-modeline

#+begin_src emacs-lisp :tangle no
(use-package doom-modeline
  :custom
  ;; (doom-modeline-buffer-file-name-style 'truncate-with-project)
  ;; (doom-modeline-buffer-file-name-style 'relative-to-project)
  ;; (doom-modeline-buffer-file-name-style 'relative-to-project)
  (doom-modeline-buffer-file-name-style 'truncate-all)
  (doom-modeline-project-detection 'project)
  (doom-modeline-modal-icon nil)
  (doom-modeline-icon t)
  (doom-modeline-major-mode-icon t)
  (doom-modeline-buffer-state-icon t)
  (doom-modeline-buffer-modification-icon t)
  (doom-modeline-unicode-fallback nil)
  (doom-modeline-continuous-word-count-modes '(markdown-mode gfm-mode org-mode))
  (doom-modeline-minor-modes t)
  (doom-modeline-major-mode-color-icon t)
  (doom-modeline-persp-name t)
  (doom-modeline-persp-icon t)
  (doom-modeline-lsp t)
  (doom-modeline-mu4e nil)
  ;; Whether display github notifications or not. Requires `ghub+` package.
  (doom-modeline-github nil)
  ;; The interval of checking github.
  (doom-modeline-github-interval (* 30 60))
  (doom-modeline-height 15)
  (doom-modeline-bar-width 3)
  (doom-modeline-vcs-max-length 25)
  (doom-modeline-checker-simple-format nil)
  (doom-modeline-env-version t)
  (doom-modeline-env-enable-python t)
  (doom-modeline-env-enable-ruby t)
  (doom-modeline-env-enable-perl t)
  (doom-modeline-env-enable-go t)
  (doom-modeline-env-enable-elixir t)
  (doom-modeline-env-enable-rust t)
  (doom-modeline-env-python-executable "python")
  (doom-modeline-env-ruby-executable "ruby")
  (doom-modeline-env-perl-executable "perl")
  (doom-modeline-env-go-executable "go")
  (doom-modeline-env-elixir-executable "iex")
  (doom-modeline-env-rust-executable "rustc")
  (doom-modeline-env-load-string "...")
  :config
  ;; (doom-modeline-def-modeline 'my-simple-line
  ;;   '(modals input-method bar matches buffer-info-simple remote-host buffer-position parrot selection-info)
  ;;   '(objed-state misc-info persp-name mu4e lsp minor-modes indent-info buffer-encoding major-mode process vcs checker)
  ;;   )

  (doom-modeline-def-modeline 'my-simple-line-v2
			      '(;; modals
				input-method bar matches buffer-info-simple remote-host buffer-position parrot selection-info)
			      '(;; objed-state
				misc-info
				persp-name
				lsp ;; minor-modes
				indent-info;
				;; buffer-encoding
				;; major-mode
				process vcs checker)
			      )

  ;; Add to `doom-modeline-mode-hook` or other hooks
  ;; (add-hook 'doom-modeline-mode-hook
  ;;      (lambda() (doom-modeline-set-modeline 'my-simple-line 'default)))
  (add-hook 'doom-modeline-mode-hook
	    (lambda() (doom-modeline-set-modeline 'my-simple-line-v2)))
  (doom-modeline-mode t))
#+END_SRC

** simple-modeline
#+begin_src emacs-lisp :tangle no
(use-package simple-modeline
  :hook (after-init . simple-modeline-mode)
  :config
  (setq simple-modeline-segments
	'((simple-modeline-segment-input-method
	   ;; simple-modeline-segment-modified
	   simple-modeline-segment-buffer-name
	   simple-modeline-segment-position)
	  (;; simple-modeline-segment-minor-modes
	   ;; simple-modeline-segment-eol
	   ;; simple-modeline-segment-encoding
	   simple-modeline-segment-vc
	   ;; simple-modeline-segment-misc-info
	   simple-modeline-segment-process
	   simple-modeline-segment-major-mode))))
#+end_src


** Minions

Implements a menu that lists enabled and disabled minor modes in the mode-line.

#+begin_src emacs-lisp
(use-package minions
  :init
  ;; (defface csb/minions-mode-line-lighter '((t (:height 1.0))) "")
  (defface my/minions-mode-line-face
    '((t
       :weight normal
       :height 1.15
       :foreground "MediumPurple1"
       :background unspecified
       :box unspecified))
    "Face for the minions mode line."
    :group 'my/faces)
  :custom
  ;; (minions-mode-line-delimiters nil)
  (minions-mode-line-delimiters '("" . ""))
  (minions-mode-line-lighter "ϟ")
  ;; (minions-mode-line-face '((:inherit font-lock-comment-face :slant normal)))
  (minions-mode-line-face 'my/minions-mode-line-face)
  ;; (minions-mode-line-lighter "::")
  :config
  (minions-mode)
  ;; (setq minions-mode-line-lighter  "⚙" ;; "#" ;; "[+]"
  ;; 	;; minions-mode-line-delimiters '("" . "")
  ;; 	;; minions-mode-line-face 'csb/minions-mode-line-lighter
  ;; 	minions-prominent-modes nil;; '(lsp-mode)
  ;; 	)
  )
#+end_src

** modeline

#+begin_src emacs-lisp
;; https://emacs.stackexchange.com/questions/5529/how-to-right-align-some-items-in-the-modeline
(defun csb/align-mode-line (left right &optional resered-right-width)
  "Return a string of `window-width' length containing LEFT, and
RIGHT aligned respectively."
  (let* ((align-mode-line-width ; how much is avilable for us to align
          (if resered-right-width
              (- (window-total-width) resered-right-width)
            (window-total-width)))
         (available-width
          (- align-mode-line-width
             (+ (length (format-mode-line left))
                (length (format-mode-line right))))))
    (append left
            (list (format (format "%%%ds" available-width) ""))
            right
            '(mode-line-end-spaces))))

;; ;; https://github.com/jdtsmith/mlscroll/issues/11
;; (defun csb/mlscroll-mode-right-reserved ()
;;     "How much does mlscroll mode need for the magic on the right hand side?"
;;   (if (and (bound-and-true-p mlscroll-mode)
;;            (bound-and-true-p mlscroll-width-chars)
;;            (not (bound-and-true-p mlscroll-alter-percent-position)))
;;       ;; magic guess padding for mode-line-end-spaces
;;       (+ mlscroll-width-chars 2)
;;          2))


;; adapted from  doom-modeline-update-buffer-file-state-icon
(defun csb/mode-line-buffer-file-state-icon  ()
  (ignore-errors
    (cond (buffer-read-only
           (propertize (nerd-icons-mdicon "nf-md-lock")
		       'face '(:inherit warning :height 1.1)))
          ((and buffer-file-name (buffer-modified-p))
           (propertize (nerd-icons-mdicon "nf-md-content_save_edit")
		       'face '(:inherit warning :height 1.1)))
          ((and buffer-file-name
                (not (file-exists-p buffer-file-name)))
           (propertize (nerd-icons-mdicon "nf-md-cancel")
		       'face  '(:foreground "Pink" :height 1.1)))
          (t "-"))))

(defun csb/lsp-state-icon ()
  (ignore-errors
    (let ((succ (propertize (concat " " (nerd-icons-octicon "nf-oct-rocket") " ")
 			    'face '(:inherit success :height 1.1)))
	  (fail (propertize (concat " " "💥" " ") 'face '(:inherit error :height 1.1))))
      (cond ((bound-and-true-p lsp-mode)
	     (if (lsp-workspaces)
		 succ fail))
	    ((bound-and-true-p eglot--managed-mode)
	     (let* ((server (eglot-current-server))
		    (last-error (and server (jsonrpc-last-error server))))
	       (if last-error
		   fail succ)))
	    (t  "-")))))

;; Keep `doom-modeline-current-window' up-to-date
(defun csb/modeline-get-current-window (&optional frame)
  "Get the current window but should exclude the child windows."
  (if (and (fboundp 'frame-parent) (frame-parent frame))
      (frame-selected-window (frame-parent frame))
    (frame-selected-window frame)))

(defvar csb/modeline-current-window (csb/modeline-get-current-window))

;; From https://github.com/seagle0128/doom-modeline/blob/dc93cdec543e25022db7b034af49d57b6ee1c289/doom-modeline-core.el#L840
(defun csb/modeline-active-p ()
  "Whether is an active window."
  (unless (and (bound-and-true-p mini-frame-frame)
               (and (frame-live-p mini-frame-frame)
                    (frame-visible-p mini-frame-frame)))
    (and csb/modeline-current-window
         (eq (csb/modeline-get-current-window) csb/modeline-current-window))))

(defun csb/modeline-set-selected-window (&rest _)
  "Set `doom-modeline-current-window' appropriately."
  (let ((win (csb/modeline-get-current-window)))
    (setq csb/modeline-current-window
          (if (minibuffer-window-active-p win)
              (minibuffer-selected-window)
            win))))

(defun csb/modeline-unset-selected-window ()
  "Unset `doom-modeline-current-window' appropriately."
  (setq csb/modeline-current-window nil))

(add-hook 'pre-redisplay-functions #'csb/modeline-set-selected-window)


(setq csb/modeline-enable-word-count nil)

;; From https://github.com/seagle0128/doom-modeline/blob/master/doom-modeline-segments.el#L1117
(defun csb/modeline-selection-info ()
  "Information about the current selection, such as how many characters and
lines are selected, or the NxM dimensions of a block selection."
  (when (and mark-active
             (csb/modeline-active-p))
    (cl-destructuring-bind (beg . end)
	(cons (region-beginning) (region-end))
      (propertize
       (let ((lines (count-lines beg (min end (point-max)))))
         (concat " "
                 (cond ((or (bound-and-true-p rectangle-mark-mode))
                        (let ((cols (abs (- (csb/modeline-column end)
                                            (csb/modeline-column beg)))))
                          (format "%dx%dB" lines cols)))
                       ((> lines 1)
                        (format "%dC %dL" (- end beg) lines))
                       (t
                        (format "%dC" (- end beg))))
                 (when csb/modeline-enable-word-count
                   (format " %dW" (count-words beg end)))))
       'face 'italic))))


(defun csb/modeline-maybe-popper ()
  "Has popper claimed this as a popup!?"
  (if (and (boundp 'popper-popup-status)
           popper-popup-status)
      (propertize "🎈" 'face 'mode-line-emphasis) ""))

(defun poly/breadcrumb ()
  "breadcrumb modeline"
  (when (and (derived-mode-p 'prog-mode))
    (let* ((breadcrumb (breadcrumb-imenu-crumbs)))
      (when breadcrumb
	(concat (propertize " | " 'face 'shadow)
		breadcrumb)))))

;; https://occasionallycogent.com/custom_emacs_modeline/index.html
(setq csb/original-mode-line-format mode-line-format)

(setq project-mode-line t)

(setq csb/mode-line-format
      '(:eval
        (csb/align-mode-line
         ;; left
         '((:eval (meow-indicator))
	   ;; mode-line-mule-info
	   (:eval (when (fboundp 'rime-lighter) (rime-lighter)))
	   ;; "%e"
	   ;; mode-line-front-space
           ;; (:eval (csb/modeline-maybe-popper))
           " "
           ;; don't display the '-' for local directories, just '@' on remote
           (:eval (when (and (stringp default-directory) (file-remote-p default-directory))
                    'mode-line-remote))
           (:eval (propertize "%b" 'face 'bold))
           " "
	   (:eval " L%l C%C ")
           ;; "%l:%c "
	   mode-line-percent-position
	   " "
           (:eval (csb/modeline-selection-info))
	   ;; " "
	   (:eval (poly/breadcrumb))
	   ;; (:eval (propertize " | " 'face 'shadow) )
	   ;; (:eval (breadcrumb-project-crumbs))
	   ;; " / "
	   ;; (:eval (breadcrumb-imenu-crumbs))
	   )
         ;; right
         '(" "
	   ;;
           ;; mode-line-modes
	   (project-mode-line project-mode-line-format)
	   (:eval (propertize " | " 'face 'shadow) ) ; separator
	   minions-mode-line-modes
           (vc-mode vc-mode)
           " "
           ;; mode-line-client
           (:eval (csb/lsp-state-icon))
	   ;; " "
	   ;; "  "
	   (:eval (propertize " | " 'face 'shadow) ) ; separator
           (:eval (csb/mode-line-buffer-file-state-icon))
           mode-line-frame-identification
           mode-line-misc-info)
         ;; (csb/mlscroll-mode-right-reserved)
	 )))

;; Keep the modline unicode symbols single color
;; Otherwise wit emacs-28 and harfbuzz we get colorfull madness
;; https://archive.casouri.cat/note/2021/fontset/index.html
(when IS-GUI
  (progn
    (create-fontset-from-fontset-spec
     (font-xlfd-name
      (font-spec :name "DejaVu Sans Mono"
                 :size 11
                 :registry "fontset-csb modeline")))
    (set-fontset-font
     "fontset-csb modeline"
     'unicode (font-spec :name "Symbola"))
    (set-face-attribute 'mode-line nil :fontset "fontset-csb modeline")
    (set-face-attribute 'mode-line-inactive nil :fontset "fontset-csb modeline")))

(setq mode-line-right-align-edge 'right-margin)
(setq-default mode-line-format csb/mode-line-format)
#+end_src

* treemacs
#+begin_src emacs-lisp
(use-package treemacs
  :custom
  (treemacs-collapse-dirs                 (if (executable-find "python") 3 0))
  (treemacs-deferred-git-apply-delay      0.5)
  (treemacs-display-in-side-window        t)
  (treemacs-eldoc-display                 'simple)
  (treemacs-file-event-delay              2000)
  (treemacs-file-follow-delay             0.2)
  (treemacs-file-extension-regex            treemacs-last-period-regex-value)
  (treemacs-file-name-transformer        #'identity)
  (treemacs-follow-after-init             t)
  (treemacs-expand-after-init             t)
  (treemacs-git-command-pipe              "")
  (treemacs-git-integration                t)
  (treemacs-header-scroll-indicators        '(nil . "^^^^^^"))
  (treemacs-goto-tag-strategy             'refetch-index)
  (treemacs-indentation                   2)
  (treemacs-indentation-string            " ")
  (treemacs-is-never-other-window         t)
  (treemacs-max-git-entries               5000)
  (treemacs-find-workspace-method        'find-for-file-or-pick-first)
  (treemacs-no-png-images                 nil)
  (treemacs-no-delete-other-windows       t)
  (treemacs-project-follow-cleanup        nil)
  (treemacs-position                      'left)
  (treemacs-persist-file                  (expand-file-name "treemacs-persist" poly-cache-dir))
  (treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask" "/vendor"))
  (treemacs-recenter-distance             0.1)
  (treemacs-recenter-after-file-follow    nil)
  (treemacs-recenter-after-tag-follow     nil)
  (treemacs-recenter-after-project-jump   'always)
  (treemacs-recenter-after-project-expand 'on-distance)
  (treemacs-project-follow-into-home      nil)
  (treemacs--icon-size 10)
  (treemacs-silent-refresh t)
  (treemacs-follow-mode t)
  (treemacs-show-cursor                   t)
  (treemacs-show-hidden-files             t)
  (treemacs-silent-filewatch              t)
  (treemacs-sorting                 'alphabetic-asc)
  (treemacs-select-when-already-in-treemacs 'move-back)
  (treemacs-missing-project-action  'remove)
  ;; (treemacs-sorting                       'alphabetic-case-insensitive-asc)
  (treemacs-space-between-root-nodes      t)
  (treemacs-tag-follow-cleanup            t)
  (treemacs-tag-follow-delay              1)
  (treemacs-text-scale                  nil)
  (treemacs-user-mode-line-format       nil)
  (treemacs-user-header-line-format     nil)
  (treemacs-resize-icons                   16)
  (treemacs-wide-toggle-width           70)
  (treemacs-width                       35)
  (treemacs-width-increment             1)
  (treemacs-width-is-initially-locked   t)
  (treemacs-workspace-switch-cleanup    nil)
  ;; (treemacs-fringe-indicator-mode       nil)
  ;; (doom-treemacs-use-generic-icons t)
  :defines winum-keymap
  :commands (treemacs-follow-mode
             treemacs-filewatch-mode
             treemacs-fringe-indicator-mode
             treemacs-git-mode)
  :init
  (with-eval-after-load 'winum
    (bind-key (kbd "M-0") #'treemacs-select-window winum-keymap))
  :config
  ;; (treemacs-fringe-indicator-mode nil)
  (treemacs-git-commit-diff-mode t)
  ;; (treemacs-git-mode t)
  (treemacs-indent-guide-mode t)
  ;; (treemacs-tag-follow-mode t)
  (treemacs-project-follow-mode t)
  (treemacs-follow-mode t)
  (treemacs-filewatch-mode t)
  (treemacs-fringe-indicator-mode t)
  (pcase (cons (not (null (executable-find "git")))
               (not (null (executable-find "python3"))))
    (`(t . t)
     (treemacs-git-mode 'deferred))
    (`(t . _)
     (treemacs-git-mode 'simple)))
  (if (fboundp 'define-fringe-bitmap)
      (define-fringe-bitmap 'treemacs--fringe-indicator-bitmap
        (vector #b00000111111
                #b00000111111
                #b00000111111
                #b00000111111
                #b00000111111
                #b00000111111
                #b00000111111
                #b00000111111
                #b00000111111
                #b00000111111
                #b00000111111
                #b00000111111
                #b00000111111
                #b00000111111
                #b00000111111
                #b00000111111
                #b00000111111
                #b00000111111
                #b00000111111
                #b00000111111
                #b00000111111
                #b00000111111
                #b00000111111
                #b00000111111
                #b00000111111
                #b00000111111)))
  :bind (([f8]        . treemacs)
         ("C-x t t"   . treemacs)
         ("C-x t d"   . treemacs-select-directory)
         ("C-`"       . treemacs-select-window)
         ("M-0"       . treemacs-select-window)
         ("C-x t 1"   . treemacs-delete-other-windows)
	 ("s-t"       . treemacs-add-and-display-current-project-exclusively)
         ("s-T"       . treemacs-add-and-display-current-project)
         ("C-x t t"   . treemacs)
         ("C-x t b"   . treemacs-bookmark)
         ;; ("C-x t B"   . treemacs-bookmark)
         ("C-x t C-t" . treemacs-find-file)
         ("C-x t M-t" . treemacs-find-tag)
	 :map treemacs-mode-map
         ([mouse-1]   . treemacs-single-click-expand-action)))

(use-package treemacs-magit
  :after magit
  :commands treemacs-magit--schedule-update
  :hook ((magit-post-commit
          git-commit-post-finish
          magit-post-stage
          magit-post-unstage)
         . treemacs-magit--schedule-update))

(use-package treemacs-projectile
  :disabled
  :after (treemacs projectile)
  :config
  (setq treemacs-header-function #'treemacs-projectile-create-header))

;; (use-package nerd-icons
;;   :defer 1
;;   :demand ;require
;;   :custom
;;   ;; need to install the nerd-font
;;   ;; For kitty terminal need to add family to kitty config (C-S-<f2>)
;;   (nerd-icons-font-family "JetBrains Mono NF"))

(use-package nerd-icons
  :custom
  (nerd-icons-scale-factor 1.0)
  (nerd-icons-default-adjust 0.0)
  :config
  (when (and (display-graphic-p nil)
             (not (member "Symbols Nerd Font Mono" (font-family-list))))
    (nerd-icons-install-fonts)))

(use-package nerd-icons-completion
  :after nerd-icons
  :config
  (nerd-icons-completion-mode)
  (add-hook 'marginalia-mode-hook #'nerd-icons-completion-marginalia-setup)

  (cl-defmethod nerd-icons-completion-get-icon (cand (_cat (eql project-buffer)))
    "Return the icon for the candidate CAND of completion category project-buffer."
    (nerd-icons-completion-get-icon cand 'buffer))

  (cl-defmethod nerd-icons-completion-get-icon (cand (_cat (eql tab)))
    "Display tab icon for nerd-icons-completion."
    (concat (nerd-icons-mdicon "nf-md-tab" :face 'nerd-icons-blue) " "))

  (cl-defmethod nerd-icons-completion-get-icon (cand (_cat (eql command)))
    "Display command icon for nerd-icons-completion."
    (concat (nerd-icons-mdicon "nf-md-cog" :face 'nerd-icons-blue) " "))

  (cl-defmethod nerd-icons-completion-get-icon (cand (_cat (eql mode)))
    "Display mode icon for nerd-icons-completion."
    (concat (nerd-icons-octicon "nf-oct-package" :face 'nerd-icons-blue) " "))

  (cl-defmethod nerd-icons-completion-get-icon (cand (_cat (eql function)))
    "Display function icon for nerd-icons-completion."
    (if (commandp (intern cand))
        (concat (nerd-icons-octicon "nf-oct-gear" :face 'nerd-icons-blue) " ")
      (concat (nerd-icons-octicon "nf-oct-package" :face 'nerd-icons-purple) " ")))

  (cl-defmethod nerd-icons-completion-get-icon (cand (_cat (eql variable)))
    "Display function icon for nerd-icons-completion."
    (if (custom-variable-p (intern cand))
        (concat (nerd-icons-octicon "nf-oct-tag" :face 'nerd-icons-lblue) " ")
      (concat (nerd-icons-mdicon "nf-md-tag" :face 'nerd-icons-lblue) " ")))

  (cl-defmethod nerd-icons-completion-get-icon (cand (_cat (eql face)))
    "Display face icon for nerd-icons-completion."
    (concat (nerd-icons-mdicon "nf-md-palette" :face 'nerd-icons-blue) " "))

  (cl-defmethod nerd-icons-completion-get-icon (cand (_cat (eql history)))
    "Display history icon for nerd-icons-completion."
    (concat (nerd-icons-octicon "nf-oct-history" :face 'nerd-icons-blue) " "))

  (cl-defmethod nerd-icons-completion-get-icon (cand (_cat (eql theme)))
    "Display theme icon for nerd-icons-completion."
    (concat (nerd-icons-mdicon "nf-md-palette" :face 'nerd-icons-lcyan) " "))

  (defun nerd-icons-completion--counsel-imenu-symbol (cand)
    "Return imenu symbol from CAND."
    (let ((str (split-string cand ": ")))
      (or (cadr str) (car str))))
  (cl-defmethod nerd-icons-completion-get-icon (cand (_cat (eql symbol)))
    "Display the symbol icon all-the-icons-completion."
    (let ((sym (intern (nerd-icons-completion--counsel-imenu-symbol cand))))
      (cond
       ((string-match-p "Packages?[:)]" cand)
        (all-the-icons-octicon "nf-oct-archive" :face 'nerd-icons-silver))
       ((or (functionp sym) (macrop sym))
        (nerd-icons-completion-get-icon cand 'function))
       ((facep sym)
        (nerd-icons-completion-get-icon cand 'face))
       ((symbolp sym)
        (nerd-icons-completion-get-icon cand 'variable))
       (t (nerd-icons-octicon "nf-oct-gear" :face 'all-the-icons-silver)))))
  (nerd-icons-completion-mode))

(use-package nerd-icons-corfu
  :ensure t
  :after corfu
  :config
  (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter))

;; Disable for now, as having it enabled causes dired to not reliably select the
;; current buffer when opening dired for directory of current buffer.
(use-package nerd-icons-dired
  :vc (:url "https://github.com/rainstormstudio/nerd-icons-dired" :branch "main" :rev :newest)
  :hook
  (dired-mode . nerd-icons-dired-mode)
  :custom
  (nerd-icons-dired-v-adjust 0.01))

(use-package nerd-icons-ibuffer
  :hook
  (ibuffer-mode . nerd-icons-ibuffer-mode))

(use-package treemacs-nerd-icons
  :config
  (with-eval-after-load 'treemacs
    (treemacs-load-theme "nerd-icons")))

(use-package treemacs-tab-bar ;;treemacs-tab-bar if you use tab-bar-mode
  :defer t
  :after (treemacs)
  :config (treemacs-set-scope-type 'Tabs))

(use-package treemacs-persp
  :after (treemacs persp-mode)
  :commands treemacs-set-scope-type
  :init (treemacs-set-scope-type 'Perspectives))
#+end_src

* icon

#+begin_src emacs-lisp :tangle no

(use-package all-the-icons-completion
  :after marginalia
  :commands all-the-icons-completion-marginalia-setup
  :hook (marginalia-mode . all-the-icons-completion-marginalia-setup)
  :init
  (all-the-icons-completion-mode))

(use-package treemacs-icons-dired
  :after treemacs dired
  :ensure t
  :config (treemacs-icons-dired-mode))

(use-package all-the-icons
  :if IS-GUI
  ;; :if (or IS-GUI (daemonp))
  ;; :init
  ;; (setq all-the-icons-scale-factor 0.8)
  )

(use-package treemacs-all-the-icons
  :disabled
  :after treemacs
  :defer t
  :config
  (treemacs-load-theme "all-the-icons"))

(use-package all-the-icons-dired
  :if IS-GUI
  :after (all-the-icons dired)
  :hook (dired-mode . all-the-icons-dired-mode))

(use-package all-the-icons-ibuffer
  :if IS-GUI
  :after (all-the-icons ibuffer)
  :config
  (all-the-icons-ibuffer-mode t))
#+end_src

** auto set treemacs header

#+begin_src emacs-lisp
;; (defun aorst/treemacs-setup-title ()
;;   (let ((bg (face-attribute 'default :background))
;;         (fg (face-attribute 'default :foreground)))
;;     (face-remap-add-relative 'header-line
;;                              :background bg :foreground fg
;;                              :box `(:line-width ,(/ (line-pixel-height) 2) :color ,bg)))
;;   (setq header-line-format
;;         '((:eval
;;            (let* ((text (treemacs-workspace->name (treemacs-current-workspace)))
;;                   (extra-align (+ (/ (length text) 2) 1))
;;                   (width (- (/ (window-width) 2) extra-align)))
;;              (concat (make-string width ?\s) text))))))

;; (add-hook 'treemacs-mode-hook #'aorst/treemacs-setup-title)

(defun my/treemacs-setup-title ()
  (let ((bg (face-attribute 'default :background))
        (fg (face-attribute 'default :foreground)))
    (face-remap-add-relative 'header-line
                             ;; :family "SF Pro Display"
           :bold t
                             :height 120
                             :background bg :foreground fg
                             :box `(:line-width ,(/ (line-pixel-height) 2) :color ,bg)))
  (setq header-line-format
        '((:eval
           (let* ((text "File Explorer")
                  (extra-align (+ (/ (length text) 2) 1))
                  (width (- (/ (window-width) 2) extra-align)))
             (concat (make-string width ?\s) text))))))

(add-hook 'treemacs-mode-hook #'my/treemacs-setup-title)
#+end_src


* auto-highlight-symbol

#+begin_src emacs-lisp :tangle no
(use-package auto-highlight-symbol
  :bind (:map auto-highlight-symbol-mode-map
         ("M-<"     . ahs-backward)
         ("M->"     . ahs-forward)
         ("M--"     . ahs-back-to-start)
         ("C-x C-'" . ahs-change-range) ; This might be only function that I still do not know how to achieve with Isearch
         ("C-x C-a" . ahs-edit-mode))
  :hook (after-init . global-auto-highlight-symbol-mode)
  :config
  (setq ahs-default-range 'ahs-range-whole-buffer))
#+end_src


** hl-todo: highlight TODO keywords

#+begin_src emacs-lisp
(use-package hl-todo
  :custom-face
  (hl-todo ((t (:inherit hl-todo :underline t))))
  :custom
  (hl-todo-keyword-faces '(("TODO"   . "#ff7060")
			   ("BUG"   . "#ff0000")
			   ("DEBUG" . "#A020F0")
			   ("STUB"   . "#1E90FF")
                           ("FIXME"  . "#caa000")))
  :config
  (global-hl-todo-mode t)
  ;; :bind
  ;; (:map hl-todo-mode-map
  ;; 	("C-c p" . hl-todo-previous)
  ;; 	("C-c n" . hl-todo-next)
  ;; 	("C-c o" . hl-todo-occur)
  ;; 	("C-c i" . hl-todo-insert))
  )
#+end_src


** compilation color

#+begin_src emacs-lisp
(use-package ansi-color
  :init
  (defun colorize-compilation-buffer ()
    (read-only-mode)
    (ansi-color-apply-on-region compilation-filter-start (point))
    (read-only-mode))
  (add-hook 'compilation-filter-hook 'ansi-color-compilation-filter)
  ;; (add-hook 'compilation-filter-hook 'colorize-compilation-buffer)
  )
#+end_src


** tab-line
#+begin_src emacs-lisp
(use-package tab-line
    :demand t
    :bind
    (("C-<iso-lefttab>" . tab-line-switch-to-prev-tab)
     ("C-<tab>" . tab-line-switch-to-next-tab))
    :config
    ;; custom configurations
    (defcustom tab-line-tab-min-width 10
      "Minimum width of a tab in characters."
      :type 'integer
      :group 'tab-line)
    (defcustom tab-line-tab-max-width 30
      "Maximum width of a tab in characters."
      :type 'integer
      :group 'tab-line)

    (defun phd/tab-line-tabs-window-buffers ()
      "Return a list of tabs displayed in the tab-line, excluding scrachy ones."
      (let* ((window (selected-window))
             (buffer (window-buffer window))
             (next-buffers (seq-remove (lambda (b) (or (eq b buffer)
                                                  (s-starts-with? "*" (buffer-name b))))
                                       (window-next-buffers window)))
             (next-buffers (seq-filter #'buffer-live-p next-buffers))
             (prev-buffers (seq-remove (lambda (b) (or (eq b buffer)
                                                  (s-starts-with? "*" (buffer-name b))))
                                       (mapcar #'car (window-prev-buffers window))))
             (prev-buffers (seq-filter #'buffer-live-p prev-buffers))
             ;; Remove next-buffers from prev-buffers
             (prev-buffers (seq-difference prev-buffers next-buffers)))
	(append (reverse prev-buffers)
		(list buffer)
		next-buffers)))
    (defun phd/tab-line-name-buffer (buffer &rest _buffers)
      "Create name for tab with padding and truncation.
     If buffer name is shorter than `tab-line-tab-max-width' it gets
     centered with spaces, otherwise it is truncated, to preserve
     equal width for all tabs.  This function also tries to fit as
     many tabs in window as possible, so if there are no room for tabs
     with maximum width, it calculates new width for each tab and
     truncates text if needed.  Minimal width can be set with
     `tab-line-tab-min-width' variable."
      (with-current-buffer buffer
	(let* ((window-width (window-width (get-buffer-window)))
               (tab-amount (length (phd/tab-line-tabs-window-buffers)))
               (window-max-tab-width (if (>= (* (+ tab-line-tab-max-width 3) tab-amount) window-width)
					 (/ window-width tab-amount)
                                       tab-line-tab-max-width))
               (tab-width (- (cond ((> window-max-tab-width tab-line-tab-max-width)
                                    tab-line-tab-max-width)
                                   ((< window-max-tab-width tab-line-tab-min-width)
                                    tab-line-tab-min-width)
                                   (t window-max-tab-width))
                             3)) ;; compensation for ' x ' button
               (buffer-name (string-trim (buffer-name)))
               (name-width (length buffer-name)))
          (if (>= name-width tab-width)
              (concat  " " (truncate-string-to-width buffer-name (- tab-width 2)) "…")
            (let* ((padding (make-string (+ (/ (- tab-width name-width) 2) 1) ?\s))
                   (buffer-name (concat padding buffer-name)))
              (concat buffer-name (make-string (- tab-width (length buffer-name)) ?\s)))))))

    ;; (defun tab2-get-filtered-buffer-list ()
    ;; (let* ((current-bufs (seq-filter 'tab2-buffer-filter (buffer-list)))
    ;; 	 (intersect-tabs (seq-filter (lambda (it) (member it current-bufs)) (tab2-get-buffer-list)))
    ;; 	 (new-tab (when (and (not (member (current-buffer) (tab2-get-buffer-list)))
    ;; 			     (member (current-buffer) current-bufs))
    ;; 		    (current-buffer))))
    ;;   (if new-tab
    ;; 	(tab2-set-buffer-list (append intersect-tabs (list new-tab)))
    ;;     (tab2-set-buffer-list intersect-tabs))))
    ;; (setq tab-line-tabs-function 'tab2-get-filtered-buffer-list)
    (setq  tab-line-close-button-show t
	   tab-line-new-button-show nil
	   tab-line-separator ""
	   tab-line-tab-name-function #'phd/tab-line-name-buffer
	   tab-line-tabs-function #'phd/tab-line-tabs-window-buffers
	   tab-line-right-button (propertize (if (char-displayable-p ?▶) " ▶ " " > ")
                                             'keymap tab-line-right-map
                                             'mouse-face 'tab-line-highlight
                                             'help-echo "Click to scroll right")
	   tab-line-left-button (propertize (if (char-displayable-p ?◀) " ◀ " " < ")
					    'keymap tab-line-left-map
					    'mouse-face 'tab-line-highlight
					    'help-echo "Click to scroll left")
	   tab-line-close-button (propertize (if (char-displayable-p ?×) " × " " x ")
                                             'keymap tab-line-tab-close-map
                                             'mouse-face 'tab-line-close-highlight
                                             'help-echo "Click to close tab"))
    (global-tab-line-mode 1)
    ;; (defvar eh-space "  ")

    ;; (defun eh-tab-line-format (orig_func)
    ;;   "在 tab-line 的最后添加一个全角空格，防止 tab-line 抖动。"
    ;;   (list (funcall orig_func) eh-space))

    ;; (advice-add 'tab-line-format :around #'eh-tab-line-format)
    ;; (setq
    ;;  tab-line-new-button-show nil
    ;;  tab-line-close-button-show nil)

    ;; mode in which tab-line is not displayed
    (dolist (mode '(term-mode
                    vterm-mode
		    eat-mode))
      (add-to-list 'tab-line-exclude-modes mode))
    )
#+end_src
