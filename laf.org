#+title: Look & Feel

Configuration for look and feels, make UI looks better.

#+begin_src emacs-lisp
  ;;; -*- lexical-binding: t -*-
#+end_src

* Core UI configuration
#+begin_src emacs-lisp
;; Hide the mouse while typing:
(setq make-pointer-invisible t)

;; Make bell visible, not aural.
(setq visible-bell t)

;; Always flash for parens.
(show-paren-mode 1)

;; Rearrange the menubars, so it goes tools | buffers | help.
(setq menu-bar-final-items '(tools buffer help-menu))

;; very long line performence optimizy
(global-so-long-mode t)

  ;;; highlight current line
(global-hl-line-mode)

;; ;; disable mode-line
;; (global-hide-mode-line-mode 1)

;; Removes *scratch* from buffer after the mode has been set.
(defun remove-scratch-buffer ()
  (if (get-buffer "*scratch*")
      (kill-buffer "*scratch*")))
(add-hook 'after-change-major-mode-hook 'remove-scratch-buffer)

(add-to-list 'warning-suppress-types '(undo discard-info))

;; auto maximized frame
;; (when (and IS-MAC IS-GUI)
;;   ;; (add-to-list 'initial-frame-alist '(fullscreen . maximized))
;;   ;; (add-to-list 'default-frame-alist '(fullscreen . fullheight))
;;  ;; (add-to-list 'default-frame-alist '(fullscreen . maximized))
;;  )

;; Prevent the glimpse of un-styled Emacs by disabling these UI elements early.
;; (push '(menu-bar-lines . 0) default-frame-alist)
;; (push '(tool-bar-lines . 0) default-frame-alist)
(push '(vertical-scroll-bars) default-frame-alist)
(push '(inhibit-double-buffering . t) default-frame-alist)

(add-hook 'window-size-change-functions
          #'frame-hide-title-bar-when-maximized)

(when IS-MAC
  (setq frame-resize-pixelwise t
  mac-command-modifier 'super
  mac-option-modifier  'meta)
  (when (featurep 'ns)
    (setq ns-use-thin-smoothing t
          ns-use-fullscreen-animation t
          ns-use-native-fullscreen t
          ns-use-proxy-icon nil
          ns-use-mwheel-momentum t
          ns-use-mwheel-acceleration t)
    ;; (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
    ;; (add-to-list 'default-frame-alist '(ns-appearance . dark))
    ))

;; ;; Sets `ns-transparent-titlebar' and `ns-appearance' frame parameters so window
;; ;; borders will match the enabled theme.
;; (and (or (daemonp)
;;          (display-graphic-p))
;;      (require 'ns-auto-titlebar nil t)
;;      (ns-auto-titlebar-mode +1))

;; sane trackpad/mouse scroll settings
(setq mac-redisplay-dont-reset-vscroll t
      mac-mouse-wheel-smooth-scroll nil)

;; Symbol’s value as variable is void: mouse-wheel-down-event
(when (require 'mwheel nil 'noerror)
  ;; scroll two lines at a time (less "jumpy" than defaults)
  (setq mouse-wheel-scroll-amount
        '(1                                 ; 一次只滚动 1 行
          ((shift) . 2)                     ; 按住 Shift 滚动 2 行
          ((control). 3))                   ; 按住 Ctrl 滚动 3 行
        mouse-wheel-progressive-speed nil ;; don't accelerate scrolling
        mouse-wheel-follow-mouse 't ;; scroll window under mouse
        scroll-preserve-screen-position 't ;; 鼠标滚动的时候保持光标在屏幕中的位置不变
        scroll-step 2) ;; keyboard scroll two lines at a time
  (mouse-wheel-mode t)
  ;; Better scrolling with mouse wheel/trackpad.
  (unless (and (boundp 'mac-mouse-wheel-smooth-scroll) mac-mouse-wheel-smooth-scroll)
    (global-set-key [wheel-down] (lambda () (interactive) (scroll-up-command 1)))
    (global-set-key [wheel-up] (lambda () (interactive) (scroll-down-command 1)))
    (global-set-key [double-wheel-down] (lambda () (interactive) (scroll-up-command 2)))
    (global-set-key [double-wheel-up] (lambda () (interactive) (scroll-down-command 2)))
    (global-set-key [triple-wheel-down] (lambda () (interactive) (scroll-up-command 4)))
    (global-set-key [triple-wheel-up] (lambda () (interactive) (scroll-down-command 4)))))

;; Clear Window clutter and set up the look and feel
(when (and (fboundp 'menu-bar-mode) (not (eq menu-bar-mode -1)))
  (menu-bar-mode -1))
(when (and (fboundp 'tool-bar-mode) (not (eq tool-bar-mode -1)))
  (tool-bar-mode -1))
(when (and (fboundp 'scroll-bar-mode) (not (eq scroll-bar-mode -1)))
  (scroll-bar-mode -1))
(when (and (fboundp 'horizontal-scroll-bar-mode) (not (eq horizontal-scroll-bar-mode -1)))
  (scroll-bar-mode -1))

;; Display column number in Mode line
(when (and (fboundp 'column-number-mode) (not (eq column-number-mode t)))
  (column-number-mode t))

(when (and (fboundp 'use-file-dialog) (not (eq use-file-dialog -1)))
  (use-file-dialog -1))
(when (and (fboundp 'use-dialog-box) (not (eq use-dialog-box -1)))
  (use-dialog-box -1))
(when (and (fboundp 'blink-cursor-mode) (not (eq blink-cursor-mode -1)))
  (blink-cursor-mode -1))

;; emacs 28 new feature, CJK word breaking lines
(when (boundp 'word-wrap-by-category)
  (setq word-wrap-by-category t))

;; ;; Display visited file's path in the frame title
;; ;; @See http://emacsredux.com/blog/2013/04/07/display-visited-files-path-in-the-frame-title/
;; (setq frame-title-format
;;       `((:eval (if (buffer-file-name)
;;                    (abbreviate-file-name (buffer-file-name))
;;                  "%b"))))


;; (setq frame-title-format '(multiple-frames "%b"
;;             ("" invocation-name "@" system-name)))

;; ;; Activate winner mode for quickly changing window sizes, etc
;; (when (fboundp 'winner-mode)
;;   (winner-mode 1))

(defun up-slightly () (interactive) (scroll-up 5))
(defun down-slightly () (interactive) (scroll-down 5))
(global-set-key [mouse-4] 'down-slightly)
(global-set-key [mouse-5] 'up-slightly)

(defun up-one () (interactive) (scroll-up 1))
(defun down-one () (interactive) (scroll-down 1))
(global-set-key [(shift mouse-4)] 'down-one)
(global-set-key [(shift mouse-5)] 'up-one)

(defun up-a-lot () (interactive) (scroll-up))
(defun down-a-lot () (interactive) (scroll-down))
(global-set-key [(control mouse-4)] 'down-a-lot)
(global-set-key [(control mouse-5)] 'up-a-lot)

(when IS-GUI
  (defun toggle-fullscreen ()
    "Toggle full screen"
    (interactive)
    (set-frame-parameter
     nil 'fullscreen
     (when (not (frame-parameter nil 'fullscreen)) 'fullboth)))

  (defun poly/startup-maximize-frame()
    (let* ((top (frame-parameter nil 'top))
     (left (frame-parameter nil 'left))
     (fullscreen (frame-parameter nil 'fullscreen)))
      (unless (eq 'maximized fullscreen)
  (toggle-frame-maximized))
      (when (or (> top 50) (> left 50))
  ;; (message "set left & top, fullscreen: %s" fullscreen)
        (set-frame-parameter nil 'top 36)
    (set-frame-parameter nil 'left 0)
  ;; Give focus to emacs window at startup
  (x-focus-frame nil))))

  (add-hook 'emacs-startup-hook #'poly/startup-maximize-frame))

;; Call this function to increase/decrease font size.
(defun bcm/zoom (n)
  "With positive N, increase the font size, otherwise decrease it."
  (set-face-attribute 'default (selected-frame) :height
                      (+ (face-attribute 'default :height)
                         (* (if (> n 0) 1 -1) 10))))
;; Add some zoom keybindings.
(global-set-key (kbd "C-+") #'(lambda () (interactive) (bcm/zoom 1)))
(global-set-key (kbd "C--") #'(lambda () (interactive) (bcm/zoom -1)))

(when (and IS-GUI IS-MAC)
  (add-hook 'focus-in-hook
      (lambda() (tl/open-hammerspoon-url "Emacs" "action" "FocusIn" "pid" poly/emacs-pid-str)))
(add-hook 'emacs-startup-hook
      (lambda() (tl/open-hammerspoon-url "Emacs" "action" "StartUp" "pid" poly/emacs-pid-str)))
  (add-hook 'focus-out-hook
      (lambda() (tl/open-hammerspoon-url "Emacs" "action" "FocusOut" "pid" poly/emacs-pid-str))))
#+end_src

*  since emacs 28

#+begin_src emacs-lisp
(setq use-short-answers t)
(setq create-lockfiles nil)
#+end_src

*  initial frame
#+begin_src emacs-lisp
;; Visit files opened outside of Emacs in existing frame, not a new one
(setq ns-pop-up-frames nil)

;; reference | http://d.hatena.ne.jp/IMAKADO/20090215/1234699972
(defun my-toggle-transparency ()
  "Toggle transparency."
  (interactive)
  (let ((frame  (selected-frame)))
    (when (display-graphic-p frame)
      (let* ((current-alpha (or (car (cdr (assoc 'alpha (frame-parameters frame)))) 1.0))
       (new-alpha (or (cl-case current-alpha ((0.85) 1.0)
             ;; ((100) 93)
             ;; ((93) 91)
             ;; ((91) 78) ((78) 66) ((66) 50)
             ;; (t 100)
             ) 0.85)))
  ;; (princ current-alpha)
  (when new-alpha (set-frame-parameter frame 'alpha `(,new-alpha ,new-alpha)))))))
#+end_src

* Font

#+begin_src emacs-lisp
(setq +font-family "JetBrains Mono")

;; (setq +ufont-family "Sarasa Mono SC")
(defvar +ufont-family "PingFang SC") ;; chinese font
;; (setq +fixed-pitch-family "Sarasa Mono SC")
(setq +fixed-pitch-family "JetBrains Mono")
(setq +variable-pitch-family "Sarasa Mono SC")

(defun poly/font-exist-p (fontname)
  "test if this font is exist or not."
  (when (and fontname (not (string= fontname "")))
    (when (x-list-fonts fontname) t)))

(setq english-font-size 12)
(setq chinese-font-size 14)

(defun +load-font (&optional frame)
  (interactive)
  (setq english-fonts `(,+font-family))
  (setq chinese-fonts `(,+ufont-family))
  (set-face-attribute 'default nil
		      ;; (format "%s-%d" (car english-fonts) 12)
                      :font (format "%s:pixelsize=%d" (car english-fonts) english-font-size) ;; 11 13 17 19 23
		      )
  (dolist (charset '(kana han symbol cjk-misc bopomofo))
    (set-fontset-font  nil ;; (frame-parameter nil 'font)
		       charset
		       (font-spec :family +ufont-family
				  ;; (car chinese-fonts)
				  :size chinese-font-size))) ;; 14 16 20 22 28
  (set-face-attribute 'variable-pitch nil :font (format "%s-%d" +ufont-family chinese-font-size))
  (set-face-attribute 'fixed-pitch nil :font (format "%s-%d" +ufont-family chinese-font-size))

  ;; (setq face-font-rescale-alist `((,+ufont-family . 1.2)))
  ;; (setq face-font-rescale-alist `((,+ufont-family . 1.24)))

  ;; emoji
  (when IS-MAC
    (if (version< "27.0" emacs-version)
	(set-fontset-font "fontset-default" 'unicode "Apple Color Emoji" nil 'prepend)
      (set-fontset-font t 'symbol (font-spec :family "Apple Color Emoji" :size 13) nil 'prepend)))

  (let* ((+font-size 12)
	 (font-spec (format "%s-%d" +font-family 12))
         (variable-pitch-font-spec (format "%s-%d" +variable-pitch-family +font-size))
         (fixed-pitch-font-spec (format "%s-%d" +fixed-pitch-family +font-size)))
    (set-fontset-font nil nil (font-spec :family +font-family
					 :size +font-size
					 :width 'normal
					 ) frame)
    ;; (set-frame-font font-spec frame)
    (set-face-attribute 'variable-pitch nil :font variable-pitch-font-spec)
    (set-face-attribute 'fixed-pitch nil :font fixed-pitch-font-spec))
  ;; (+load-ext-font)
  )

;; (when (IS-GUI)
;;   (+load-font nil))
;; (add-hook 'after-init-hook
;;     (lambda ()
;;       (when (IS-GUI)
;;         (+load-font nil))))

;; (add-hook 'telega-root-mode-hook '+load-font)
;; (add-hook 'after-init-hook
;;     (lambda ()
;;       (when (IS-GUI)
;;         (+load-font nil))))

(defun max/set-font (FONT-NAME CN-FONT-NAME &optional INITIAL-SIZE CN-FONT-RESCALE-RATIO)
  "Set different font-family for Latin and Chinese charactors."
  (let* ((size (or INITIAL-SIZE 14))
	 (ratio (or CN-FONT-RESCALE-RATIO 0.0))
	 (main (font-spec :name FONT-NAME :size size))
	 (cn (font-spec :name CN-FONT-NAME)))
    (set-face-attribute 'default nil :font main)
    (dolist (charset '(kana han symbol cjk-misc bopomofo))
      (set-fontset-font t charset cn))
    (setq face-font-rescale-alist (if (/= ratio 0.0) `((,CN-FONT-NAME . ,ratio)) nil))))


	    (when IS-GUI
(add-hook 'after-init-hook
	  (lambda ()
	      ;; (max/set-font "Monaco" "Sarasa Mono SC" 13 1.25)
	      (max/set-font "JetBrains Mono" "Hiragino Sans GB" 13 1.25)
	      ;; (max/set-font "Fira Code" "Source Han Serif SC" 13 1.3)
              ;; (+load-font nil)
	      )))

;; (max/set-font "Fira Code" "Hiragino Sans GB" 13 1.25)



;; (set-face-attribute 'default nil :family "Jetbrains Mono NL" :height 135)
;; (set-face-attribute 'fixed-pitch nil :family "Jetbrains Mono NL")
;; (set-face-attribute 'variable-pitch nil :family "Jetbrains Mono NL")
#+end_src

* ligatures

enable ligatures with emacs-mac, must install font first

#+begin_src emacs-lisp
(when (fboundp 'mac-auto-operator-composition-mode)
  ;; Function available in railwaycat Emacs only:
  ;; `mac-auto-operator-composition-mode' automatically composes
  ;; consecutive occurrences of characters consisting of the elements
  ;; of `mac-auto-operator-composition-characters' if the font
  ;; supports such a composition.
  (mac-auto-operator-composition-mode t))
#+end_src

#+begin_src emacs-lisp
(let ((ligatures `((?-  . ,(regexp-opt '("-|" "-~" "---" "-<<" "-<" "--" "->" "->>" "-->")))
                   (?/  . ,(regexp-opt '("/**" "/*" "///" "/=" "/==" "/>" "//")))
                   (?*  . ,(regexp-opt '("*>" "***" "*/")))
                   (?<  . ,(regexp-opt '("<-" "<<-" "<=>" "<=" "<|" "<||" "<|||::=" "<|>" "<:" "<>" "<-<"
                                         "<<<" "<==" "<<=" "<=<" "<==>" "<-|" "<<" "<~>" "<=|" "<~~" "<~"
                                         "<$>" "<$" "<+>" "<+" "</>" "</" "<*" "<*>" "<->" "<!--")))
                   (?:  . ,(regexp-opt '(":>" ":<" ":::" "::" ":?" ":?>" ":=")))
                   (?=  . ,(regexp-opt '("=>>" "==>" "=/=" "=!=" "=>" "===" "=:=" "==")))
                   (?!  . ,(regexp-opt '("!==" "!!" "!=")))
                   (?>  . ,(regexp-opt '(">]" ">:" ">>-" ">>=" ">=>" ">>>" ">-" ">=")))
                   (?&  . ,(regexp-opt '("&&&" "&&")))
                   (?|  . ,(regexp-opt '("|||>" "||>" "|>" "|]" "|}" "|=>" "|->" "|=" "||-" "|-" "||=" "||")))
                   (?.  . ,(regexp-opt '(".." ".?" ".=" ".-" "..<" "...")))
                   (?+  . ,(regexp-opt '("+++" "+>" "++")))
                   (?\[ . ,(regexp-opt '("[||]" "[<" "[|")))
                   (?\{ . ,(regexp-opt '("{|")))
                   (?\? . ,(regexp-opt '("??" "?." "?=" "?:")))
                   (?#  . ,(regexp-opt '("####" "###" "#[" "#{" "#=" "#!" "#:" "#_(" "#_" "#?" "#(" "##")))
                   (?\; . ,(regexp-opt '(";;")))
                   (?_  . ,(regexp-opt '("_|_" "__")))
                   (?\\ . ,(regexp-opt '("\\" "\\/")))
                   (?~  . ,(regexp-opt '("~~" "~~>" "~>" "~=" "~-" "~@")))
                   (?$  . ,(regexp-opt '("$>")))
                   (?^  . ,(regexp-opt '("^=")))
                   (?\] . ,(regexp-opt '("]#"))))))
  (dolist (char-regexp ligatures)
    (set-char-table-range composition-function-table (car char-regexp)
                          `([,(cdr char-regexp) 0 font-shape-gstring]))))

(global-auto-composition-mode -1)

(defun aa/enable-auto-composition ()
  (auto-composition-mode))

(add-hook 'prog-mode-hook #'aa/enable-auto-composition)
#+end_src

* modeline
** doom-modeline

#+begin_src emacs-lisp
(use-package doom-modeline
  :straight (doom-modeline
	     :type git
	     :host github
	     :repo "seagle0128/doom-modeline")
  ;; :pin-ref "9d322f53c35f6e815f88afa1821c9782f9df323a"
  :custom
  ;; (doom-modeline-buffer-file-name-style 'truncate-with-project)
  ;; (doom-modeline-buffer-file-name-style 'relative-to-project)
  ;; (doom-modeline-buffer-file-name-style 'relative-to-project)
  (doom-modeline-buffer-file-name-style 'truncate-all)
  (doom-modeline-project-detection 'projectile)
  (doom-modeline-modal-icon nil)
  (doom-modeline-icon t)
  (doom-modeline-major-mode-icon t)
  (doom-modeline-buffer-state-icon t)
  (doom-modeline-buffer-modification-icon t)
  (doom-modeline-unicode-fallback nil)
  (doom-modeline-continuous-word-count-modes '(markdown-mode gfm-mode org-mode))
  (doom-modeline-minor-modes t)
  (doom-modeline-major-mode-color-icon t)
  (doom-modeline-persp-name t)
  (doom-modeline-persp-icon t)
  (doom-modeline-lsp t)
  (doom-modeline-mu4e nil)
  ;; Whether display github notifications or not. Requires `ghub+` package.
  (doom-modeline-github nil)
  ;; The interval of checking github.
  (doom-modeline-github-interval (* 30 60))
  (doom-modeline-height 15)
  (doom-modeline-bar-width 3)
  (doom-modeline-vcs-max-length 25)
  (doom-modeline-checker-simple-format nil)
  (doom-modeline-env-version t)
  (doom-modeline-env-enable-python t)
  (doom-modeline-env-enable-ruby t)
  (doom-modeline-env-enable-perl t)
  (doom-modeline-env-enable-go t)
  (doom-modeline-env-enable-elixir t)
  (doom-modeline-env-enable-rust t)
  (doom-modeline-env-python-executable "python")
  (doom-modeline-env-ruby-executable "ruby")
  (doom-modeline-env-perl-executable "perl")
  (doom-modeline-env-go-executable "go")
  (doom-modeline-env-elixir-executable "iex")
  (doom-modeline-env-rust-executable "rustc")
  (doom-modeline-env-load-string "...")
  :config
  ;; (doom-modeline-def-modeline 'my-simple-line
  ;;   '(modals input-method bar matches buffer-info-simple remote-host buffer-position parrot selection-info)
  ;;   '(objed-state misc-info persp-name mu4e lsp minor-modes indent-info buffer-encoding major-mode process vcs checker)
  ;;   )

  (doom-modeline-def-modeline 'my-simple-line-v2
    '(;; modals
      input-method bar matches buffer-info-simple remote-host buffer-position parrot selection-info)
    '(;; objed-state
      misc-info
      persp-name
      lsp ;; minor-modes
      indent-info;
      ;; buffer-encoding
      ;; major-mode
      process vcs checker)
    )

  ;; Add to `doom-modeline-mode-hook` or other hooks
  ;; (add-hook 'doom-modeline-mode-hook
  ;;      (lambda() (doom-modeline-set-modeline 'my-simple-line 'default)))
  (add-hook 'doom-modeline-mode-hook
	    (lambda() (doom-modeline-set-modeline 'my-simple-line-v2)))
  (doom-modeline-mode t))
#+END_SRC

** simple-modeline
#+begin_src emacs-lisp :tangle no
(use-package simple-modeline
  :straight t
  :hook (after-init . simple-modeline-mode)
  :config
  (setq simple-modeline-segments
	'((simple-modeline-segment-input-method
	   ;; simple-modeline-segment-modified
	   simple-modeline-segment-buffer-name
	   simple-modeline-segment-position)
	  (;; simple-modeline-segment-minor-modes
	   ;; simple-modeline-segment-eol
	   ;; simple-modeline-segment-encoding
	   simple-modeline-segment-vc
	   ;; simple-modeline-segment-misc-info
	   simple-modeline-segment-process
	   simple-modeline-segment-major-mode))))
#+end_src


** Minions

Implements a menu that lists enabled and disabled minor modes in the mode-line.

#+begin_src emacs-lisp
(use-package minions
  :config (minions-mode)
  :custom
  (minions-mode-line-lighter "☰"))
#+end_src
* treemacs
#+begin_src emacs-lisp
(use-package treemacs
  :straight t
  ;; :after hl-line-mode
  :custom
  (treemacs-collapse-dirs                 (if (executable-find "python") 3 0))
  (treemacs-deferred-git-apply-delay      0.5)
  (treemacs-display-in-side-window        t)
  (treemacs-eldoc-display                 nil)
  (treemacs-file-event-delay              5000)
  (treemacs-file-follow-delay             0.2)
  (treemacs-follow-after-init             t)
  (treemacs-git-command-pipe              "")
  (treemacs-git-integration                t)
  (treemacs-goto-tag-strategy             'refetch-index)
  (treemacs-indentation                   2)
  (treemacs-indentation-string            " ")
  (treemacs-is-never-other-window         t)
  (treemacs-max-git-entries               5000)
  (treemacs-no-png-images                 nil)
  (treemacs-no-delete-other-windows       t)
  (treemacs-project-follow-cleanup        t)
  (treemacs-persist-file                  (expand-file-name "/treemacs-persist" poly-cache-dir))
  (treemacs-recenter-distance             0.1)
  (treemacs-recenter-after-file-follow    nil)
  (treemacs-recenter-after-tag-follow     nil)
  (treemacs-recenter-after-project-jump   'always)
  (treemacs-recenter-after-project-expand 'on-distance)
  (treemacs--icon-size 12)
  (treemacs-silent-refresh t)
  (treemacs-follow-mode t)
  (treemacs-show-cursor                   nil)
  (treemacs-show-hidden-files             t)
  (treemacs-silent-filewatch              t)
  (treemacs-sorting                       'alphabetic-case-insensitive-asc)
  (treemacs-space-between-root-nodes      t)
  (treemacs-tag-follow-cleanup            t)
  (treemacs-tag-follow-delay              1.5)
  (treemacs-resize-icons                   16)
  (treemacs-width                         28)
  ;; (doom-treemacs-use-generic-icons t)
  :defines winum-keymap
  :commands (treemacs-follow-mode
             treemacs-filewatch-mode
             treemacs-fringe-indicator-mode
             treemacs-git-mode)
  :init
  (with-eval-after-load 'winum
    (bind-key (kbd "M-0") #'treemacs-select-window winum-keymap))
  :config
  (treemacs-follow-mode t)
  (treemacs-filewatch-mode t)
  (treemacs-fringe-indicator-mode t)
  (pcase (cons (not (null (executable-find "git")))
         (not (null (executable-find "python3"))))
    (`(t . t)
     (treemacs-git-mode 'deferred))
    (`(t . _)
     (treemacs-git-mode 'simple)))
  ;; (if (fboundp 'define-fringe-bitmap)
  ;;     (define-fringe-bitmap 'treemacs--fringe-indicator-bitmap
  ;;       (vector #b00000111111
  ;;               #b00000111111
  ;;               #b00000111111
  ;;               #b00000111111
  ;;               #b00000111111
  ;;               #b00000111111
  ;;               #b00000111111
  ;;               #b00000111111
  ;;               #b00000111111
  ;;               #b00000111111
  ;;               #b00000111111
  ;;               #b00000111111
  ;;               #b00000111111
  ;;               #b00000111111
  ;;               #b00000111111
  ;;               #b00000111111
  ;;               #b00000111111
  ;;               #b00000111111
  ;;               #b00000111111
  ;;               #b00000111111
  ;;               #b00000111111
  ;;               #b00000111111
  ;;               #b00000111111
  ;;               #b00000111111
  ;;               #b00000111111
  ;;               #b00000111111)))
  :bind (([f8]        . treemacs)
         ("C-x t t"   . treemacs)
         ("C-x t d"   . treemacs-select-directory)
         ("C-`"       . treemacs-select-window)
         ("M-0"       . treemacs-select-window)
         ("C-x t 1"   . treemacs-delete-other-windows)
   ("s-t"       . treemacs-display-current-project-exclusively)
         ("s-T"       . treemacs-add-and-display-current-project)
         ("C-x t t"   . treemacs)
         ("C-x t b"   . treemacs-bookmark)
         ;; ("C-x t B"   . treemacs-bookmark)
         ("C-x t C-t" . treemacs-find-file)
         ("C-x t M-t" . treemacs-find-tag)
   :map treemacs-mode-map
         ([mouse-1]   . treemacs-single-click-expand-action)))

(use-package treemacs-projectile
  :straight t
  :ensure t
  :after (treemacs projectile)
  :config
  (setq treemacs-header-function #'treemacs-projectile-create-header))

(use-package treemacs-magit
  :straight t
  :after (treemacs magit)
  :commands treemacs-magit--schedule-update
  :hook ((magit-post-commit
          git-commit-post-finish
          magit-post-stage
          magit-post-unstage)
         . treemacs-magit--schedule-update)
  :ensure t)

(use-package treemacs-all-the-icons
  :straight t
  :after treemacs
  :defer t
  :config
  (treemacs-load-theme "all-the-icons"))

(use-package nerd-icons
  :defer 1
  :demand ;require
  :custom
  ;; need to install the nerd-font
  ;; For kitty terminal need to add family to kitty config (C-S-<f2>)
  (nerd-icons-font-family "JetBrains Mono NF"))


(use-package nerd-icons-dired
  :after nerd-icons
  :demand ; require
  :hook
  (dired-mode . nerd-icons-dired-mode))

(use-package nerd-icons-completion
  :after nerd-icons
  :demand  ; to require
  :config
  (nerd-icons-completion-mode))

(use-package treemacs-tab-bar ;;treemacs-tab-bar if you use tab-bar-mode
  :straight t
  :defer t
  :after (treemacs)
  :config (treemacs-set-scope-type 'Tabs))

(use-package treemacs-icons-dired
  :straight t
  :after treemacs dired
  :ensure t
  :config (treemacs-icons-dired-mode))

(use-package treemacs-persp
  :straight t
  :after persp-mode
  :commands treemacs-set-scope-type
  :init (treemacs-set-scope-type 'Frames))
#+end_src

** auto set treemacs header

#+begin_src emacs-lisp
;; (defun aorst/treemacs-setup-title ()
;;   (let ((bg (face-attribute 'default :background))
;;         (fg (face-attribute 'default :foreground)))
;;     (face-remap-add-relative 'header-line
;;                              :background bg :foreground fg
;;                              :box `(:line-width ,(/ (line-pixel-height) 2) :color ,bg)))
;;   (setq header-line-format
;;         '((:eval
;;            (let* ((text (treemacs-workspace->name (treemacs-current-workspace)))
;;                   (extra-align (+ (/ (length text) 2) 1))
;;                   (width (- (/ (window-width) 2) extra-align)))
;;              (concat (make-string width ?\s) text))))))

;; (add-hook 'treemacs-mode-hook #'aorst/treemacs-setup-title)

(defun my/treemacs-setup-title ()
  (let ((bg (face-attribute 'default :background))
        (fg (face-attribute 'default :foreground)))
    (face-remap-add-relative 'header-line
                             ;; :family "SF Pro Display"
           :bold t
                             :height 120
                             :background bg :foreground fg
                             :box `(:line-width ,(/ (line-pixel-height) 2) :color ,bg)))
  (setq header-line-format
        '((:eval
           (let* ((text "File Explorer")
                  (extra-align (+ (/ (length text) 2) 1))
                  (width (- (/ (window-width) 2) extra-align)))
             (concat (make-string width ?\s) text))))))

(add-hook 'treemacs-mode-hook #'my/treemacs-setup-title)
#+end_src


* auto-highlight-symbol

#+begin_src emacs-lisp :tangle no
(use-package auto-highlight-symbol
  :straight t
  :bind (:map auto-highlight-symbol-mode-map
         ("M-<"     . ahs-backward)
         ("M->"     . ahs-forward)
         ("M--"     . ahs-back-to-start)
         ("C-x C-'" . ahs-change-range) ; This might be only function that I still do not know how to achieve with Isearch
         ("C-x C-a" . ahs-edit-mode))
  :hook (after-init . global-auto-highlight-symbol-mode)
  :config
  (setq ahs-default-range 'ahs-range-whole-buffer))
#+end_src


** hl-todo: highlight TODO keywords

#+begin_src emacs-lisp
(use-package hl-todo
  :custom-face
  (hl-todo ((t (:inherit hl-todo :underline t))))
  :custom
  (hl-todo-keyword-faces '(("TODO"   . "#ff7060")
			   ("DEBUG" . "#A020F0")
			   ("STUB"   . "#1E90FF")
                           ("FIXME"  . "#caa000")))
  :config
  (global-hl-todo-mode t)
  :bind
  (:map hl-todo-mode-map
	("C-c p" . hl-todo-previous)
	("C-c n" . hl-todo-next)
	("C-c o" . hl-todo-occur)
	("C-c i" . hl-todo-insert)))
#+end_src


** compilation color

#+begin_src emacs-lisp
(add-hook 'compilation-filter-hook 'ansi-color-compilation-filter)
#+end_src
